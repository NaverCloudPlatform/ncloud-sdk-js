/*
* clouddb
* Cloud DB<br/>https://ncloud.apigw.ntruss.com/clouddb/v2
*
* OpenAPI spec version: 2018-07-02T10:10:19Z
*
* NBP corp.
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateCloudDBInstanceRequest', 'model/CreateCloudDBInstanceResponse', 'model/DeleteCloudDBServerInstanceRequest', 'model/DeleteCloudDBServerInstanceResponse', 'model/GetCloudDBConfigGroupListRequest', 'model/GetCloudDBConfigGroupListResponse', 'model/GetCloudDBImageProductListRequest', 'model/GetCloudDBImageProductListResponse', 'model/GetCloudDBInstanceListRequest', 'model/GetCloudDBInstanceListResponse', 'model/GetCloudDBProductListRequest', 'model/GetCloudDBProductListResponse', 'model/RebootCloudDBServerInstanceRequest', 'model/RebootCloudDBServerInstanceResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateCloudDBInstanceRequest'), require('../model/CreateCloudDBInstanceResponse'), require('../model/DeleteCloudDBServerInstanceRequest'), require('../model/DeleteCloudDBServerInstanceResponse'), require('../model/GetCloudDBConfigGroupListRequest'), require('../model/GetCloudDBConfigGroupListResponse'), require('../model/GetCloudDBImageProductListRequest'), require('../model/GetCloudDBImageProductListResponse'), require('../model/GetCloudDBInstanceListRequest'), require('../model/GetCloudDBInstanceListResponse'), require('../model/GetCloudDBProductListRequest'), require('../model/GetCloudDBProductListResponse'), require('../model/RebootCloudDBServerInstanceRequest'), require('../model/RebootCloudDBServerInstanceResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Clouddb) {
      root.Clouddb = {};
    }
    root.Clouddb.V2Api = factory(root.Clouddb.ApiClient, root.Clouddb.CreateCloudDBInstanceRequest, root.Clouddb.CreateCloudDBInstanceResponse, root.Clouddb.DeleteCloudDBServerInstanceRequest, root.Clouddb.DeleteCloudDBServerInstanceResponse, root.Clouddb.GetCloudDBConfigGroupListRequest, root.Clouddb.GetCloudDBConfigGroupListResponse, root.Clouddb.GetCloudDBImageProductListRequest, root.Clouddb.GetCloudDBImageProductListResponse, root.Clouddb.GetCloudDBInstanceListRequest, root.Clouddb.GetCloudDBInstanceListResponse, root.Clouddb.GetCloudDBProductListRequest, root.Clouddb.GetCloudDBProductListResponse, root.Clouddb.RebootCloudDBServerInstanceRequest, root.Clouddb.RebootCloudDBServerInstanceResponse);
  }
}(this, function(ApiClient, CreateCloudDBInstanceRequest, CreateCloudDBInstanceResponse, DeleteCloudDBServerInstanceRequest, DeleteCloudDBServerInstanceResponse, GetCloudDBConfigGroupListRequest, GetCloudDBConfigGroupListResponse, GetCloudDBImageProductListRequest, GetCloudDBImageProductListResponse, GetCloudDBInstanceListRequest, GetCloudDBInstanceListResponse, GetCloudDBProductListRequest, GetCloudDBProductListResponse, RebootCloudDBServerInstanceRequest, RebootCloudDBServerInstanceResponse) {
  'use strict';

  /**
   * V2 service.
   * @module api/V2Api
   * @version 1.0.0
   */

  /**
   * Constructs a new V2Api. 
   * @alias module:api/V2Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCloudDBInstance operation.
     * @callback module:api/V2Api~createCloudDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCloudDBInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB인스턴스생성
     * @param {module:model/CreateCloudDBInstanceRequest} createCloudDBInstanceRequest createCloudDBInstanceRequest
     * @param {module:api/V2Api~createCloudDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCloudDBInstanceResponse}
     */
    this.createCloudDBInstance = function(createCloudDBInstanceRequest, callback) {
      var postBody = createCloudDBInstanceRequest;

      // verify the required parameter 'createCloudDBInstanceRequest' is set
      if (createCloudDBInstanceRequest === undefined || createCloudDBInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createCloudDBInstanceRequest' when calling createCloudDBInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateCloudDBInstanceResponse;

      return this.apiClient.callApi(
        '/createCloudDBInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCloudDBServerInstance operation.
     * @callback module:api/V2Api~deleteCloudDBServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteCloudDBServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB서버인스턴스삭제
     * @param {module:model/DeleteCloudDBServerInstanceRequest} deleteCloudDBServerInstanceRequest deleteCloudDBServerInstanceRequest
     * @param {module:api/V2Api~deleteCloudDBServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteCloudDBServerInstanceResponse}
     */
    this.deleteCloudDBServerInstance = function(deleteCloudDBServerInstanceRequest, callback) {
      var postBody = deleteCloudDBServerInstanceRequest;

      // verify the required parameter 'deleteCloudDBServerInstanceRequest' is set
      if (deleteCloudDBServerInstanceRequest === undefined || deleteCloudDBServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deleteCloudDBServerInstanceRequest' when calling deleteCloudDBServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteCloudDBServerInstanceResponse;

      return this.apiClient.callApi(
        '/deleteCloudDBServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudDBConfigGroupList operation.
     * @callback module:api/V2Api~getCloudDBConfigGroupListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudDBConfigGroupListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB설정그룹리스트조회
     * @param {module:model/GetCloudDBConfigGroupListRequest} getCloudDBConfigGroupListRequest getCloudDBConfigGroupListRequest
     * @param {module:api/V2Api~getCloudDBConfigGroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudDBConfigGroupListResponse}
     */
    this.getCloudDBConfigGroupList = function(getCloudDBConfigGroupListRequest, callback) {
      var postBody = getCloudDBConfigGroupListRequest;

      // verify the required parameter 'getCloudDBConfigGroupListRequest' is set
      if (getCloudDBConfigGroupListRequest === undefined || getCloudDBConfigGroupListRequest === null) {
        throw new Error("Missing the required parameter 'getCloudDBConfigGroupListRequest' when calling getCloudDBConfigGroupList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetCloudDBConfigGroupListResponse;

      return this.apiClient.callApi(
        '/getCloudDBConfigGroupList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudDBImageProductList operation.
     * @callback module:api/V2Api~getCloudDBImageProductListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudDBImageProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB이미지상품리스트
     * @param {module:model/GetCloudDBImageProductListRequest} getCloudDBImageProductListRequest getCloudDBImageProductListRequest
     * @param {module:api/V2Api~getCloudDBImageProductListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudDBImageProductListResponse}
     */
    this.getCloudDBImageProductList = function(getCloudDBImageProductListRequest, callback) {
      var postBody = getCloudDBImageProductListRequest;

      // verify the required parameter 'getCloudDBImageProductListRequest' is set
      if (getCloudDBImageProductListRequest === undefined || getCloudDBImageProductListRequest === null) {
        throw new Error("Missing the required parameter 'getCloudDBImageProductListRequest' when calling getCloudDBImageProductList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetCloudDBImageProductListResponse;

      return this.apiClient.callApi(
        '/getCloudDBImageProductList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudDBInstanceList operation.
     * @callback module:api/V2Api~getCloudDBInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudDBInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB인스턴스리스트조회
     * @param {module:model/GetCloudDBInstanceListRequest} getCloudDBInstanceListRequest getCloudDBInstanceListRequest
     * @param {module:api/V2Api~getCloudDBInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudDBInstanceListResponse}
     */
    this.getCloudDBInstanceList = function(getCloudDBInstanceListRequest, callback) {
      var postBody = getCloudDBInstanceListRequest;

      // verify the required parameter 'getCloudDBInstanceListRequest' is set
      if (getCloudDBInstanceListRequest === undefined || getCloudDBInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getCloudDBInstanceListRequest' when calling getCloudDBInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetCloudDBInstanceListResponse;

      return this.apiClient.callApi(
        '/getCloudDBInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudDBProductList operation.
     * @callback module:api/V2Api~getCloudDBProductListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudDBProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB상품리스트조회
     * @param {module:model/GetCloudDBProductListRequest} getCloudDBProductListRequest getCloudDBProductListRequest
     * @param {module:api/V2Api~getCloudDBProductListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudDBProductListResponse}
     */
    this.getCloudDBProductList = function(getCloudDBProductListRequest, callback) {
      var postBody = getCloudDBProductListRequest;

      // verify the required parameter 'getCloudDBProductListRequest' is set
      if (getCloudDBProductListRequest === undefined || getCloudDBProductListRequest === null) {
        throw new Error("Missing the required parameter 'getCloudDBProductListRequest' when calling getCloudDBProductList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetCloudDBProductListResponse;

      return this.apiClient.callApi(
        '/getCloudDBProductList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootCloudDBServerInstance operation.
     * @callback module:api/V2Api~rebootCloudDBServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebootCloudDBServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB서버인스턴스재부팅
     * @param {module:model/RebootCloudDBServerInstanceRequest} rebootCloudDBServerInstanceRequest rebootCloudDBServerInstanceRequest
     * @param {module:api/V2Api~rebootCloudDBServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebootCloudDBServerInstanceResponse}
     */
    this.rebootCloudDBServerInstance = function(rebootCloudDBServerInstanceRequest, callback) {
      var postBody = rebootCloudDBServerInstanceRequest;

      // verify the required parameter 'rebootCloudDBServerInstanceRequest' is set
      if (rebootCloudDBServerInstanceRequest === undefined || rebootCloudDBServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'rebootCloudDBServerInstanceRequest' when calling rebootCloudDBServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RebootCloudDBServerInstanceResponse;

      return this.apiClient.callApi(
        '/rebootCloudDBServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
