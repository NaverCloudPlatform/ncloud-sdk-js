/*
* clouddb
* Cloud DB<br/>https://ncloud.apigw.ntruss.com/clouddb/v2
*
* NBP corp.
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateCloudDBInstanceRequest', 'model/CreateCloudDBInstanceResponse', 'model/DeleteCloudDBServerInstanceRequest', 'model/DeleteCloudDBServerInstanceResponse', 'model/DownloadDmsFileRequest', 'model/DownloadDmsFileResponse', 'model/FlushCloudDBInstanceRequest', 'model/FlushCloudDBInstanceResponse', 'model/GetBackupListRequest', 'model/GetBackupListResponse', 'model/GetCloudDBConfigGroupListRequest', 'model/GetCloudDBConfigGroupListResponse', 'model/GetCloudDBImageProductListRequest', 'model/GetCloudDBImageProductListResponse', 'model/GetCloudDBInstanceListRequest', 'model/GetCloudDBInstanceListResponse', 'model/GetCloudDBProductListRequest', 'model/GetCloudDBProductListResponse', 'model/GetDmsOperationRequest', 'model/GetDmsOperationResponse', 'model/GetObjectStorageBackupListRequest', 'model/GetObjectStorageBackupListResponse', 'model/RebootCloudDBServerInstanceRequest', 'model/RebootCloudDBServerInstanceResponse', 'model/RestoreDmsDatabaseRequest', 'model/RestoreDmsDatabaseResponse', 'model/RestoreDmsTransactionLogRequest', 'model/RestoreDmsTransactionLogResponse', 'model/SetObjectStorageInfoRequest', 'model/SetObjectStorageInfoResponse', 'model/UploadDmsFileRequest', 'model/UploadDmsFileResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateCloudDBInstanceRequest'), require('../model/CreateCloudDBInstanceResponse'), require('../model/DeleteCloudDBServerInstanceRequest'), require('../model/DeleteCloudDBServerInstanceResponse'), require('../model/DownloadDmsFileRequest'), require('../model/DownloadDmsFileResponse'), require('../model/FlushCloudDBInstanceRequest'), require('../model/FlushCloudDBInstanceResponse'), require('../model/GetBackupListRequest'), require('../model/GetBackupListResponse'), require('../model/GetCloudDBConfigGroupListRequest'), require('../model/GetCloudDBConfigGroupListResponse'), require('../model/GetCloudDBImageProductListRequest'), require('../model/GetCloudDBImageProductListResponse'), require('../model/GetCloudDBInstanceListRequest'), require('../model/GetCloudDBInstanceListResponse'), require('../model/GetCloudDBProductListRequest'), require('../model/GetCloudDBProductListResponse'), require('../model/GetDmsOperationRequest'), require('../model/GetDmsOperationResponse'), require('../model/GetObjectStorageBackupListRequest'), require('../model/GetObjectStorageBackupListResponse'), require('../model/RebootCloudDBServerInstanceRequest'), require('../model/RebootCloudDBServerInstanceResponse'), require('../model/RestoreDmsDatabaseRequest'), require('../model/RestoreDmsDatabaseResponse'), require('../model/RestoreDmsTransactionLogRequest'), require('../model/RestoreDmsTransactionLogResponse'), require('../model/SetObjectStorageInfoRequest'), require('../model/SetObjectStorageInfoResponse'), require('../model/UploadDmsFileRequest'), require('../model/UploadDmsFileResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Clouddb) {
      root.Clouddb = {};
    }
    root.Clouddb.V2Api = factory(root.Clouddb.ApiClient, root.Clouddb.CreateCloudDBInstanceRequest, root.Clouddb.CreateCloudDBInstanceResponse, root.Clouddb.DeleteCloudDBServerInstanceRequest, root.Clouddb.DeleteCloudDBServerInstanceResponse, root.Clouddb.DownloadDmsFileRequest, root.Clouddb.DownloadDmsFileResponse, root.Clouddb.FlushCloudDBInstanceRequest, root.Clouddb.FlushCloudDBInstanceResponse, root.Clouddb.GetBackupListRequest, root.Clouddb.GetBackupListResponse, root.Clouddb.GetCloudDBConfigGroupListRequest, root.Clouddb.GetCloudDBConfigGroupListResponse, root.Clouddb.GetCloudDBImageProductListRequest, root.Clouddb.GetCloudDBImageProductListResponse, root.Clouddb.GetCloudDBInstanceListRequest, root.Clouddb.GetCloudDBInstanceListResponse, root.Clouddb.GetCloudDBProductListRequest, root.Clouddb.GetCloudDBProductListResponse, root.Clouddb.GetDmsOperationRequest, root.Clouddb.GetDmsOperationResponse, root.Clouddb.GetObjectStorageBackupListRequest, root.Clouddb.GetObjectStorageBackupListResponse, root.Clouddb.RebootCloudDBServerInstanceRequest, root.Clouddb.RebootCloudDBServerInstanceResponse, root.Clouddb.RestoreDmsDatabaseRequest, root.Clouddb.RestoreDmsDatabaseResponse, root.Clouddb.RestoreDmsTransactionLogRequest, root.Clouddb.RestoreDmsTransactionLogResponse, root.Clouddb.SetObjectStorageInfoRequest, root.Clouddb.SetObjectStorageInfoResponse, root.Clouddb.UploadDmsFileRequest, root.Clouddb.UploadDmsFileResponse);
  }
}(this, function(ApiClient, CreateCloudDBInstanceRequest, CreateCloudDBInstanceResponse, DeleteCloudDBServerInstanceRequest, DeleteCloudDBServerInstanceResponse, DownloadDmsFileRequest, DownloadDmsFileResponse, FlushCloudDBInstanceRequest, FlushCloudDBInstanceResponse, GetBackupListRequest, GetBackupListResponse, GetCloudDBConfigGroupListRequest, GetCloudDBConfigGroupListResponse, GetCloudDBImageProductListRequest, GetCloudDBImageProductListResponse, GetCloudDBInstanceListRequest, GetCloudDBInstanceListResponse, GetCloudDBProductListRequest, GetCloudDBProductListResponse, GetDmsOperationRequest, GetDmsOperationResponse, GetObjectStorageBackupListRequest, GetObjectStorageBackupListResponse, RebootCloudDBServerInstanceRequest, RebootCloudDBServerInstanceResponse, RestoreDmsDatabaseRequest, RestoreDmsDatabaseResponse, RestoreDmsTransactionLogRequest, RestoreDmsTransactionLogResponse, SetObjectStorageInfoRequest, SetObjectStorageInfoResponse, UploadDmsFileRequest, UploadDmsFileResponse) {
  'use strict';

  /**
   * V2 service.
   * @module api/V2Api
   * @version 1.4.1
   */

  /**
   * Constructs a new V2Api. 
   * @alias module:api/V2Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCloudDBInstance operation.
     * @callback module:api/V2Api~createCloudDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCloudDBInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB인스턴스생성
     * @param {module:model/CreateCloudDBInstanceRequest} createCloudDBInstanceRequest createCloudDBInstanceRequest
     * @param {module:api/V2Api~createCloudDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCloudDBInstanceResponse}
     */
    this.createCloudDBInstance = function(createCloudDBInstanceRequest, callback) {
      var postBody = createCloudDBInstanceRequest;

      // verify the required parameter 'createCloudDBInstanceRequest' is set
      if (createCloudDBInstanceRequest === undefined || createCloudDBInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createCloudDBInstanceRequest' when calling createCloudDBInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateCloudDBInstanceResponse;

      return this.apiClient.callApi(
        '/createCloudDBInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCloudDBServerInstance operation.
     * @callback module:api/V2Api~deleteCloudDBServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteCloudDBServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB서버인스턴스삭제
     * @param {module:model/DeleteCloudDBServerInstanceRequest} deleteCloudDBServerInstanceRequest deleteCloudDBServerInstanceRequest
     * @param {module:api/V2Api~deleteCloudDBServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteCloudDBServerInstanceResponse}
     */
    this.deleteCloudDBServerInstance = function(deleteCloudDBServerInstanceRequest, callback) {
      var postBody = deleteCloudDBServerInstanceRequest;

      // verify the required parameter 'deleteCloudDBServerInstanceRequest' is set
      if (deleteCloudDBServerInstanceRequest === undefined || deleteCloudDBServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deleteCloudDBServerInstanceRequest' when calling deleteCloudDBServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteCloudDBServerInstanceResponse;

      return this.apiClient.callApi(
        '/deleteCloudDBServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadDmsFile operation.
     * @callback module:api/V2Api~downloadDmsFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadDmsFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DMS파일다운로드
     * @param {module:model/DownloadDmsFileRequest} downloadDmsFileRequest downloadDmsFileRequest
     * @param {module:api/V2Api~downloadDmsFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadDmsFileResponse}
     */
    this.downloadDmsFile = function(downloadDmsFileRequest, callback) {
      var postBody = downloadDmsFileRequest;

      // verify the required parameter 'downloadDmsFileRequest' is set
      if (downloadDmsFileRequest === undefined || downloadDmsFileRequest === null) {
        throw new Error("Missing the required parameter 'downloadDmsFileRequest' when calling downloadDmsFile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DownloadDmsFileResponse;

      return this.apiClient.callApi(
        '/downloadDmsFile', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the flushCloudDBInstance operation.
     * @callback module:api/V2Api~flushCloudDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlushCloudDBInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB Flush
     * @param {module:model/FlushCloudDBInstanceRequest} flushCloudDBInstanceRequest flushCloudDBInstanceRequest
     * @param {module:api/V2Api~flushCloudDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlushCloudDBInstanceResponse}
     */
    this.flushCloudDBInstance = function(flushCloudDBInstanceRequest, callback) {
      var postBody = flushCloudDBInstanceRequest;

      // verify the required parameter 'flushCloudDBInstanceRequest' is set
      if (flushCloudDBInstanceRequest === undefined || flushCloudDBInstanceRequest === null) {
        throw new Error("Missing the required parameter 'flushCloudDBInstanceRequest' when calling flushCloudDBInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = FlushCloudDBInstanceResponse;

      return this.apiClient.callApi(
        '/flushCloudDBInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackupList operation.
     * @callback module:api/V2Api~getBackupListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackupListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 백업리스트조회
     * @param {module:model/GetBackupListRequest} getBackupListRequest getBackupListRequest
     * @param {module:api/V2Api~getBackupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackupListResponse}
     */
    this.getBackupList = function(getBackupListRequest, callback) {
      var postBody = getBackupListRequest;

      // verify the required parameter 'getBackupListRequest' is set
      if (getBackupListRequest === undefined || getBackupListRequest === null) {
        throw new Error("Missing the required parameter 'getBackupListRequest' when calling getBackupList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBackupListResponse;

      return this.apiClient.callApi(
        '/getBackupList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudDBConfigGroupList operation.
     * @callback module:api/V2Api~getCloudDBConfigGroupListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudDBConfigGroupListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB설정그룹리스트조회
     * @param {module:model/GetCloudDBConfigGroupListRequest} getCloudDBConfigGroupListRequest getCloudDBConfigGroupListRequest
     * @param {module:api/V2Api~getCloudDBConfigGroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudDBConfigGroupListResponse}
     */
    this.getCloudDBConfigGroupList = function(getCloudDBConfigGroupListRequest, callback) {
      var postBody = getCloudDBConfigGroupListRequest;

      // verify the required parameter 'getCloudDBConfigGroupListRequest' is set
      if (getCloudDBConfigGroupListRequest === undefined || getCloudDBConfigGroupListRequest === null) {
        throw new Error("Missing the required parameter 'getCloudDBConfigGroupListRequest' when calling getCloudDBConfigGroupList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetCloudDBConfigGroupListResponse;

      return this.apiClient.callApi(
        '/getCloudDBConfigGroupList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudDBImageProductList operation.
     * @callback module:api/V2Api~getCloudDBImageProductListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudDBImageProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB이미지상품리스트
     * @param {module:model/GetCloudDBImageProductListRequest} getCloudDBImageProductListRequest getCloudDBImageProductListRequest
     * @param {module:api/V2Api~getCloudDBImageProductListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudDBImageProductListResponse}
     */
    this.getCloudDBImageProductList = function(getCloudDBImageProductListRequest, callback) {
      var postBody = getCloudDBImageProductListRequest;

      // verify the required parameter 'getCloudDBImageProductListRequest' is set
      if (getCloudDBImageProductListRequest === undefined || getCloudDBImageProductListRequest === null) {
        throw new Error("Missing the required parameter 'getCloudDBImageProductListRequest' when calling getCloudDBImageProductList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetCloudDBImageProductListResponse;

      return this.apiClient.callApi(
        '/getCloudDBImageProductList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudDBInstanceList operation.
     * @callback module:api/V2Api~getCloudDBInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudDBInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB인스턴스리스트조회
     * @param {module:model/GetCloudDBInstanceListRequest} getCloudDBInstanceListRequest getCloudDBInstanceListRequest
     * @param {module:api/V2Api~getCloudDBInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudDBInstanceListResponse}
     */
    this.getCloudDBInstanceList = function(getCloudDBInstanceListRequest, callback) {
      var postBody = getCloudDBInstanceListRequest;

      // verify the required parameter 'getCloudDBInstanceListRequest' is set
      if (getCloudDBInstanceListRequest === undefined || getCloudDBInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getCloudDBInstanceListRequest' when calling getCloudDBInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetCloudDBInstanceListResponse;

      return this.apiClient.callApi(
        '/getCloudDBInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudDBProductList operation.
     * @callback module:api/V2Api~getCloudDBProductListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudDBProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB상품리스트조회
     * @param {module:model/GetCloudDBProductListRequest} getCloudDBProductListRequest getCloudDBProductListRequest
     * @param {module:api/V2Api~getCloudDBProductListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudDBProductListResponse}
     */
    this.getCloudDBProductList = function(getCloudDBProductListRequest, callback) {
      var postBody = getCloudDBProductListRequest;

      // verify the required parameter 'getCloudDBProductListRequest' is set
      if (getCloudDBProductListRequest === undefined || getCloudDBProductListRequest === null) {
        throw new Error("Missing the required parameter 'getCloudDBProductListRequest' when calling getCloudDBProductList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetCloudDBProductListResponse;

      return this.apiClient.callApi(
        '/getCloudDBProductList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDmsOperation operation.
     * @callback module:api/V2Api~getDmsOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDmsOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DMS상태조회
     * @param {module:model/GetDmsOperationRequest} getDmsOperationRequest getDmsOperationRequest
     * @param {module:api/V2Api~getDmsOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDmsOperationResponse}
     */
    this.getDmsOperation = function(getDmsOperationRequest, callback) {
      var postBody = getDmsOperationRequest;

      // verify the required parameter 'getDmsOperationRequest' is set
      if (getDmsOperationRequest === undefined || getDmsOperationRequest === null) {
        throw new Error("Missing the required parameter 'getDmsOperationRequest' when calling getDmsOperation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetDmsOperationResponse;

      return this.apiClient.callApi(
        '/getDmsOperation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectStorageBackupList operation.
     * @callback module:api/V2Api~getObjectStorageBackupListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetObjectStorageBackupListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 오브젝트스토리지백업리스트조회
     * @param {module:model/GetObjectStorageBackupListRequest} getObjectStorageBackupListRequest getObjectStorageBackupListRequest
     * @param {module:api/V2Api~getObjectStorageBackupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetObjectStorageBackupListResponse}
     */
    this.getObjectStorageBackupList = function(getObjectStorageBackupListRequest, callback) {
      var postBody = getObjectStorageBackupListRequest;

      // verify the required parameter 'getObjectStorageBackupListRequest' is set
      if (getObjectStorageBackupListRequest === undefined || getObjectStorageBackupListRequest === null) {
        throw new Error("Missing the required parameter 'getObjectStorageBackupListRequest' when calling getObjectStorageBackupList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetObjectStorageBackupListResponse;

      return this.apiClient.callApi(
        '/getObjectStorageBackupList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootCloudDBServerInstance operation.
     * @callback module:api/V2Api~rebootCloudDBServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebootCloudDBServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CloudDB서버인스턴스재부팅
     * @param {module:model/RebootCloudDBServerInstanceRequest} rebootCloudDBServerInstanceRequest rebootCloudDBServerInstanceRequest
     * @param {module:api/V2Api~rebootCloudDBServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebootCloudDBServerInstanceResponse}
     */
    this.rebootCloudDBServerInstance = function(rebootCloudDBServerInstanceRequest, callback) {
      var postBody = rebootCloudDBServerInstanceRequest;

      // verify the required parameter 'rebootCloudDBServerInstanceRequest' is set
      if (rebootCloudDBServerInstanceRequest === undefined || rebootCloudDBServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'rebootCloudDBServerInstanceRequest' when calling rebootCloudDBServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RebootCloudDBServerInstanceResponse;

      return this.apiClient.callApi(
        '/rebootCloudDBServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreDmsDatabase operation.
     * @callback module:api/V2Api~restoreDmsDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreDmsDatabaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DMS데이터베이스복구
     * @param {module:model/RestoreDmsDatabaseRequest} restoreDmsDatabaseRequest restoreDmsDatabaseRequest
     * @param {module:api/V2Api~restoreDmsDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreDmsDatabaseResponse}
     */
    this.restoreDmsDatabase = function(restoreDmsDatabaseRequest, callback) {
      var postBody = restoreDmsDatabaseRequest;

      // verify the required parameter 'restoreDmsDatabaseRequest' is set
      if (restoreDmsDatabaseRequest === undefined || restoreDmsDatabaseRequest === null) {
        throw new Error("Missing the required parameter 'restoreDmsDatabaseRequest' when calling restoreDmsDatabase");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RestoreDmsDatabaseResponse;

      return this.apiClient.callApi(
        '/restoreDmsDatabase', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreDmsTransactionLog operation.
     * @callback module:api/V2Api~restoreDmsTransactionLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreDmsTransactionLogResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DMS트랜잭션로그복구
     * @param {module:model/RestoreDmsTransactionLogRequest} restoreDmsTransactionLogRequest restoreDmsTransactionLogRequest
     * @param {module:api/V2Api~restoreDmsTransactionLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreDmsTransactionLogResponse}
     */
    this.restoreDmsTransactionLog = function(restoreDmsTransactionLogRequest, callback) {
      var postBody = restoreDmsTransactionLogRequest;

      // verify the required parameter 'restoreDmsTransactionLogRequest' is set
      if (restoreDmsTransactionLogRequest === undefined || restoreDmsTransactionLogRequest === null) {
        throw new Error("Missing the required parameter 'restoreDmsTransactionLogRequest' when calling restoreDmsTransactionLog");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RestoreDmsTransactionLogResponse;

      return this.apiClient.callApi(
        '/restoreDmsTransactionLog', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setObjectStorageInfo operation.
     * @callback module:api/V2Api~setObjectStorageInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetObjectStorageInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 오브젝트스토리지정보설정
     * @param {module:model/SetObjectStorageInfoRequest} setObjectStorageInfoRequest setObjectStorageInfoRequest
     * @param {module:api/V2Api~setObjectStorageInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetObjectStorageInfoResponse}
     */
    this.setObjectStorageInfo = function(setObjectStorageInfoRequest, callback) {
      var postBody = setObjectStorageInfoRequest;

      // verify the required parameter 'setObjectStorageInfoRequest' is set
      if (setObjectStorageInfoRequest === undefined || setObjectStorageInfoRequest === null) {
        throw new Error("Missing the required parameter 'setObjectStorageInfoRequest' when calling setObjectStorageInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SetObjectStorageInfoResponse;

      return this.apiClient.callApi(
        '/setObjectStorageInfo', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadDmsFile operation.
     * @callback module:api/V2Api~uploadDmsFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadDmsFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DMS파일업로드
     * @param {module:model/UploadDmsFileRequest} uploadDmsFileRequest uploadDmsFileRequest
     * @param {module:api/V2Api~uploadDmsFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadDmsFileResponse}
     */
    this.uploadDmsFile = function(uploadDmsFileRequest, callback) {
      var postBody = uploadDmsFileRequest;

      // verify the required parameter 'uploadDmsFileRequest' is set
      if (uploadDmsFileRequest === undefined || uploadDmsFileRequest === null) {
        throw new Error("Missing the required parameter 'uploadDmsFileRequest' when calling uploadDmsFile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = UploadDmsFileResponse;

      return this.apiClient.callApi(
        '/uploadDmsFile', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
