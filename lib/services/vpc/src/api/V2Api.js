/*
* vpc
* VPC Network 관련 API<br/>https://ncloud.apigw.ntruss.com/vpc/v2
*
* NBP corp.
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AcceptOrRejectVpcPeeringRequest', 'model/AcceptOrRejectVpcPeeringResponse', 'model/AddNetworkAclInboundRuleRequest', 'model/AddNetworkAclInboundRuleResponse', 'model/AddNetworkAclOutboundRuleRequest', 'model/AddNetworkAclOutboundRuleResponse', 'model/AddRouteRequest', 'model/AddRouteResponse', 'model/AddRouteTableSubnetRequest', 'model/AddRouteTableSubnetResponse', 'model/CreateNatGatewayInstanceRequest', 'model/CreateNatGatewayInstanceResponse', 'model/CreateNetworkAclRequest', 'model/CreateNetworkAclResponse', 'model/CreateRouteTableRequest', 'model/CreateRouteTableResponse', 'model/CreateSubnetRequest', 'model/CreateSubnetResponse', 'model/CreateVpcPeeringInstanceRequest', 'model/CreateVpcPeeringInstanceResponse', 'model/CreateVpcRequest', 'model/CreateVpcResponse', 'model/DeleteNatGatewayInstanceRequest', 'model/DeleteNatGatewayInstanceResponse', 'model/DeleteNetworkAclRequest', 'model/DeleteNetworkAclResponse', 'model/DeleteRouteTableRequest', 'model/DeleteRouteTableResponse', 'model/DeleteSubnetRequest', 'model/DeleteSubnetResponse', 'model/DeleteVpcPeeringInstanceRequest', 'model/DeleteVpcPeeringInstanceResponse', 'model/DeleteVpcRequest', 'model/DeleteVpcResponse', 'model/GetNatGatewayInstanceDetailRequest', 'model/GetNatGatewayInstanceDetailResponse', 'model/GetNatGatewayInstanceListRequest', 'model/GetNatGatewayInstanceListResponse', 'model/GetNetworkAclDetailRequest', 'model/GetNetworkAclDetailResponse', 'model/GetNetworkAclListRequest', 'model/GetNetworkAclListResponse', 'model/GetNetworkAclRuleListRequest', 'model/GetNetworkAclRuleListResponse', 'model/GetRouteListRequest', 'model/GetRouteListResponse', 'model/GetRouteTableDetailRequest', 'model/GetRouteTableDetailResponse', 'model/GetRouteTableListRequest', 'model/GetRouteTableListResponse', 'model/GetRouteTableSubnetListRequest', 'model/GetRouteTableSubnetListResponse', 'model/GetSubnetDetailRequest', 'model/GetSubnetDetailResponse', 'model/GetSubnetListRequest', 'model/GetSubnetListResponse', 'model/GetVpcDetailRequest', 'model/GetVpcDetailResponse', 'model/GetVpcListRequest', 'model/GetVpcListResponse', 'model/GetVpcPeeringInstanceDetailRequest', 'model/GetVpcPeeringInstanceDetailResponse', 'model/GetVpcPeeringInstanceListRequest', 'model/GetVpcPeeringInstanceListResponse', 'model/RemoveNetworkAclInboundRuleRequest', 'model/RemoveNetworkAclInboundRuleResponse', 'model/RemoveNetworkAclOutboundRuleRequest', 'model/RemoveNetworkAclOutboundRuleResponse', 'model/RemoveRouteRequest', 'model/RemoveRouteResponse', 'model/RemoveRouteTableSubnetRequest', 'model/RemoveRouteTableSubnetResponse', 'model/SetNatGatewayDescriptionRequest', 'model/SetNatGatewayDescriptionResponse', 'model/SetNetworkAclDescriptionRequest', 'model/SetNetworkAclDescriptionResponse', 'model/SetRouteTableDescriptionRequest', 'model/SetRouteTableDescriptionResponse', 'model/SetSubnetNetworkAclRequest', 'model/SetSubnetNetworkAclResponse', 'model/SetVpcPeeringDescriptionRequest', 'model/SetVpcPeeringDescriptionResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AcceptOrRejectVpcPeeringRequest'), require('../model/AcceptOrRejectVpcPeeringResponse'), require('../model/AddNetworkAclInboundRuleRequest'), require('../model/AddNetworkAclInboundRuleResponse'), require('../model/AddNetworkAclOutboundRuleRequest'), require('../model/AddNetworkAclOutboundRuleResponse'), require('../model/AddRouteRequest'), require('../model/AddRouteResponse'), require('../model/AddRouteTableSubnetRequest'), require('../model/AddRouteTableSubnetResponse'), require('../model/CreateNatGatewayInstanceRequest'), require('../model/CreateNatGatewayInstanceResponse'), require('../model/CreateNetworkAclRequest'), require('../model/CreateNetworkAclResponse'), require('../model/CreateRouteTableRequest'), require('../model/CreateRouteTableResponse'), require('../model/CreateSubnetRequest'), require('../model/CreateSubnetResponse'), require('../model/CreateVpcPeeringInstanceRequest'), require('../model/CreateVpcPeeringInstanceResponse'), require('../model/CreateVpcRequest'), require('../model/CreateVpcResponse'), require('../model/DeleteNatGatewayInstanceRequest'), require('../model/DeleteNatGatewayInstanceResponse'), require('../model/DeleteNetworkAclRequest'), require('../model/DeleteNetworkAclResponse'), require('../model/DeleteRouteTableRequest'), require('../model/DeleteRouteTableResponse'), require('../model/DeleteSubnetRequest'), require('../model/DeleteSubnetResponse'), require('../model/DeleteVpcPeeringInstanceRequest'), require('../model/DeleteVpcPeeringInstanceResponse'), require('../model/DeleteVpcRequest'), require('../model/DeleteVpcResponse'), require('../model/GetNatGatewayInstanceDetailRequest'), require('../model/GetNatGatewayInstanceDetailResponse'), require('../model/GetNatGatewayInstanceListRequest'), require('../model/GetNatGatewayInstanceListResponse'), require('../model/GetNetworkAclDetailRequest'), require('../model/GetNetworkAclDetailResponse'), require('../model/GetNetworkAclListRequest'), require('../model/GetNetworkAclListResponse'), require('../model/GetNetworkAclRuleListRequest'), require('../model/GetNetworkAclRuleListResponse'), require('../model/GetRouteListRequest'), require('../model/GetRouteListResponse'), require('../model/GetRouteTableDetailRequest'), require('../model/GetRouteTableDetailResponse'), require('../model/GetRouteTableListRequest'), require('../model/GetRouteTableListResponse'), require('../model/GetRouteTableSubnetListRequest'), require('../model/GetRouteTableSubnetListResponse'), require('../model/GetSubnetDetailRequest'), require('../model/GetSubnetDetailResponse'), require('../model/GetSubnetListRequest'), require('../model/GetSubnetListResponse'), require('../model/GetVpcDetailRequest'), require('../model/GetVpcDetailResponse'), require('../model/GetVpcListRequest'), require('../model/GetVpcListResponse'), require('../model/GetVpcPeeringInstanceDetailRequest'), require('../model/GetVpcPeeringInstanceDetailResponse'), require('../model/GetVpcPeeringInstanceListRequest'), require('../model/GetVpcPeeringInstanceListResponse'), require('../model/RemoveNetworkAclInboundRuleRequest'), require('../model/RemoveNetworkAclInboundRuleResponse'), require('../model/RemoveNetworkAclOutboundRuleRequest'), require('../model/RemoveNetworkAclOutboundRuleResponse'), require('../model/RemoveRouteRequest'), require('../model/RemoveRouteResponse'), require('../model/RemoveRouteTableSubnetRequest'), require('../model/RemoveRouteTableSubnetResponse'), require('../model/SetNatGatewayDescriptionRequest'), require('../model/SetNatGatewayDescriptionResponse'), require('../model/SetNetworkAclDescriptionRequest'), require('../model/SetNetworkAclDescriptionResponse'), require('../model/SetRouteTableDescriptionRequest'), require('../model/SetRouteTableDescriptionResponse'), require('../model/SetSubnetNetworkAclRequest'), require('../model/SetSubnetNetworkAclResponse'), require('../model/SetVpcPeeringDescriptionRequest'), require('../model/SetVpcPeeringDescriptionResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Vpc) {
      root.Vpc = {};
    }
    root.Vpc.V2Api = factory(root.Vpc.ApiClient, root.Vpc.AcceptOrRejectVpcPeeringRequest, root.Vpc.AcceptOrRejectVpcPeeringResponse, root.Vpc.AddNetworkAclInboundRuleRequest, root.Vpc.AddNetworkAclInboundRuleResponse, root.Vpc.AddNetworkAclOutboundRuleRequest, root.Vpc.AddNetworkAclOutboundRuleResponse, root.Vpc.AddRouteRequest, root.Vpc.AddRouteResponse, root.Vpc.AddRouteTableSubnetRequest, root.Vpc.AddRouteTableSubnetResponse, root.Vpc.CreateNatGatewayInstanceRequest, root.Vpc.CreateNatGatewayInstanceResponse, root.Vpc.CreateNetworkAclRequest, root.Vpc.CreateNetworkAclResponse, root.Vpc.CreateRouteTableRequest, root.Vpc.CreateRouteTableResponse, root.Vpc.CreateSubnetRequest, root.Vpc.CreateSubnetResponse, root.Vpc.CreateVpcPeeringInstanceRequest, root.Vpc.CreateVpcPeeringInstanceResponse, root.Vpc.CreateVpcRequest, root.Vpc.CreateVpcResponse, root.Vpc.DeleteNatGatewayInstanceRequest, root.Vpc.DeleteNatGatewayInstanceResponse, root.Vpc.DeleteNetworkAclRequest, root.Vpc.DeleteNetworkAclResponse, root.Vpc.DeleteRouteTableRequest, root.Vpc.DeleteRouteTableResponse, root.Vpc.DeleteSubnetRequest, root.Vpc.DeleteSubnetResponse, root.Vpc.DeleteVpcPeeringInstanceRequest, root.Vpc.DeleteVpcPeeringInstanceResponse, root.Vpc.DeleteVpcRequest, root.Vpc.DeleteVpcResponse, root.Vpc.GetNatGatewayInstanceDetailRequest, root.Vpc.GetNatGatewayInstanceDetailResponse, root.Vpc.GetNatGatewayInstanceListRequest, root.Vpc.GetNatGatewayInstanceListResponse, root.Vpc.GetNetworkAclDetailRequest, root.Vpc.GetNetworkAclDetailResponse, root.Vpc.GetNetworkAclListRequest, root.Vpc.GetNetworkAclListResponse, root.Vpc.GetNetworkAclRuleListRequest, root.Vpc.GetNetworkAclRuleListResponse, root.Vpc.GetRouteListRequest, root.Vpc.GetRouteListResponse, root.Vpc.GetRouteTableDetailRequest, root.Vpc.GetRouteTableDetailResponse, root.Vpc.GetRouteTableListRequest, root.Vpc.GetRouteTableListResponse, root.Vpc.GetRouteTableSubnetListRequest, root.Vpc.GetRouteTableSubnetListResponse, root.Vpc.GetSubnetDetailRequest, root.Vpc.GetSubnetDetailResponse, root.Vpc.GetSubnetListRequest, root.Vpc.GetSubnetListResponse, root.Vpc.GetVpcDetailRequest, root.Vpc.GetVpcDetailResponse, root.Vpc.GetVpcListRequest, root.Vpc.GetVpcListResponse, root.Vpc.GetVpcPeeringInstanceDetailRequest, root.Vpc.GetVpcPeeringInstanceDetailResponse, root.Vpc.GetVpcPeeringInstanceListRequest, root.Vpc.GetVpcPeeringInstanceListResponse, root.Vpc.RemoveNetworkAclInboundRuleRequest, root.Vpc.RemoveNetworkAclInboundRuleResponse, root.Vpc.RemoveNetworkAclOutboundRuleRequest, root.Vpc.RemoveNetworkAclOutboundRuleResponse, root.Vpc.RemoveRouteRequest, root.Vpc.RemoveRouteResponse, root.Vpc.RemoveRouteTableSubnetRequest, root.Vpc.RemoveRouteTableSubnetResponse, root.Vpc.SetNatGatewayDescriptionRequest, root.Vpc.SetNatGatewayDescriptionResponse, root.Vpc.SetNetworkAclDescriptionRequest, root.Vpc.SetNetworkAclDescriptionResponse, root.Vpc.SetRouteTableDescriptionRequest, root.Vpc.SetRouteTableDescriptionResponse, root.Vpc.SetSubnetNetworkAclRequest, root.Vpc.SetSubnetNetworkAclResponse, root.Vpc.SetVpcPeeringDescriptionRequest, root.Vpc.SetVpcPeeringDescriptionResponse);
  }
}(this, function(ApiClient, AcceptOrRejectVpcPeeringRequest, AcceptOrRejectVpcPeeringResponse, AddNetworkAclInboundRuleRequest, AddNetworkAclInboundRuleResponse, AddNetworkAclOutboundRuleRequest, AddNetworkAclOutboundRuleResponse, AddRouteRequest, AddRouteResponse, AddRouteTableSubnetRequest, AddRouteTableSubnetResponse, CreateNatGatewayInstanceRequest, CreateNatGatewayInstanceResponse, CreateNetworkAclRequest, CreateNetworkAclResponse, CreateRouteTableRequest, CreateRouteTableResponse, CreateSubnetRequest, CreateSubnetResponse, CreateVpcPeeringInstanceRequest, CreateVpcPeeringInstanceResponse, CreateVpcRequest, CreateVpcResponse, DeleteNatGatewayInstanceRequest, DeleteNatGatewayInstanceResponse, DeleteNetworkAclRequest, DeleteNetworkAclResponse, DeleteRouteTableRequest, DeleteRouteTableResponse, DeleteSubnetRequest, DeleteSubnetResponse, DeleteVpcPeeringInstanceRequest, DeleteVpcPeeringInstanceResponse, DeleteVpcRequest, DeleteVpcResponse, GetNatGatewayInstanceDetailRequest, GetNatGatewayInstanceDetailResponse, GetNatGatewayInstanceListRequest, GetNatGatewayInstanceListResponse, GetNetworkAclDetailRequest, GetNetworkAclDetailResponse, GetNetworkAclListRequest, GetNetworkAclListResponse, GetNetworkAclRuleListRequest, GetNetworkAclRuleListResponse, GetRouteListRequest, GetRouteListResponse, GetRouteTableDetailRequest, GetRouteTableDetailResponse, GetRouteTableListRequest, GetRouteTableListResponse, GetRouteTableSubnetListRequest, GetRouteTableSubnetListResponse, GetSubnetDetailRequest, GetSubnetDetailResponse, GetSubnetListRequest, GetSubnetListResponse, GetVpcDetailRequest, GetVpcDetailResponse, GetVpcListRequest, GetVpcListResponse, GetVpcPeeringInstanceDetailRequest, GetVpcPeeringInstanceDetailResponse, GetVpcPeeringInstanceListRequest, GetVpcPeeringInstanceListResponse, RemoveNetworkAclInboundRuleRequest, RemoveNetworkAclInboundRuleResponse, RemoveNetworkAclOutboundRuleRequest, RemoveNetworkAclOutboundRuleResponse, RemoveRouteRequest, RemoveRouteResponse, RemoveRouteTableSubnetRequest, RemoveRouteTableSubnetResponse, SetNatGatewayDescriptionRequest, SetNatGatewayDescriptionResponse, SetNetworkAclDescriptionRequest, SetNetworkAclDescriptionResponse, SetRouteTableDescriptionRequest, SetRouteTableDescriptionResponse, SetSubnetNetworkAclRequest, SetSubnetNetworkAclResponse, SetVpcPeeringDescriptionRequest, SetVpcPeeringDescriptionResponse) {
  'use strict';

  /**
   * V2 service.
   * @module api/V2Api
   * @version 1.0.1
   */

  /**
   * Constructs a new V2Api. 
   * @alias module:api/V2Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the acceptOrRejectVpcPeering operation.
     * @callback module:api/V2Api~acceptOrRejectVpcPeeringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptOrRejectVpcPeeringResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VPCPeering요청수락거절
     * @param {module:model/AcceptOrRejectVpcPeeringRequest} acceptOrRejectVpcPeeringRequest acceptOrRejectVpcPeeringRequest
     * @param {module:api/V2Api~acceptOrRejectVpcPeeringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptOrRejectVpcPeeringResponse}
     */
    this.acceptOrRejectVpcPeering = function(acceptOrRejectVpcPeeringRequest, callback) {
      var postBody = acceptOrRejectVpcPeeringRequest;

      // verify the required parameter 'acceptOrRejectVpcPeeringRequest' is set
      if (acceptOrRejectVpcPeeringRequest === undefined || acceptOrRejectVpcPeeringRequest === null) {
        throw new Error("Missing the required parameter 'acceptOrRejectVpcPeeringRequest' when calling acceptOrRejectVpcPeering");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AcceptOrRejectVpcPeeringResponse;

      return this.apiClient.callApi(
        '/acceptOrRejectVpcPeering', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNetworkAclInboundRule operation.
     * @callback module:api/V2Api~addNetworkAclInboundRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddNetworkAclInboundRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크ACLInboundRule추가
     * @param {module:model/AddNetworkAclInboundRuleRequest} addNetworkAclInboundRuleRequest addNetworkAclInboundRuleRequest
     * @param {module:api/V2Api~addNetworkAclInboundRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddNetworkAclInboundRuleResponse}
     */
    this.addNetworkAclInboundRule = function(addNetworkAclInboundRuleRequest, callback) {
      var postBody = addNetworkAclInboundRuleRequest;

      // verify the required parameter 'addNetworkAclInboundRuleRequest' is set
      if (addNetworkAclInboundRuleRequest === undefined || addNetworkAclInboundRuleRequest === null) {
        throw new Error("Missing the required parameter 'addNetworkAclInboundRuleRequest' when calling addNetworkAclInboundRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddNetworkAclInboundRuleResponse;

      return this.apiClient.callApi(
        '/addNetworkAclInboundRule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNetworkAclOutboundRule operation.
     * @callback module:api/V2Api~addNetworkAclOutboundRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddNetworkAclOutboundRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크ACLOutboundRule추가
     * @param {module:model/AddNetworkAclOutboundRuleRequest} addNetworkAclOutboundRuleRequest addNetworkAclOutboundRuleRequest
     * @param {module:api/V2Api~addNetworkAclOutboundRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddNetworkAclOutboundRuleResponse}
     */
    this.addNetworkAclOutboundRule = function(addNetworkAclOutboundRuleRequest, callback) {
      var postBody = addNetworkAclOutboundRuleRequest;

      // verify the required parameter 'addNetworkAclOutboundRuleRequest' is set
      if (addNetworkAclOutboundRuleRequest === undefined || addNetworkAclOutboundRuleRequest === null) {
        throw new Error("Missing the required parameter 'addNetworkAclOutboundRuleRequest' when calling addNetworkAclOutboundRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddNetworkAclOutboundRuleResponse;

      return this.apiClient.callApi(
        '/addNetworkAclOutboundRule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addRoute operation.
     * @callback module:api/V2Api~addRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddRouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트추가
     * @param {module:model/AddRouteRequest} addRouteRequest addRouteRequest
     * @param {module:api/V2Api~addRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddRouteResponse}
     */
    this.addRoute = function(addRouteRequest, callback) {
      var postBody = addRouteRequest;

      // verify the required parameter 'addRouteRequest' is set
      if (addRouteRequest === undefined || addRouteRequest === null) {
        throw new Error("Missing the required parameter 'addRouteRequest' when calling addRoute");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddRouteResponse;

      return this.apiClient.callApi(
        '/addRoute', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addRouteTableSubnet operation.
     * @callback module:api/V2Api~addRouteTableSubnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddRouteTableSubnetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트테이블의연관서브넷추가
     * @param {module:model/AddRouteTableSubnetRequest} addRouteTableSubnetRequest addRouteTableSubnetRequest
     * @param {module:api/V2Api~addRouteTableSubnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddRouteTableSubnetResponse}
     */
    this.addRouteTableSubnet = function(addRouteTableSubnetRequest, callback) {
      var postBody = addRouteTableSubnetRequest;

      // verify the required parameter 'addRouteTableSubnetRequest' is set
      if (addRouteTableSubnetRequest === undefined || addRouteTableSubnetRequest === null) {
        throw new Error("Missing the required parameter 'addRouteTableSubnetRequest' when calling addRouteTableSubnet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddRouteTableSubnetResponse;

      return this.apiClient.callApi(
        '/addRouteTableSubnet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNatGatewayInstance operation.
     * @callback module:api/V2Api~createNatGatewayInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNatGatewayInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NATGateway인스턴스생성
     * @param {module:model/CreateNatGatewayInstanceRequest} createNatGatewayInstanceRequest createNatGatewayInstanceRequest
     * @param {module:api/V2Api~createNatGatewayInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNatGatewayInstanceResponse}
     */
    this.createNatGatewayInstance = function(createNatGatewayInstanceRequest, callback) {
      var postBody = createNatGatewayInstanceRequest;

      // verify the required parameter 'createNatGatewayInstanceRequest' is set
      if (createNatGatewayInstanceRequest === undefined || createNatGatewayInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createNatGatewayInstanceRequest' when calling createNatGatewayInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateNatGatewayInstanceResponse;

      return this.apiClient.callApi(
        '/createNatGatewayInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkAcl operation.
     * @callback module:api/V2Api~createNetworkAclCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkAclResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크ACL생성
     * @param {module:model/CreateNetworkAclRequest} createNetworkAclRequest createNetworkAclRequest
     * @param {module:api/V2Api~createNetworkAclCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkAclResponse}
     */
    this.createNetworkAcl = function(createNetworkAclRequest, callback) {
      var postBody = createNetworkAclRequest;

      // verify the required parameter 'createNetworkAclRequest' is set
      if (createNetworkAclRequest === undefined || createNetworkAclRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkAclRequest' when calling createNetworkAcl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateNetworkAclResponse;

      return this.apiClient.callApi(
        '/createNetworkAcl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRouteTable operation.
     * @callback module:api/V2Api~createRouteTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRouteTableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트테이블생성
     * @param {module:model/CreateRouteTableRequest} createRouteTableRequest createRouteTableRequest
     * @param {module:api/V2Api~createRouteTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRouteTableResponse}
     */
    this.createRouteTable = function(createRouteTableRequest, callback) {
      var postBody = createRouteTableRequest;

      // verify the required parameter 'createRouteTableRequest' is set
      if (createRouteTableRequest === undefined || createRouteTableRequest === null) {
        throw new Error("Missing the required parameter 'createRouteTableRequest' when calling createRouteTable");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateRouteTableResponse;

      return this.apiClient.callApi(
        '/createRouteTable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSubnet operation.
     * @callback module:api/V2Api~createSubnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSubnetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서브넷생성
     * @param {module:model/CreateSubnetRequest} createSubnetRequest createSubnetRequest
     * @param {module:api/V2Api~createSubnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSubnetResponse}
     */
    this.createSubnet = function(createSubnetRequest, callback) {
      var postBody = createSubnetRequest;

      // verify the required parameter 'createSubnetRequest' is set
      if (createSubnetRequest === undefined || createSubnetRequest === null) {
        throw new Error("Missing the required parameter 'createSubnetRequest' when calling createSubnet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateSubnetResponse;

      return this.apiClient.callApi(
        '/createSubnet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVpc operation.
     * @callback module:api/V2Api~createVpcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVpcResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VPC생성
     * @param {module:model/CreateVpcRequest} createVpcRequest createVpcRequest
     * @param {module:api/V2Api~createVpcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVpcResponse}
     */
    this.createVpc = function(createVpcRequest, callback) {
      var postBody = createVpcRequest;

      // verify the required parameter 'createVpcRequest' is set
      if (createVpcRequest === undefined || createVpcRequest === null) {
        throw new Error("Missing the required parameter 'createVpcRequest' when calling createVpc");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateVpcResponse;

      return this.apiClient.callApi(
        '/createVpc', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVpcPeeringInstance operation.
     * @callback module:api/V2Api~createVpcPeeringInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVpcPeeringInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VPCPeering인스턴스생성
     * @param {module:model/CreateVpcPeeringInstanceRequest} createVpcPeeringInstanceRequest createVpcPeeringInstanceRequest
     * @param {module:api/V2Api~createVpcPeeringInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVpcPeeringInstanceResponse}
     */
    this.createVpcPeeringInstance = function(createVpcPeeringInstanceRequest, callback) {
      var postBody = createVpcPeeringInstanceRequest;

      // verify the required parameter 'createVpcPeeringInstanceRequest' is set
      if (createVpcPeeringInstanceRequest === undefined || createVpcPeeringInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createVpcPeeringInstanceRequest' when calling createVpcPeeringInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateVpcPeeringInstanceResponse;

      return this.apiClient.callApi(
        '/createVpcPeeringInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNatGatewayInstance operation.
     * @callback module:api/V2Api~deleteNatGatewayInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteNatGatewayInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NATGateway인스턴스삭제
     * @param {module:model/DeleteNatGatewayInstanceRequest} deleteNatGatewayInstanceRequest deleteNatGatewayInstanceRequest
     * @param {module:api/V2Api~deleteNatGatewayInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteNatGatewayInstanceResponse}
     */
    this.deleteNatGatewayInstance = function(deleteNatGatewayInstanceRequest, callback) {
      var postBody = deleteNatGatewayInstanceRequest;

      // verify the required parameter 'deleteNatGatewayInstanceRequest' is set
      if (deleteNatGatewayInstanceRequest === undefined || deleteNatGatewayInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deleteNatGatewayInstanceRequest' when calling deleteNatGatewayInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteNatGatewayInstanceResponse;

      return this.apiClient.callApi(
        '/deleteNatGatewayInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkAcl operation.
     * @callback module:api/V2Api~deleteNetworkAclCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteNetworkAclResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크ACL삭제
     * @param {module:model/DeleteNetworkAclRequest} deleteNetworkAclRequest deleteNetworkAclRequest
     * @param {module:api/V2Api~deleteNetworkAclCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteNetworkAclResponse}
     */
    this.deleteNetworkAcl = function(deleteNetworkAclRequest, callback) {
      var postBody = deleteNetworkAclRequest;

      // verify the required parameter 'deleteNetworkAclRequest' is set
      if (deleteNetworkAclRequest === undefined || deleteNetworkAclRequest === null) {
        throw new Error("Missing the required parameter 'deleteNetworkAclRequest' when calling deleteNetworkAcl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteNetworkAclResponse;

      return this.apiClient.callApi(
        '/deleteNetworkAcl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRouteTable operation.
     * @callback module:api/V2Api~deleteRouteTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRouteTableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트테이블삭제
     * @param {module:model/DeleteRouteTableRequest} deleteRouteTableRequest deleteRouteTableRequest
     * @param {module:api/V2Api~deleteRouteTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRouteTableResponse}
     */
    this.deleteRouteTable = function(deleteRouteTableRequest, callback) {
      var postBody = deleteRouteTableRequest;

      // verify the required parameter 'deleteRouteTableRequest' is set
      if (deleteRouteTableRequest === undefined || deleteRouteTableRequest === null) {
        throw new Error("Missing the required parameter 'deleteRouteTableRequest' when calling deleteRouteTable");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteRouteTableResponse;

      return this.apiClient.callApi(
        '/deleteRouteTable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubnet operation.
     * @callback module:api/V2Api~deleteSubnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSubnetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서브넷삭제
     * @param {module:model/DeleteSubnetRequest} deleteSubnetRequest deleteSubnetRequest
     * @param {module:api/V2Api~deleteSubnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSubnetResponse}
     */
    this.deleteSubnet = function(deleteSubnetRequest, callback) {
      var postBody = deleteSubnetRequest;

      // verify the required parameter 'deleteSubnetRequest' is set
      if (deleteSubnetRequest === undefined || deleteSubnetRequest === null) {
        throw new Error("Missing the required parameter 'deleteSubnetRequest' when calling deleteSubnet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteSubnetResponse;

      return this.apiClient.callApi(
        '/deleteSubnet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVpc operation.
     * @callback module:api/V2Api~deleteVpcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVpcResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VPC삭제
     * @param {module:model/DeleteVpcRequest} deleteVpcRequest deleteVpcRequest
     * @param {module:api/V2Api~deleteVpcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVpcResponse}
     */
    this.deleteVpc = function(deleteVpcRequest, callback) {
      var postBody = deleteVpcRequest;

      // verify the required parameter 'deleteVpcRequest' is set
      if (deleteVpcRequest === undefined || deleteVpcRequest === null) {
        throw new Error("Missing the required parameter 'deleteVpcRequest' when calling deleteVpc");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteVpcResponse;

      return this.apiClient.callApi(
        '/deleteVpc', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVpcPeeringInstance operation.
     * @callback module:api/V2Api~deleteVpcPeeringInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVpcPeeringInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VPCPeering인스턴스삭제
     * @param {module:model/DeleteVpcPeeringInstanceRequest} deleteVpcPeeringInstanceRequest deleteVpcPeeringInstanceRequest
     * @param {module:api/V2Api~deleteVpcPeeringInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVpcPeeringInstanceResponse}
     */
    this.deleteVpcPeeringInstance = function(deleteVpcPeeringInstanceRequest, callback) {
      var postBody = deleteVpcPeeringInstanceRequest;

      // verify the required parameter 'deleteVpcPeeringInstanceRequest' is set
      if (deleteVpcPeeringInstanceRequest === undefined || deleteVpcPeeringInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deleteVpcPeeringInstanceRequest' when calling deleteVpcPeeringInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteVpcPeeringInstanceResponse;

      return this.apiClient.callApi(
        '/deleteVpcPeeringInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNatGatewayInstanceDetail operation.
     * @callback module:api/V2Api~getNatGatewayInstanceDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNatGatewayInstanceDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NATGateway인스턴스상세조회
     * @param {module:model/GetNatGatewayInstanceDetailRequest} getNatGatewayInstanceDetailRequest getNatGatewayInstanceDetailRequest
     * @param {module:api/V2Api~getNatGatewayInstanceDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNatGatewayInstanceDetailResponse}
     */
    this.getNatGatewayInstanceDetail = function(getNatGatewayInstanceDetailRequest, callback) {
      var postBody = getNatGatewayInstanceDetailRequest;

      // verify the required parameter 'getNatGatewayInstanceDetailRequest' is set
      if (getNatGatewayInstanceDetailRequest === undefined || getNatGatewayInstanceDetailRequest === null) {
        throw new Error("Missing the required parameter 'getNatGatewayInstanceDetailRequest' when calling getNatGatewayInstanceDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetNatGatewayInstanceDetailResponse;

      return this.apiClient.callApi(
        '/getNatGatewayInstanceDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNatGatewayInstanceList operation.
     * @callback module:api/V2Api~getNatGatewayInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNatGatewayInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NATGateway인스턴스리스트조회
     * @param {module:model/GetNatGatewayInstanceListRequest} getNatGatewayInstanceListRequest getNatGatewayInstanceListRequest
     * @param {module:api/V2Api~getNatGatewayInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNatGatewayInstanceListResponse}
     */
    this.getNatGatewayInstanceList = function(getNatGatewayInstanceListRequest, callback) {
      var postBody = getNatGatewayInstanceListRequest;

      // verify the required parameter 'getNatGatewayInstanceListRequest' is set
      if (getNatGatewayInstanceListRequest === undefined || getNatGatewayInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getNatGatewayInstanceListRequest' when calling getNatGatewayInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetNatGatewayInstanceListResponse;

      return this.apiClient.callApi(
        '/getNatGatewayInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAclDetail operation.
     * @callback module:api/V2Api~getNetworkAclDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAclDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크ACL상세조회
     * @param {module:model/GetNetworkAclDetailRequest} getNetworkAclDetailRequest getNetworkAclDetailRequest
     * @param {module:api/V2Api~getNetworkAclDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAclDetailResponse}
     */
    this.getNetworkAclDetail = function(getNetworkAclDetailRequest, callback) {
      var postBody = getNetworkAclDetailRequest;

      // verify the required parameter 'getNetworkAclDetailRequest' is set
      if (getNetworkAclDetailRequest === undefined || getNetworkAclDetailRequest === null) {
        throw new Error("Missing the required parameter 'getNetworkAclDetailRequest' when calling getNetworkAclDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetNetworkAclDetailResponse;

      return this.apiClient.callApi(
        '/getNetworkAclDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAclList operation.
     * @callback module:api/V2Api~getNetworkAclListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAclListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크ACL리스트조회
     * @param {module:model/GetNetworkAclListRequest} getNetworkAclListRequest getNetworkAclListRequest
     * @param {module:api/V2Api~getNetworkAclListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAclListResponse}
     */
    this.getNetworkAclList = function(getNetworkAclListRequest, callback) {
      var postBody = getNetworkAclListRequest;

      // verify the required parameter 'getNetworkAclListRequest' is set
      if (getNetworkAclListRequest === undefined || getNetworkAclListRequest === null) {
        throw new Error("Missing the required parameter 'getNetworkAclListRequest' when calling getNetworkAclList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetNetworkAclListResponse;

      return this.apiClient.callApi(
        '/getNetworkAclList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAclRuleList operation.
     * @callback module:api/V2Api~getNetworkAclRuleListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAclRuleListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크ACLRule리스트조회
     * @param {module:model/GetNetworkAclRuleListRequest} getNetworkAclRuleListRequest getNetworkAclRuleListRequest
     * @param {module:api/V2Api~getNetworkAclRuleListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAclRuleListResponse}
     */
    this.getNetworkAclRuleList = function(getNetworkAclRuleListRequest, callback) {
      var postBody = getNetworkAclRuleListRequest;

      // verify the required parameter 'getNetworkAclRuleListRequest' is set
      if (getNetworkAclRuleListRequest === undefined || getNetworkAclRuleListRequest === null) {
        throw new Error("Missing the required parameter 'getNetworkAclRuleListRequest' when calling getNetworkAclRuleList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetNetworkAclRuleListResponse;

      return this.apiClient.callApi(
        '/getNetworkAclRuleList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRouteList operation.
     * @callback module:api/V2Api~getRouteListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRouteListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트리스트조회
     * @param {module:model/GetRouteListRequest} getRouteListRequest getRouteListRequest
     * @param {module:api/V2Api~getRouteListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRouteListResponse}
     */
    this.getRouteList = function(getRouteListRequest, callback) {
      var postBody = getRouteListRequest;

      // verify the required parameter 'getRouteListRequest' is set
      if (getRouteListRequest === undefined || getRouteListRequest === null) {
        throw new Error("Missing the required parameter 'getRouteListRequest' when calling getRouteList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRouteListResponse;

      return this.apiClient.callApi(
        '/getRouteList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRouteTableDetail operation.
     * @callback module:api/V2Api~getRouteTableDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRouteTableDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트테이블상세조회
     * @param {module:model/GetRouteTableDetailRequest} getRouteTableDetailRequest getRouteTableDetailRequest
     * @param {module:api/V2Api~getRouteTableDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRouteTableDetailResponse}
     */
    this.getRouteTableDetail = function(getRouteTableDetailRequest, callback) {
      var postBody = getRouteTableDetailRequest;

      // verify the required parameter 'getRouteTableDetailRequest' is set
      if (getRouteTableDetailRequest === undefined || getRouteTableDetailRequest === null) {
        throw new Error("Missing the required parameter 'getRouteTableDetailRequest' when calling getRouteTableDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRouteTableDetailResponse;

      return this.apiClient.callApi(
        '/getRouteTableDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRouteTableList operation.
     * @callback module:api/V2Api~getRouteTableListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRouteTableListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트테이블리스트조회
     * @param {module:model/GetRouteTableListRequest} getRouteTableListRequest getRouteTableListRequest
     * @param {module:api/V2Api~getRouteTableListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRouteTableListResponse}
     */
    this.getRouteTableList = function(getRouteTableListRequest, callback) {
      var postBody = getRouteTableListRequest;

      // verify the required parameter 'getRouteTableListRequest' is set
      if (getRouteTableListRequest === undefined || getRouteTableListRequest === null) {
        throw new Error("Missing the required parameter 'getRouteTableListRequest' when calling getRouteTableList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRouteTableListResponse;

      return this.apiClient.callApi(
        '/getRouteTableList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRouteTableSubnetList operation.
     * @callback module:api/V2Api~getRouteTableSubnetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRouteTableSubnetListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트테이블에연관된서브넷리스트조회
     * @param {module:model/GetRouteTableSubnetListRequest} getRouteTableSubnetListRequest getRouteTableSubnetListRequest
     * @param {module:api/V2Api~getRouteTableSubnetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRouteTableSubnetListResponse}
     */
    this.getRouteTableSubnetList = function(getRouteTableSubnetListRequest, callback) {
      var postBody = getRouteTableSubnetListRequest;

      // verify the required parameter 'getRouteTableSubnetListRequest' is set
      if (getRouteTableSubnetListRequest === undefined || getRouteTableSubnetListRequest === null) {
        throw new Error("Missing the required parameter 'getRouteTableSubnetListRequest' when calling getRouteTableSubnetList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRouteTableSubnetListResponse;

      return this.apiClient.callApi(
        '/getRouteTableSubnetList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubnetDetail operation.
     * @callback module:api/V2Api~getSubnetDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSubnetDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서브넷상세조회
     * @param {module:model/GetSubnetDetailRequest} getSubnetDetailRequest getSubnetDetailRequest
     * @param {module:api/V2Api~getSubnetDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSubnetDetailResponse}
     */
    this.getSubnetDetail = function(getSubnetDetailRequest, callback) {
      var postBody = getSubnetDetailRequest;

      // verify the required parameter 'getSubnetDetailRequest' is set
      if (getSubnetDetailRequest === undefined || getSubnetDetailRequest === null) {
        throw new Error("Missing the required parameter 'getSubnetDetailRequest' when calling getSubnetDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetSubnetDetailResponse;

      return this.apiClient.callApi(
        '/getSubnetDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubnetList operation.
     * @callback module:api/V2Api~getSubnetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSubnetListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서브넷리스트조회
     * @param {module:model/GetSubnetListRequest} getSubnetListRequest getSubnetListRequest
     * @param {module:api/V2Api~getSubnetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSubnetListResponse}
     */
    this.getSubnetList = function(getSubnetListRequest, callback) {
      var postBody = getSubnetListRequest;

      // verify the required parameter 'getSubnetListRequest' is set
      if (getSubnetListRequest === undefined || getSubnetListRequest === null) {
        throw new Error("Missing the required parameter 'getSubnetListRequest' when calling getSubnetList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetSubnetListResponse;

      return this.apiClient.callApi(
        '/getSubnetList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVpcDetail operation.
     * @callback module:api/V2Api~getVpcDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVpcDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VPC상세조회
     * @param {module:model/GetVpcDetailRequest} getVpcDetailRequest getVpcDetailRequest
     * @param {module:api/V2Api~getVpcDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVpcDetailResponse}
     */
    this.getVpcDetail = function(getVpcDetailRequest, callback) {
      var postBody = getVpcDetailRequest;

      // verify the required parameter 'getVpcDetailRequest' is set
      if (getVpcDetailRequest === undefined || getVpcDetailRequest === null) {
        throw new Error("Missing the required parameter 'getVpcDetailRequest' when calling getVpcDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetVpcDetailResponse;

      return this.apiClient.callApi(
        '/getVpcDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVpcList operation.
     * @callback module:api/V2Api~getVpcListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVpcListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VPC리스트조회
     * @param {module:model/GetVpcListRequest} getVpcListRequest getVpcListRequest
     * @param {module:api/V2Api~getVpcListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVpcListResponse}
     */
    this.getVpcList = function(getVpcListRequest, callback) {
      var postBody = getVpcListRequest;

      // verify the required parameter 'getVpcListRequest' is set
      if (getVpcListRequest === undefined || getVpcListRequest === null) {
        throw new Error("Missing the required parameter 'getVpcListRequest' when calling getVpcList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetVpcListResponse;

      return this.apiClient.callApi(
        '/getVpcList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVpcPeeringInstanceDetail operation.
     * @callback module:api/V2Api~getVpcPeeringInstanceDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVpcPeeringInstanceDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VPCPeering인스턴스상세조회
     * @param {module:model/GetVpcPeeringInstanceDetailRequest} getVpcPeeringInstanceDetailRequest getVpcPeeringInstanceDetailRequest
     * @param {module:api/V2Api~getVpcPeeringInstanceDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVpcPeeringInstanceDetailResponse}
     */
    this.getVpcPeeringInstanceDetail = function(getVpcPeeringInstanceDetailRequest, callback) {
      var postBody = getVpcPeeringInstanceDetailRequest;

      // verify the required parameter 'getVpcPeeringInstanceDetailRequest' is set
      if (getVpcPeeringInstanceDetailRequest === undefined || getVpcPeeringInstanceDetailRequest === null) {
        throw new Error("Missing the required parameter 'getVpcPeeringInstanceDetailRequest' when calling getVpcPeeringInstanceDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetVpcPeeringInstanceDetailResponse;

      return this.apiClient.callApi(
        '/getVpcPeeringInstanceDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVpcPeeringInstanceList operation.
     * @callback module:api/V2Api~getVpcPeeringInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVpcPeeringInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VPCPeering인스턴스리스트조회
     * @param {module:model/GetVpcPeeringInstanceListRequest} getVpcPeeringInstanceListRequest getVpcPeeringInstanceListRequest
     * @param {module:api/V2Api~getVpcPeeringInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVpcPeeringInstanceListResponse}
     */
    this.getVpcPeeringInstanceList = function(getVpcPeeringInstanceListRequest, callback) {
      var postBody = getVpcPeeringInstanceListRequest;

      // verify the required parameter 'getVpcPeeringInstanceListRequest' is set
      if (getVpcPeeringInstanceListRequest === undefined || getVpcPeeringInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getVpcPeeringInstanceListRequest' when calling getVpcPeeringInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetVpcPeeringInstanceListResponse;

      return this.apiClient.callApi(
        '/getVpcPeeringInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkAclInboundRule operation.
     * @callback module:api/V2Api~removeNetworkAclInboundRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveNetworkAclInboundRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크ACLInboundRule제거
     * @param {module:model/RemoveNetworkAclInboundRuleRequest} removeNetworkAclInboundRuleRequest removeNetworkAclInboundRuleRequest
     * @param {module:api/V2Api~removeNetworkAclInboundRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveNetworkAclInboundRuleResponse}
     */
    this.removeNetworkAclInboundRule = function(removeNetworkAclInboundRuleRequest, callback) {
      var postBody = removeNetworkAclInboundRuleRequest;

      // verify the required parameter 'removeNetworkAclInboundRuleRequest' is set
      if (removeNetworkAclInboundRuleRequest === undefined || removeNetworkAclInboundRuleRequest === null) {
        throw new Error("Missing the required parameter 'removeNetworkAclInboundRuleRequest' when calling removeNetworkAclInboundRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RemoveNetworkAclInboundRuleResponse;

      return this.apiClient.callApi(
        '/removeNetworkAclInboundRule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkAclOutboundRule operation.
     * @callback module:api/V2Api~removeNetworkAclOutboundRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveNetworkAclOutboundRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크ACLOutboundRule제거
     * @param {module:model/RemoveNetworkAclOutboundRuleRequest} removeNetworkAclOutboundRuleRequest removeNetworkAclOutboundRuleRequest
     * @param {module:api/V2Api~removeNetworkAclOutboundRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveNetworkAclOutboundRuleResponse}
     */
    this.removeNetworkAclOutboundRule = function(removeNetworkAclOutboundRuleRequest, callback) {
      var postBody = removeNetworkAclOutboundRuleRequest;

      // verify the required parameter 'removeNetworkAclOutboundRuleRequest' is set
      if (removeNetworkAclOutboundRuleRequest === undefined || removeNetworkAclOutboundRuleRequest === null) {
        throw new Error("Missing the required parameter 'removeNetworkAclOutboundRuleRequest' when calling removeNetworkAclOutboundRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RemoveNetworkAclOutboundRuleResponse;

      return this.apiClient.callApi(
        '/removeNetworkAclOutboundRule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRoute operation.
     * @callback module:api/V2Api~removeRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveRouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트제거
     * @param {module:model/RemoveRouteRequest} removeRouteRequest removeRouteRequest
     * @param {module:api/V2Api~removeRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveRouteResponse}
     */
    this.removeRoute = function(removeRouteRequest, callback) {
      var postBody = removeRouteRequest;

      // verify the required parameter 'removeRouteRequest' is set
      if (removeRouteRequest === undefined || removeRouteRequest === null) {
        throw new Error("Missing the required parameter 'removeRouteRequest' when calling removeRoute");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RemoveRouteResponse;

      return this.apiClient.callApi(
        '/removeRoute', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRouteTableSubnet operation.
     * @callback module:api/V2Api~removeRouteTableSubnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveRouteTableSubnetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트테이블의연관서브넷제거
     * @param {module:model/RemoveRouteTableSubnetRequest} removeRouteTableSubnetRequest removeRouteTableSubnetRequest
     * @param {module:api/V2Api~removeRouteTableSubnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveRouteTableSubnetResponse}
     */
    this.removeRouteTableSubnet = function(removeRouteTableSubnetRequest, callback) {
      var postBody = removeRouteTableSubnetRequest;

      // verify the required parameter 'removeRouteTableSubnetRequest' is set
      if (removeRouteTableSubnetRequest === undefined || removeRouteTableSubnetRequest === null) {
        throw new Error("Missing the required parameter 'removeRouteTableSubnetRequest' when calling removeRouteTableSubnet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RemoveRouteTableSubnetResponse;

      return this.apiClient.callApi(
        '/removeRouteTableSubnet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setNatGatewayDescription operation.
     * @callback module:api/V2Api~setNatGatewayDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetNatGatewayDescriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NATGateway설명설정
     * @param {module:model/SetNatGatewayDescriptionRequest} setNatGatewayDescriptionRequest setNatGatewayDescriptionRequest
     * @param {module:api/V2Api~setNatGatewayDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetNatGatewayDescriptionResponse}
     */
    this.setNatGatewayDescription = function(setNatGatewayDescriptionRequest, callback) {
      var postBody = setNatGatewayDescriptionRequest;

      // verify the required parameter 'setNatGatewayDescriptionRequest' is set
      if (setNatGatewayDescriptionRequest === undefined || setNatGatewayDescriptionRequest === null) {
        throw new Error("Missing the required parameter 'setNatGatewayDescriptionRequest' when calling setNatGatewayDescription");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = SetNatGatewayDescriptionResponse;

      return this.apiClient.callApi(
        '/setNatGatewayDescription', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setNetworkAclDescription operation.
     * @callback module:api/V2Api~setNetworkAclDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetNetworkAclDescriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크ACL설명설정
     * @param {module:model/SetNetworkAclDescriptionRequest} setNetworkAclDescriptionRequest setNetworkAclDescriptionRequest
     * @param {module:api/V2Api~setNetworkAclDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetNetworkAclDescriptionResponse}
     */
    this.setNetworkAclDescription = function(setNetworkAclDescriptionRequest, callback) {
      var postBody = setNetworkAclDescriptionRequest;

      // verify the required parameter 'setNetworkAclDescriptionRequest' is set
      if (setNetworkAclDescriptionRequest === undefined || setNetworkAclDescriptionRequest === null) {
        throw new Error("Missing the required parameter 'setNetworkAclDescriptionRequest' when calling setNetworkAclDescription");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = SetNetworkAclDescriptionResponse;

      return this.apiClient.callApi(
        '/setNetworkAclDescription', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setRouteTableDescription operation.
     * @callback module:api/V2Api~setRouteTableDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetRouteTableDescriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 라우트테이블설명설정
     * @param {module:model/SetRouteTableDescriptionRequest} setRouteTableDescriptionRequest setRouteTableDescriptionRequest
     * @param {module:api/V2Api~setRouteTableDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetRouteTableDescriptionResponse}
     */
    this.setRouteTableDescription = function(setRouteTableDescriptionRequest, callback) {
      var postBody = setRouteTableDescriptionRequest;

      // verify the required parameter 'setRouteTableDescriptionRequest' is set
      if (setRouteTableDescriptionRequest === undefined || setRouteTableDescriptionRequest === null) {
        throw new Error("Missing the required parameter 'setRouteTableDescriptionRequest' when calling setRouteTableDescription");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = SetRouteTableDescriptionResponse;

      return this.apiClient.callApi(
        '/setRouteTableDescription', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setSubnetNetworkAcl operation.
     * @callback module:api/V2Api~setSubnetNetworkAclCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetSubnetNetworkAclResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서브넷의네트워크ACL설정
     * @param {module:model/SetSubnetNetworkAclRequest} setSubnetNetworkAclRequest setSubnetNetworkAclRequest
     * @param {module:api/V2Api~setSubnetNetworkAclCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetSubnetNetworkAclResponse}
     */
    this.setSubnetNetworkAcl = function(setSubnetNetworkAclRequest, callback) {
      var postBody = setSubnetNetworkAclRequest;

      // verify the required parameter 'setSubnetNetworkAclRequest' is set
      if (setSubnetNetworkAclRequest === undefined || setSubnetNetworkAclRequest === null) {
        throw new Error("Missing the required parameter 'setSubnetNetworkAclRequest' when calling setSubnetNetworkAcl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = SetSubnetNetworkAclResponse;

      return this.apiClient.callApi(
        '/setSubnetNetworkAcl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setVpcPeeringDescription operation.
     * @callback module:api/V2Api~setVpcPeeringDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetVpcPeeringDescriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VPCPeering설명설정
     * @param {module:model/SetVpcPeeringDescriptionRequest} setVpcPeeringDescriptionRequest setVpcPeeringDescriptionRequest
     * @param {module:api/V2Api~setVpcPeeringDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetVpcPeeringDescriptionResponse}
     */
    this.setVpcPeeringDescription = function(setVpcPeeringDescriptionRequest, callback) {
      var postBody = setVpcPeeringDescriptionRequest;

      // verify the required parameter 'setVpcPeeringDescriptionRequest' is set
      if (setVpcPeeringDescriptionRequest === undefined || setVpcPeeringDescriptionRequest === null) {
        throw new Error("Missing the required parameter 'setVpcPeeringDescriptionRequest' when calling setVpcPeeringDescription");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = SetVpcPeeringDescriptionResponse;

      return this.apiClient.callApi(
        '/setVpcPeeringDescription', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
