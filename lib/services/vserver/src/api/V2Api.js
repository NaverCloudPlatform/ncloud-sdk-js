/*
* vserver
* VPC Compute 관련 API<br/>https://ncloud.apigw.ntruss.com/vserver/v2
*
* NBP corp.
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddAccessControlGroupInboundRuleRequest', 'model/AddAccessControlGroupInboundRuleResponse', 'model/AddAccessControlGroupOutboundRuleRequest', 'model/AddAccessControlGroupOutboundRuleResponse', 'model/AddNetworkInterfaceAccessControlGroupRequest', 'model/AddNetworkInterfaceAccessControlGroupResponse', 'model/AddPlacementGroupServerInstanceRequest', 'model/AddPlacementGroupServerInstanceResponse', 'model/AssociatePublicIpWithServerInstanceRequest', 'model/AssociatePublicIpWithServerInstanceResponse', 'model/AttachBlockStorageInstanceRequest', 'model/AttachBlockStorageInstanceResponse', 'model/AttachNetworkInterfaceRequest', 'model/AttachNetworkInterfaceResponse', 'model/ChangeBlockStorageVolumeSizeRequest', 'model/ChangeBlockStorageVolumeSizeResponse', 'model/ChangeServerInstanceSpecRequest', 'model/ChangeServerInstanceSpecResponse', 'model/CreateAccessControlGroupRequest', 'model/CreateAccessControlGroupResponse', 'model/CreateBlockStorageInstanceRequest', 'model/CreateBlockStorageInstanceResponse', 'model/CreateBlockStorageSnapshotInstanceRequest', 'model/CreateBlockStorageSnapshotInstanceResponse', 'model/CreateInitScriptRequest', 'model/CreateInitScriptResponse', 'model/CreateLoginKeyRequest', 'model/CreateLoginKeyResponse', 'model/CreateMemberServerImageInstanceRequest', 'model/CreateMemberServerImageInstanceResponse', 'model/CreateNetworkInterfaceRequest', 'model/CreateNetworkInterfaceResponse', 'model/CreatePlacementGroupRequest', 'model/CreatePlacementGroupResponse', 'model/CreatePublicIpInstanceRequest', 'model/CreatePublicIpInstanceResponse', 'model/CreateServerInstancesRequest', 'model/CreateServerInstancesResponse', 'model/DeleteAccessControlGroupRequest', 'model/DeleteAccessControlGroupResponse', 'model/DeleteBlockStorageInstancesRequest', 'model/DeleteBlockStorageInstancesResponse', 'model/DeleteBlockStorageSnapshotInstancesRequest', 'model/DeleteBlockStorageSnapshotInstancesResponse', 'model/DeleteInitScriptsRequest', 'model/DeleteInitScriptsResponse', 'model/DeleteLoginKeysRequest', 'model/DeleteLoginKeysResponse', 'model/DeleteMemberServerImageInstancesRequest', 'model/DeleteMemberServerImageInstancesResponse', 'model/DeleteNetworkInterfaceRequest', 'model/DeleteNetworkInterfaceResponse', 'model/DeletePlacementGroupRequest', 'model/DeletePlacementGroupResponse', 'model/DeletePublicIpInstanceRequest', 'model/DeletePublicIpInstanceResponse', 'model/DetachBlockStorageInstancesRequest', 'model/DetachBlockStorageInstancesResponse', 'model/DetachNetworkInterfaceRequest', 'model/DetachNetworkInterfaceResponse', 'model/DisassociatePublicIpFromServerInstanceRequest', 'model/DisassociatePublicIpFromServerInstanceResponse', 'model/GetAccessControlGroupDetailRequest', 'model/GetAccessControlGroupDetailResponse', 'model/GetAccessControlGroupListRequest', 'model/GetAccessControlGroupListResponse', 'model/GetAccessControlGroupRuleListRequest', 'model/GetAccessControlGroupRuleListResponse', 'model/GetBlockStorageInstanceDetailRequest', 'model/GetBlockStorageInstanceDetailResponse', 'model/GetBlockStorageInstanceListRequest', 'model/GetBlockStorageInstanceListResponse', 'model/GetBlockStorageSnapshotInstanceDetailRequest', 'model/GetBlockStorageSnapshotInstanceDetailResponse', 'model/GetBlockStorageSnapshotInstanceListRequest', 'model/GetBlockStorageSnapshotInstanceListResponse', 'model/GetInitScriptDetailRequest', 'model/GetInitScriptDetailResponse', 'model/GetInitScriptListRequest', 'model/GetInitScriptListResponse', 'model/GetLoginKeyListRequest', 'model/GetLoginKeyListResponse', 'model/GetMemberServerImageInstanceDetailRequest', 'model/GetMemberServerImageInstanceDetailResponse', 'model/GetMemberServerImageInstanceListRequest', 'model/GetMemberServerImageInstanceListResponse', 'model/GetNetworkInterfaceDetailRequest', 'model/GetNetworkInterfaceDetailResponse', 'model/GetNetworkInterfaceListRequest', 'model/GetNetworkInterfaceListResponse', 'model/GetPlacementGroupDetailRequest', 'model/GetPlacementGroupDetailResponse', 'model/GetPlacementGroupListRequest', 'model/GetPlacementGroupListResponse', 'model/GetPublicIpInstanceDetailRequest', 'model/GetPublicIpInstanceDetailResponse', 'model/GetPublicIpInstanceListRequest', 'model/GetPublicIpInstanceListResponse', 'model/GetPublicIpTargetServerInstanceListRequest', 'model/GetPublicIpTargetServerInstanceListResponse', 'model/GetRegionListRequest', 'model/GetRegionListResponse', 'model/GetRootPasswordRequest', 'model/GetRootPasswordResponse', 'model/GetRootPasswordServerInstanceListRequest', 'model/GetRootPasswordServerInstanceListResponse', 'model/GetServerImageProductListRequest', 'model/GetServerImageProductListResponse', 'model/GetServerInstanceDetailRequest', 'model/GetServerInstanceDetailResponse', 'model/GetServerInstanceListRequest', 'model/GetServerInstanceListResponse', 'model/GetServerProductListRequest', 'model/GetServerProductListResponse', 'model/GetZoneListRequest', 'model/GetZoneListResponse', 'model/ImportLoginKeyRequest', 'model/ImportLoginKeyResponse', 'model/RebootServerInstancesRequest', 'model/RebootServerInstancesResponse', 'model/RemoveAccessControlGroupInboundRuleRequest', 'model/RemoveAccessControlGroupInboundRuleResponse', 'model/RemoveAccessControlGroupOutboundRuleRequest', 'model/RemoveAccessControlGroupOutboundRuleResponse', 'model/RemoveNetworkInterfaceAccessControlGroupRequest', 'model/RemoveNetworkInterfaceAccessControlGroupResponse', 'model/RemovePlacementGroupServerInstanceRequest', 'model/RemovePlacementGroupServerInstanceResponse', 'model/StartServerInstancesRequest', 'model/StartServerInstancesResponse', 'model/StopServerInstancesRequest', 'model/StopServerInstancesResponse', 'model/TerminateServerInstancesRequest', 'model/TerminateServerInstancesResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddAccessControlGroupInboundRuleRequest'), require('../model/AddAccessControlGroupInboundRuleResponse'), require('../model/AddAccessControlGroupOutboundRuleRequest'), require('../model/AddAccessControlGroupOutboundRuleResponse'), require('../model/AddNetworkInterfaceAccessControlGroupRequest'), require('../model/AddNetworkInterfaceAccessControlGroupResponse'), require('../model/AddPlacementGroupServerInstanceRequest'), require('../model/AddPlacementGroupServerInstanceResponse'), require('../model/AssociatePublicIpWithServerInstanceRequest'), require('../model/AssociatePublicIpWithServerInstanceResponse'), require('../model/AttachBlockStorageInstanceRequest'), require('../model/AttachBlockStorageInstanceResponse'), require('../model/AttachNetworkInterfaceRequest'), require('../model/AttachNetworkInterfaceResponse'), require('../model/ChangeBlockStorageVolumeSizeRequest'), require('../model/ChangeBlockStorageVolumeSizeResponse'), require('../model/ChangeServerInstanceSpecRequest'), require('../model/ChangeServerInstanceSpecResponse'), require('../model/CreateAccessControlGroupRequest'), require('../model/CreateAccessControlGroupResponse'), require('../model/CreateBlockStorageInstanceRequest'), require('../model/CreateBlockStorageInstanceResponse'), require('../model/CreateBlockStorageSnapshotInstanceRequest'), require('../model/CreateBlockStorageSnapshotInstanceResponse'), require('../model/CreateInitScriptRequest'), require('../model/CreateInitScriptResponse'), require('../model/CreateLoginKeyRequest'), require('../model/CreateLoginKeyResponse'), require('../model/CreateMemberServerImageInstanceRequest'), require('../model/CreateMemberServerImageInstanceResponse'), require('../model/CreateNetworkInterfaceRequest'), require('../model/CreateNetworkInterfaceResponse'), require('../model/CreatePlacementGroupRequest'), require('../model/CreatePlacementGroupResponse'), require('../model/CreatePublicIpInstanceRequest'), require('../model/CreatePublicIpInstanceResponse'), require('../model/CreateServerInstancesRequest'), require('../model/CreateServerInstancesResponse'), require('../model/DeleteAccessControlGroupRequest'), require('../model/DeleteAccessControlGroupResponse'), require('../model/DeleteBlockStorageInstancesRequest'), require('../model/DeleteBlockStorageInstancesResponse'), require('../model/DeleteBlockStorageSnapshotInstancesRequest'), require('../model/DeleteBlockStorageSnapshotInstancesResponse'), require('../model/DeleteInitScriptsRequest'), require('../model/DeleteInitScriptsResponse'), require('../model/DeleteLoginKeysRequest'), require('../model/DeleteLoginKeysResponse'), require('../model/DeleteMemberServerImageInstancesRequest'), require('../model/DeleteMemberServerImageInstancesResponse'), require('../model/DeleteNetworkInterfaceRequest'), require('../model/DeleteNetworkInterfaceResponse'), require('../model/DeletePlacementGroupRequest'), require('../model/DeletePlacementGroupResponse'), require('../model/DeletePublicIpInstanceRequest'), require('../model/DeletePublicIpInstanceResponse'), require('../model/DetachBlockStorageInstancesRequest'), require('../model/DetachBlockStorageInstancesResponse'), require('../model/DetachNetworkInterfaceRequest'), require('../model/DetachNetworkInterfaceResponse'), require('../model/DisassociatePublicIpFromServerInstanceRequest'), require('../model/DisassociatePublicIpFromServerInstanceResponse'), require('../model/GetAccessControlGroupDetailRequest'), require('../model/GetAccessControlGroupDetailResponse'), require('../model/GetAccessControlGroupListRequest'), require('../model/GetAccessControlGroupListResponse'), require('../model/GetAccessControlGroupRuleListRequest'), require('../model/GetAccessControlGroupRuleListResponse'), require('../model/GetBlockStorageInstanceDetailRequest'), require('../model/GetBlockStorageInstanceDetailResponse'), require('../model/GetBlockStorageInstanceListRequest'), require('../model/GetBlockStorageInstanceListResponse'), require('../model/GetBlockStorageSnapshotInstanceDetailRequest'), require('../model/GetBlockStorageSnapshotInstanceDetailResponse'), require('../model/GetBlockStorageSnapshotInstanceListRequest'), require('../model/GetBlockStorageSnapshotInstanceListResponse'), require('../model/GetInitScriptDetailRequest'), require('../model/GetInitScriptDetailResponse'), require('../model/GetInitScriptListRequest'), require('../model/GetInitScriptListResponse'), require('../model/GetLoginKeyListRequest'), require('../model/GetLoginKeyListResponse'), require('../model/GetMemberServerImageInstanceDetailRequest'), require('../model/GetMemberServerImageInstanceDetailResponse'), require('../model/GetMemberServerImageInstanceListRequest'), require('../model/GetMemberServerImageInstanceListResponse'), require('../model/GetNetworkInterfaceDetailRequest'), require('../model/GetNetworkInterfaceDetailResponse'), require('../model/GetNetworkInterfaceListRequest'), require('../model/GetNetworkInterfaceListResponse'), require('../model/GetPlacementGroupDetailRequest'), require('../model/GetPlacementGroupDetailResponse'), require('../model/GetPlacementGroupListRequest'), require('../model/GetPlacementGroupListResponse'), require('../model/GetPublicIpInstanceDetailRequest'), require('../model/GetPublicIpInstanceDetailResponse'), require('../model/GetPublicIpInstanceListRequest'), require('../model/GetPublicIpInstanceListResponse'), require('../model/GetPublicIpTargetServerInstanceListRequest'), require('../model/GetPublicIpTargetServerInstanceListResponse'), require('../model/GetRegionListRequest'), require('../model/GetRegionListResponse'), require('../model/GetRootPasswordRequest'), require('../model/GetRootPasswordResponse'), require('../model/GetRootPasswordServerInstanceListRequest'), require('../model/GetRootPasswordServerInstanceListResponse'), require('../model/GetServerImageProductListRequest'), require('../model/GetServerImageProductListResponse'), require('../model/GetServerInstanceDetailRequest'), require('../model/GetServerInstanceDetailResponse'), require('../model/GetServerInstanceListRequest'), require('../model/GetServerInstanceListResponse'), require('../model/GetServerProductListRequest'), require('../model/GetServerProductListResponse'), require('../model/GetZoneListRequest'), require('../model/GetZoneListResponse'), require('../model/ImportLoginKeyRequest'), require('../model/ImportLoginKeyResponse'), require('../model/RebootServerInstancesRequest'), require('../model/RebootServerInstancesResponse'), require('../model/RemoveAccessControlGroupInboundRuleRequest'), require('../model/RemoveAccessControlGroupInboundRuleResponse'), require('../model/RemoveAccessControlGroupOutboundRuleRequest'), require('../model/RemoveAccessControlGroupOutboundRuleResponse'), require('../model/RemoveNetworkInterfaceAccessControlGroupRequest'), require('../model/RemoveNetworkInterfaceAccessControlGroupResponse'), require('../model/RemovePlacementGroupServerInstanceRequest'), require('../model/RemovePlacementGroupServerInstanceResponse'), require('../model/StartServerInstancesRequest'), require('../model/StartServerInstancesResponse'), require('../model/StopServerInstancesRequest'), require('../model/StopServerInstancesResponse'), require('../model/TerminateServerInstancesRequest'), require('../model/TerminateServerInstancesResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Vserver) {
      root.Vserver = {};
    }
    root.Vserver.V2Api = factory(root.Vserver.ApiClient, root.Vserver.AddAccessControlGroupInboundRuleRequest, root.Vserver.AddAccessControlGroupInboundRuleResponse, root.Vserver.AddAccessControlGroupOutboundRuleRequest, root.Vserver.AddAccessControlGroupOutboundRuleResponse, root.Vserver.AddNetworkInterfaceAccessControlGroupRequest, root.Vserver.AddNetworkInterfaceAccessControlGroupResponse, root.Vserver.AddPlacementGroupServerInstanceRequest, root.Vserver.AddPlacementGroupServerInstanceResponse, root.Vserver.AssociatePublicIpWithServerInstanceRequest, root.Vserver.AssociatePublicIpWithServerInstanceResponse, root.Vserver.AttachBlockStorageInstanceRequest, root.Vserver.AttachBlockStorageInstanceResponse, root.Vserver.AttachNetworkInterfaceRequest, root.Vserver.AttachNetworkInterfaceResponse, root.Vserver.ChangeBlockStorageVolumeSizeRequest, root.Vserver.ChangeBlockStorageVolumeSizeResponse, root.Vserver.ChangeServerInstanceSpecRequest, root.Vserver.ChangeServerInstanceSpecResponse, root.Vserver.CreateAccessControlGroupRequest, root.Vserver.CreateAccessControlGroupResponse, root.Vserver.CreateBlockStorageInstanceRequest, root.Vserver.CreateBlockStorageInstanceResponse, root.Vserver.CreateBlockStorageSnapshotInstanceRequest, root.Vserver.CreateBlockStorageSnapshotInstanceResponse, root.Vserver.CreateInitScriptRequest, root.Vserver.CreateInitScriptResponse, root.Vserver.CreateLoginKeyRequest, root.Vserver.CreateLoginKeyResponse, root.Vserver.CreateMemberServerImageInstanceRequest, root.Vserver.CreateMemberServerImageInstanceResponse, root.Vserver.CreateNetworkInterfaceRequest, root.Vserver.CreateNetworkInterfaceResponse, root.Vserver.CreatePlacementGroupRequest, root.Vserver.CreatePlacementGroupResponse, root.Vserver.CreatePublicIpInstanceRequest, root.Vserver.CreatePublicIpInstanceResponse, root.Vserver.CreateServerInstancesRequest, root.Vserver.CreateServerInstancesResponse, root.Vserver.DeleteAccessControlGroupRequest, root.Vserver.DeleteAccessControlGroupResponse, root.Vserver.DeleteBlockStorageInstancesRequest, root.Vserver.DeleteBlockStorageInstancesResponse, root.Vserver.DeleteBlockStorageSnapshotInstancesRequest, root.Vserver.DeleteBlockStorageSnapshotInstancesResponse, root.Vserver.DeleteInitScriptsRequest, root.Vserver.DeleteInitScriptsResponse, root.Vserver.DeleteLoginKeysRequest, root.Vserver.DeleteLoginKeysResponse, root.Vserver.DeleteMemberServerImageInstancesRequest, root.Vserver.DeleteMemberServerImageInstancesResponse, root.Vserver.DeleteNetworkInterfaceRequest, root.Vserver.DeleteNetworkInterfaceResponse, root.Vserver.DeletePlacementGroupRequest, root.Vserver.DeletePlacementGroupResponse, root.Vserver.DeletePublicIpInstanceRequest, root.Vserver.DeletePublicIpInstanceResponse, root.Vserver.DetachBlockStorageInstancesRequest, root.Vserver.DetachBlockStorageInstancesResponse, root.Vserver.DetachNetworkInterfaceRequest, root.Vserver.DetachNetworkInterfaceResponse, root.Vserver.DisassociatePublicIpFromServerInstanceRequest, root.Vserver.DisassociatePublicIpFromServerInstanceResponse, root.Vserver.GetAccessControlGroupDetailRequest, root.Vserver.GetAccessControlGroupDetailResponse, root.Vserver.GetAccessControlGroupListRequest, root.Vserver.GetAccessControlGroupListResponse, root.Vserver.GetAccessControlGroupRuleListRequest, root.Vserver.GetAccessControlGroupRuleListResponse, root.Vserver.GetBlockStorageInstanceDetailRequest, root.Vserver.GetBlockStorageInstanceDetailResponse, root.Vserver.GetBlockStorageInstanceListRequest, root.Vserver.GetBlockStorageInstanceListResponse, root.Vserver.GetBlockStorageSnapshotInstanceDetailRequest, root.Vserver.GetBlockStorageSnapshotInstanceDetailResponse, root.Vserver.GetBlockStorageSnapshotInstanceListRequest, root.Vserver.GetBlockStorageSnapshotInstanceListResponse, root.Vserver.GetInitScriptDetailRequest, root.Vserver.GetInitScriptDetailResponse, root.Vserver.GetInitScriptListRequest, root.Vserver.GetInitScriptListResponse, root.Vserver.GetLoginKeyListRequest, root.Vserver.GetLoginKeyListResponse, root.Vserver.GetMemberServerImageInstanceDetailRequest, root.Vserver.GetMemberServerImageInstanceDetailResponse, root.Vserver.GetMemberServerImageInstanceListRequest, root.Vserver.GetMemberServerImageInstanceListResponse, root.Vserver.GetNetworkInterfaceDetailRequest, root.Vserver.GetNetworkInterfaceDetailResponse, root.Vserver.GetNetworkInterfaceListRequest, root.Vserver.GetNetworkInterfaceListResponse, root.Vserver.GetPlacementGroupDetailRequest, root.Vserver.GetPlacementGroupDetailResponse, root.Vserver.GetPlacementGroupListRequest, root.Vserver.GetPlacementGroupListResponse, root.Vserver.GetPublicIpInstanceDetailRequest, root.Vserver.GetPublicIpInstanceDetailResponse, root.Vserver.GetPublicIpInstanceListRequest, root.Vserver.GetPublicIpInstanceListResponse, root.Vserver.GetPublicIpTargetServerInstanceListRequest, root.Vserver.GetPublicIpTargetServerInstanceListResponse, root.Vserver.GetRegionListRequest, root.Vserver.GetRegionListResponse, root.Vserver.GetRootPasswordRequest, root.Vserver.GetRootPasswordResponse, root.Vserver.GetRootPasswordServerInstanceListRequest, root.Vserver.GetRootPasswordServerInstanceListResponse, root.Vserver.GetServerImageProductListRequest, root.Vserver.GetServerImageProductListResponse, root.Vserver.GetServerInstanceDetailRequest, root.Vserver.GetServerInstanceDetailResponse, root.Vserver.GetServerInstanceListRequest, root.Vserver.GetServerInstanceListResponse, root.Vserver.GetServerProductListRequest, root.Vserver.GetServerProductListResponse, root.Vserver.GetZoneListRequest, root.Vserver.GetZoneListResponse, root.Vserver.ImportLoginKeyRequest, root.Vserver.ImportLoginKeyResponse, root.Vserver.RebootServerInstancesRequest, root.Vserver.RebootServerInstancesResponse, root.Vserver.RemoveAccessControlGroupInboundRuleRequest, root.Vserver.RemoveAccessControlGroupInboundRuleResponse, root.Vserver.RemoveAccessControlGroupOutboundRuleRequest, root.Vserver.RemoveAccessControlGroupOutboundRuleResponse, root.Vserver.RemoveNetworkInterfaceAccessControlGroupRequest, root.Vserver.RemoveNetworkInterfaceAccessControlGroupResponse, root.Vserver.RemovePlacementGroupServerInstanceRequest, root.Vserver.RemovePlacementGroupServerInstanceResponse, root.Vserver.StartServerInstancesRequest, root.Vserver.StartServerInstancesResponse, root.Vserver.StopServerInstancesRequest, root.Vserver.StopServerInstancesResponse, root.Vserver.TerminateServerInstancesRequest, root.Vserver.TerminateServerInstancesResponse);
  }
}(this, function(ApiClient, AddAccessControlGroupInboundRuleRequest, AddAccessControlGroupInboundRuleResponse, AddAccessControlGroupOutboundRuleRequest, AddAccessControlGroupOutboundRuleResponse, AddNetworkInterfaceAccessControlGroupRequest, AddNetworkInterfaceAccessControlGroupResponse, AddPlacementGroupServerInstanceRequest, AddPlacementGroupServerInstanceResponse, AssociatePublicIpWithServerInstanceRequest, AssociatePublicIpWithServerInstanceResponse, AttachBlockStorageInstanceRequest, AttachBlockStorageInstanceResponse, AttachNetworkInterfaceRequest, AttachNetworkInterfaceResponse, ChangeBlockStorageVolumeSizeRequest, ChangeBlockStorageVolumeSizeResponse, ChangeServerInstanceSpecRequest, ChangeServerInstanceSpecResponse, CreateAccessControlGroupRequest, CreateAccessControlGroupResponse, CreateBlockStorageInstanceRequest, CreateBlockStorageInstanceResponse, CreateBlockStorageSnapshotInstanceRequest, CreateBlockStorageSnapshotInstanceResponse, CreateInitScriptRequest, CreateInitScriptResponse, CreateLoginKeyRequest, CreateLoginKeyResponse, CreateMemberServerImageInstanceRequest, CreateMemberServerImageInstanceResponse, CreateNetworkInterfaceRequest, CreateNetworkInterfaceResponse, CreatePlacementGroupRequest, CreatePlacementGroupResponse, CreatePublicIpInstanceRequest, CreatePublicIpInstanceResponse, CreateServerInstancesRequest, CreateServerInstancesResponse, DeleteAccessControlGroupRequest, DeleteAccessControlGroupResponse, DeleteBlockStorageInstancesRequest, DeleteBlockStorageInstancesResponse, DeleteBlockStorageSnapshotInstancesRequest, DeleteBlockStorageSnapshotInstancesResponse, DeleteInitScriptsRequest, DeleteInitScriptsResponse, DeleteLoginKeysRequest, DeleteLoginKeysResponse, DeleteMemberServerImageInstancesRequest, DeleteMemberServerImageInstancesResponse, DeleteNetworkInterfaceRequest, DeleteNetworkInterfaceResponse, DeletePlacementGroupRequest, DeletePlacementGroupResponse, DeletePublicIpInstanceRequest, DeletePublicIpInstanceResponse, DetachBlockStorageInstancesRequest, DetachBlockStorageInstancesResponse, DetachNetworkInterfaceRequest, DetachNetworkInterfaceResponse, DisassociatePublicIpFromServerInstanceRequest, DisassociatePublicIpFromServerInstanceResponse, GetAccessControlGroupDetailRequest, GetAccessControlGroupDetailResponse, GetAccessControlGroupListRequest, GetAccessControlGroupListResponse, GetAccessControlGroupRuleListRequest, GetAccessControlGroupRuleListResponse, GetBlockStorageInstanceDetailRequest, GetBlockStorageInstanceDetailResponse, GetBlockStorageInstanceListRequest, GetBlockStorageInstanceListResponse, GetBlockStorageSnapshotInstanceDetailRequest, GetBlockStorageSnapshotInstanceDetailResponse, GetBlockStorageSnapshotInstanceListRequest, GetBlockStorageSnapshotInstanceListResponse, GetInitScriptDetailRequest, GetInitScriptDetailResponse, GetInitScriptListRequest, GetInitScriptListResponse, GetLoginKeyListRequest, GetLoginKeyListResponse, GetMemberServerImageInstanceDetailRequest, GetMemberServerImageInstanceDetailResponse, GetMemberServerImageInstanceListRequest, GetMemberServerImageInstanceListResponse, GetNetworkInterfaceDetailRequest, GetNetworkInterfaceDetailResponse, GetNetworkInterfaceListRequest, GetNetworkInterfaceListResponse, GetPlacementGroupDetailRequest, GetPlacementGroupDetailResponse, GetPlacementGroupListRequest, GetPlacementGroupListResponse, GetPublicIpInstanceDetailRequest, GetPublicIpInstanceDetailResponse, GetPublicIpInstanceListRequest, GetPublicIpInstanceListResponse, GetPublicIpTargetServerInstanceListRequest, GetPublicIpTargetServerInstanceListResponse, GetRegionListRequest, GetRegionListResponse, GetRootPasswordRequest, GetRootPasswordResponse, GetRootPasswordServerInstanceListRequest, GetRootPasswordServerInstanceListResponse, GetServerImageProductListRequest, GetServerImageProductListResponse, GetServerInstanceDetailRequest, GetServerInstanceDetailResponse, GetServerInstanceListRequest, GetServerInstanceListResponse, GetServerProductListRequest, GetServerProductListResponse, GetZoneListRequest, GetZoneListResponse, ImportLoginKeyRequest, ImportLoginKeyResponse, RebootServerInstancesRequest, RebootServerInstancesResponse, RemoveAccessControlGroupInboundRuleRequest, RemoveAccessControlGroupInboundRuleResponse, RemoveAccessControlGroupOutboundRuleRequest, RemoveAccessControlGroupOutboundRuleResponse, RemoveNetworkInterfaceAccessControlGroupRequest, RemoveNetworkInterfaceAccessControlGroupResponse, RemovePlacementGroupServerInstanceRequest, RemovePlacementGroupServerInstanceResponse, StartServerInstancesRequest, StartServerInstancesResponse, StopServerInstancesRequest, StopServerInstancesResponse, TerminateServerInstancesRequest, TerminateServerInstancesResponse) {
  'use strict';

  /**
   * V2 service.
   * @module api/V2Api
   * @version 1.0.1
   */

  /**
   * Constructs a new V2Api. 
   * @alias module:api/V2Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addAccessControlGroupInboundRule operation.
     * @callback module:api/V2Api~addAccessControlGroupInboundRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddAccessControlGroupInboundRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ACGInboundRule추가
     * @param {module:model/AddAccessControlGroupInboundRuleRequest} addAccessControlGroupInboundRuleRequest addAccessControlGroupInboundRuleRequest
     * @param {module:api/V2Api~addAccessControlGroupInboundRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddAccessControlGroupInboundRuleResponse}
     */
    this.addAccessControlGroupInboundRule = function(addAccessControlGroupInboundRuleRequest, callback) {
      var postBody = addAccessControlGroupInboundRuleRequest;

      // verify the required parameter 'addAccessControlGroupInboundRuleRequest' is set
      if (addAccessControlGroupInboundRuleRequest === undefined || addAccessControlGroupInboundRuleRequest === null) {
        throw new Error("Missing the required parameter 'addAccessControlGroupInboundRuleRequest' when calling addAccessControlGroupInboundRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddAccessControlGroupInboundRuleResponse;

      return this.apiClient.callApi(
        '/addAccessControlGroupInboundRule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addAccessControlGroupOutboundRule operation.
     * @callback module:api/V2Api~addAccessControlGroupOutboundRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddAccessControlGroupOutboundRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ACGOutboundRule추가
     * @param {module:model/AddAccessControlGroupOutboundRuleRequest} addAccessControlGroupOutboundRuleRequest addAccessControlGroupOutboundRuleRequest
     * @param {module:api/V2Api~addAccessControlGroupOutboundRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddAccessControlGroupOutboundRuleResponse}
     */
    this.addAccessControlGroupOutboundRule = function(addAccessControlGroupOutboundRuleRequest, callback) {
      var postBody = addAccessControlGroupOutboundRuleRequest;

      // verify the required parameter 'addAccessControlGroupOutboundRuleRequest' is set
      if (addAccessControlGroupOutboundRuleRequest === undefined || addAccessControlGroupOutboundRuleRequest === null) {
        throw new Error("Missing the required parameter 'addAccessControlGroupOutboundRuleRequest' when calling addAccessControlGroupOutboundRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddAccessControlGroupOutboundRuleResponse;

      return this.apiClient.callApi(
        '/addAccessControlGroupOutboundRule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNetworkInterfaceAccessControlGroup operation.
     * @callback module:api/V2Api~addNetworkInterfaceAccessControlGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddNetworkInterfaceAccessControlGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크인터페이스의ACG추가
     * @param {module:model/AddNetworkInterfaceAccessControlGroupRequest} addNetworkInterfaceAccessControlGroupRequest addNetworkInterfaceAccessControlGroupRequest
     * @param {module:api/V2Api~addNetworkInterfaceAccessControlGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddNetworkInterfaceAccessControlGroupResponse}
     */
    this.addNetworkInterfaceAccessControlGroup = function(addNetworkInterfaceAccessControlGroupRequest, callback) {
      var postBody = addNetworkInterfaceAccessControlGroupRequest;

      // verify the required parameter 'addNetworkInterfaceAccessControlGroupRequest' is set
      if (addNetworkInterfaceAccessControlGroupRequest === undefined || addNetworkInterfaceAccessControlGroupRequest === null) {
        throw new Error("Missing the required parameter 'addNetworkInterfaceAccessControlGroupRequest' when calling addNetworkInterfaceAccessControlGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddNetworkInterfaceAccessControlGroupResponse;

      return this.apiClient.callApi(
        '/addNetworkInterfaceAccessControlGroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPlacementGroupServerInstance operation.
     * @callback module:api/V2Api~addPlacementGroupServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddPlacementGroupServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 물리배치그룹에서버인스턴스추가
     * @param {module:model/AddPlacementGroupServerInstanceRequest} addPlacementGroupServerInstanceRequest addPlacementGroupServerInstanceRequest
     * @param {module:api/V2Api~addPlacementGroupServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddPlacementGroupServerInstanceResponse}
     */
    this.addPlacementGroupServerInstance = function(addPlacementGroupServerInstanceRequest, callback) {
      var postBody = addPlacementGroupServerInstanceRequest;

      // verify the required parameter 'addPlacementGroupServerInstanceRequest' is set
      if (addPlacementGroupServerInstanceRequest === undefined || addPlacementGroupServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'addPlacementGroupServerInstanceRequest' when calling addPlacementGroupServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddPlacementGroupServerInstanceResponse;

      return this.apiClient.callApi(
        '/addPlacementGroupServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the associatePublicIpWithServerInstance operation.
     * @callback module:api/V2Api~associatePublicIpWithServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociatePublicIpWithServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP를서버인스턴스에할당
     * @param {module:model/AssociatePublicIpWithServerInstanceRequest} associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest
     * @param {module:api/V2Api~associatePublicIpWithServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociatePublicIpWithServerInstanceResponse}
     */
    this.associatePublicIpWithServerInstance = function(associatePublicIpWithServerInstanceRequest, callback) {
      var postBody = associatePublicIpWithServerInstanceRequest;

      // verify the required parameter 'associatePublicIpWithServerInstanceRequest' is set
      if (associatePublicIpWithServerInstanceRequest === undefined || associatePublicIpWithServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'associatePublicIpWithServerInstanceRequest' when calling associatePublicIpWithServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AssociatePublicIpWithServerInstanceResponse;

      return this.apiClient.callApi(
        '/associatePublicIpWithServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the attachBlockStorageInstance operation.
     * @callback module:api/V2Api~attachBlockStorageInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachBlockStorageInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스할당
     * @param {module:model/AttachBlockStorageInstanceRequest} attachBlockStorageInstanceRequest attachBlockStorageInstanceRequest
     * @param {module:api/V2Api~attachBlockStorageInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachBlockStorageInstanceResponse}
     */
    this.attachBlockStorageInstance = function(attachBlockStorageInstanceRequest, callback) {
      var postBody = attachBlockStorageInstanceRequest;

      // verify the required parameter 'attachBlockStorageInstanceRequest' is set
      if (attachBlockStorageInstanceRequest === undefined || attachBlockStorageInstanceRequest === null) {
        throw new Error("Missing the required parameter 'attachBlockStorageInstanceRequest' when calling attachBlockStorageInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AttachBlockStorageInstanceResponse;

      return this.apiClient.callApi(
        '/attachBlockStorageInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the attachNetworkInterface operation.
     * @callback module:api/V2Api~attachNetworkInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachNetworkInterfaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크인터페이스할당
     * @param {module:model/AttachNetworkInterfaceRequest} attachNetworkInterfaceRequest attachNetworkInterfaceRequest
     * @param {module:api/V2Api~attachNetworkInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachNetworkInterfaceResponse}
     */
    this.attachNetworkInterface = function(attachNetworkInterfaceRequest, callback) {
      var postBody = attachNetworkInterfaceRequest;

      // verify the required parameter 'attachNetworkInterfaceRequest' is set
      if (attachNetworkInterfaceRequest === undefined || attachNetworkInterfaceRequest === null) {
        throw new Error("Missing the required parameter 'attachNetworkInterfaceRequest' when calling attachNetworkInterface");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AttachNetworkInterfaceResponse;

      return this.apiClient.callApi(
        '/attachNetworkInterface', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeBlockStorageVolumeSize operation.
     * @callback module:api/V2Api~changeBlockStorageVolumeSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeBlockStorageVolumeSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지볼륨사이즈변경
     * @param {module:model/ChangeBlockStorageVolumeSizeRequest} changeBlockStorageVolumeSizeRequest changeBlockStorageVolumeSizeRequest
     * @param {module:api/V2Api~changeBlockStorageVolumeSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeBlockStorageVolumeSizeResponse}
     */
    this.changeBlockStorageVolumeSize = function(changeBlockStorageVolumeSizeRequest, callback) {
      var postBody = changeBlockStorageVolumeSizeRequest;

      // verify the required parameter 'changeBlockStorageVolumeSizeRequest' is set
      if (changeBlockStorageVolumeSizeRequest === undefined || changeBlockStorageVolumeSizeRequest === null) {
        throw new Error("Missing the required parameter 'changeBlockStorageVolumeSizeRequest' when calling changeBlockStorageVolumeSize");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = ChangeBlockStorageVolumeSizeResponse;

      return this.apiClient.callApi(
        '/changeBlockStorageVolumeSize', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeServerInstanceSpec operation.
     * @callback module:api/V2Api~changeServerInstanceSpecCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeServerInstanceSpecResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스스펙변경
     * @param {module:model/ChangeServerInstanceSpecRequest} changeServerInstanceSpecRequest changeServerInstanceSpecRequest
     * @param {module:api/V2Api~changeServerInstanceSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeServerInstanceSpecResponse}
     */
    this.changeServerInstanceSpec = function(changeServerInstanceSpecRequest, callback) {
      var postBody = changeServerInstanceSpecRequest;

      // verify the required parameter 'changeServerInstanceSpecRequest' is set
      if (changeServerInstanceSpecRequest === undefined || changeServerInstanceSpecRequest === null) {
        throw new Error("Missing the required parameter 'changeServerInstanceSpecRequest' when calling changeServerInstanceSpec");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = ChangeServerInstanceSpecResponse;

      return this.apiClient.callApi(
        '/changeServerInstanceSpec', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccessControlGroup operation.
     * @callback module:api/V2Api~createAccessControlGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccessControlGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ACG생성
     * @param {module:model/CreateAccessControlGroupRequest} createAccessControlGroupRequest createAccessControlGroupRequest
     * @param {module:api/V2Api~createAccessControlGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccessControlGroupResponse}
     */
    this.createAccessControlGroup = function(createAccessControlGroupRequest, callback) {
      var postBody = createAccessControlGroupRequest;

      // verify the required parameter 'createAccessControlGroupRequest' is set
      if (createAccessControlGroupRequest === undefined || createAccessControlGroupRequest === null) {
        throw new Error("Missing the required parameter 'createAccessControlGroupRequest' when calling createAccessControlGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateAccessControlGroupResponse;

      return this.apiClient.callApi(
        '/createAccessControlGroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBlockStorageInstance operation.
     * @callback module:api/V2Api~createBlockStorageInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBlockStorageInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스생성
     * @param {module:model/CreateBlockStorageInstanceRequest} createBlockStorageInstanceRequest createBlockStorageInstanceRequest
     * @param {module:api/V2Api~createBlockStorageInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBlockStorageInstanceResponse}
     */
    this.createBlockStorageInstance = function(createBlockStorageInstanceRequest, callback) {
      var postBody = createBlockStorageInstanceRequest;

      // verify the required parameter 'createBlockStorageInstanceRequest' is set
      if (createBlockStorageInstanceRequest === undefined || createBlockStorageInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createBlockStorageInstanceRequest' when calling createBlockStorageInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateBlockStorageInstanceResponse;

      return this.apiClient.callApi(
        '/createBlockStorageInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBlockStorageSnapshotInstance operation.
     * @callback module:api/V2Api~createBlockStorageSnapshotInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBlockStorageSnapshotInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지스냅샷인스턴스생성
     * @param {module:model/CreateBlockStorageSnapshotInstanceRequest} createBlockStorageSnapshotInstanceRequest createBlockStorageSnapshotInstanceRequest
     * @param {module:api/V2Api~createBlockStorageSnapshotInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBlockStorageSnapshotInstanceResponse}
     */
    this.createBlockStorageSnapshotInstance = function(createBlockStorageSnapshotInstanceRequest, callback) {
      var postBody = createBlockStorageSnapshotInstanceRequest;

      // verify the required parameter 'createBlockStorageSnapshotInstanceRequest' is set
      if (createBlockStorageSnapshotInstanceRequest === undefined || createBlockStorageSnapshotInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createBlockStorageSnapshotInstanceRequest' when calling createBlockStorageSnapshotInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateBlockStorageSnapshotInstanceResponse;

      return this.apiClient.callApi(
        '/createBlockStorageSnapshotInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createInitScript operation.
     * @callback module:api/V2Api~createInitScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInitScriptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 초기화스크립트생성
     * @param {module:model/CreateInitScriptRequest} createInitScriptRequest createInitScriptRequest
     * @param {module:api/V2Api~createInitScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInitScriptResponse}
     */
    this.createInitScript = function(createInitScriptRequest, callback) {
      var postBody = createInitScriptRequest;

      // verify the required parameter 'createInitScriptRequest' is set
      if (createInitScriptRequest === undefined || createInitScriptRequest === null) {
        throw new Error("Missing the required parameter 'createInitScriptRequest' when calling createInitScript");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateInitScriptResponse;

      return this.apiClient.callApi(
        '/createInitScript', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoginKey operation.
     * @callback module:api/V2Api~createLoginKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLoginKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키생성
     * @param {module:model/CreateLoginKeyRequest} createLoginKeyRequest createLoginKeyRequest
     * @param {module:api/V2Api~createLoginKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLoginKeyResponse}
     */
    this.createLoginKey = function(createLoginKeyRequest, callback) {
      var postBody = createLoginKeyRequest;

      // verify the required parameter 'createLoginKeyRequest' is set
      if (createLoginKeyRequest === undefined || createLoginKeyRequest === null) {
        throw new Error("Missing the required parameter 'createLoginKeyRequest' when calling createLoginKey");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateLoginKeyResponse;

      return this.apiClient.callApi(
        '/createLoginKey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createMemberServerImageInstance operation.
     * @callback module:api/V2Api~createMemberServerImageInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMemberServerImageInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지인스턴스생성
     * @param {module:model/CreateMemberServerImageInstanceRequest} createMemberServerImageInstanceRequest createMemberServerImageInstanceRequest
     * @param {module:api/V2Api~createMemberServerImageInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMemberServerImageInstanceResponse}
     */
    this.createMemberServerImageInstance = function(createMemberServerImageInstanceRequest, callback) {
      var postBody = createMemberServerImageInstanceRequest;

      // verify the required parameter 'createMemberServerImageInstanceRequest' is set
      if (createMemberServerImageInstanceRequest === undefined || createMemberServerImageInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createMemberServerImageInstanceRequest' when calling createMemberServerImageInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateMemberServerImageInstanceResponse;

      return this.apiClient.callApi(
        '/createMemberServerImageInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkInterface operation.
     * @callback module:api/V2Api~createNetworkInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkInterfaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크인터페이스생성
     * @param {module:model/CreateNetworkInterfaceRequest} createNetworkInterfaceRequest createNetworkInterfaceRequest
     * @param {module:api/V2Api~createNetworkInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkInterfaceResponse}
     */
    this.createNetworkInterface = function(createNetworkInterfaceRequest, callback) {
      var postBody = createNetworkInterfaceRequest;

      // verify the required parameter 'createNetworkInterfaceRequest' is set
      if (createNetworkInterfaceRequest === undefined || createNetworkInterfaceRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkInterfaceRequest' when calling createNetworkInterface");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateNetworkInterfaceResponse;

      return this.apiClient.callApi(
        '/createNetworkInterface', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPlacementGroup operation.
     * @callback module:api/V2Api~createPlacementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePlacementGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 물리배치그룹생성
     * @param {module:model/CreatePlacementGroupRequest} createPlacementGroupRequest createPlacementGroupRequest
     * @param {module:api/V2Api~createPlacementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePlacementGroupResponse}
     */
    this.createPlacementGroup = function(createPlacementGroupRequest, callback) {
      var postBody = createPlacementGroupRequest;

      // verify the required parameter 'createPlacementGroupRequest' is set
      if (createPlacementGroupRequest === undefined || createPlacementGroupRequest === null) {
        throw new Error("Missing the required parameter 'createPlacementGroupRequest' when calling createPlacementGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreatePlacementGroupResponse;

      return this.apiClient.callApi(
        '/createPlacementGroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPublicIpInstance operation.
     * @callback module:api/V2Api~createPublicIpInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePublicIpInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스생성
     * @param {module:model/CreatePublicIpInstanceRequest} createPublicIpInstanceRequest createPublicIpInstanceRequest
     * @param {module:api/V2Api~createPublicIpInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePublicIpInstanceResponse}
     */
    this.createPublicIpInstance = function(createPublicIpInstanceRequest, callback) {
      var postBody = createPublicIpInstanceRequest;

      // verify the required parameter 'createPublicIpInstanceRequest' is set
      if (createPublicIpInstanceRequest === undefined || createPublicIpInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createPublicIpInstanceRequest' when calling createPublicIpInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreatePublicIpInstanceResponse;

      return this.apiClient.callApi(
        '/createPublicIpInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createServerInstances operation.
     * @callback module:api/V2Api~createServerInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스생성
     * @param {module:model/CreateServerInstancesRequest} createServerInstancesRequest createServerInstancesRequest
     * @param {module:api/V2Api~createServerInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateServerInstancesResponse}
     */
    this.createServerInstances = function(createServerInstancesRequest, callback) {
      var postBody = createServerInstancesRequest;

      // verify the required parameter 'createServerInstancesRequest' is set
      if (createServerInstancesRequest === undefined || createServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'createServerInstancesRequest' when calling createServerInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateServerInstancesResponse;

      return this.apiClient.callApi(
        '/createServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccessControlGroup operation.
     * @callback module:api/V2Api~deleteAccessControlGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAccessControlGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ACG삭제
     * @param {module:model/DeleteAccessControlGroupRequest} deleteAccessControlGroupRequest deleteAccessControlGroupRequest
     * @param {module:api/V2Api~deleteAccessControlGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAccessControlGroupResponse}
     */
    this.deleteAccessControlGroup = function(deleteAccessControlGroupRequest, callback) {
      var postBody = deleteAccessControlGroupRequest;

      // verify the required parameter 'deleteAccessControlGroupRequest' is set
      if (deleteAccessControlGroupRequest === undefined || deleteAccessControlGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteAccessControlGroupRequest' when calling deleteAccessControlGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteAccessControlGroupResponse;

      return this.apiClient.callApi(
        '/deleteAccessControlGroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlockStorageInstances operation.
     * @callback module:api/V2Api~deleteBlockStorageInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBlockStorageInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스삭제
     * @param {module:model/DeleteBlockStorageInstancesRequest} deleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest
     * @param {module:api/V2Api~deleteBlockStorageInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBlockStorageInstancesResponse}
     */
    this.deleteBlockStorageInstances = function(deleteBlockStorageInstancesRequest, callback) {
      var postBody = deleteBlockStorageInstancesRequest;

      // verify the required parameter 'deleteBlockStorageInstancesRequest' is set
      if (deleteBlockStorageInstancesRequest === undefined || deleteBlockStorageInstancesRequest === null) {
        throw new Error("Missing the required parameter 'deleteBlockStorageInstancesRequest' when calling deleteBlockStorageInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteBlockStorageInstancesResponse;

      return this.apiClient.callApi(
        '/deleteBlockStorageInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlockStorageSnapshotInstances operation.
     * @callback module:api/V2Api~deleteBlockStorageSnapshotInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBlockStorageSnapshotInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지스냅샷인스턴스삭제
     * @param {module:model/DeleteBlockStorageSnapshotInstancesRequest} deleteBlockStorageSnapshotInstancesRequest deleteBlockStorageSnapshotInstancesRequest
     * @param {module:api/V2Api~deleteBlockStorageSnapshotInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBlockStorageSnapshotInstancesResponse}
     */
    this.deleteBlockStorageSnapshotInstances = function(deleteBlockStorageSnapshotInstancesRequest, callback) {
      var postBody = deleteBlockStorageSnapshotInstancesRequest;

      // verify the required parameter 'deleteBlockStorageSnapshotInstancesRequest' is set
      if (deleteBlockStorageSnapshotInstancesRequest === undefined || deleteBlockStorageSnapshotInstancesRequest === null) {
        throw new Error("Missing the required parameter 'deleteBlockStorageSnapshotInstancesRequest' when calling deleteBlockStorageSnapshotInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteBlockStorageSnapshotInstancesResponse;

      return this.apiClient.callApi(
        '/deleteBlockStorageSnapshotInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInitScripts operation.
     * @callback module:api/V2Api~deleteInitScriptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteInitScriptsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 초기화스크립트삭제
     * @param {module:model/DeleteInitScriptsRequest} deleteInitScriptsRequest deleteInitScriptsRequest
     * @param {module:api/V2Api~deleteInitScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteInitScriptsResponse}
     */
    this.deleteInitScripts = function(deleteInitScriptsRequest, callback) {
      var postBody = deleteInitScriptsRequest;

      // verify the required parameter 'deleteInitScriptsRequest' is set
      if (deleteInitScriptsRequest === undefined || deleteInitScriptsRequest === null) {
        throw new Error("Missing the required parameter 'deleteInitScriptsRequest' when calling deleteInitScripts");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteInitScriptsResponse;

      return this.apiClient.callApi(
        '/deleteInitScripts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoginKeys operation.
     * @callback module:api/V2Api~deleteLoginKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteLoginKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키삭제
     * @param {module:model/DeleteLoginKeysRequest} deleteLoginKeysRequest deleteLoginKeysRequest
     * @param {module:api/V2Api~deleteLoginKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteLoginKeysResponse}
     */
    this.deleteLoginKeys = function(deleteLoginKeysRequest, callback) {
      var postBody = deleteLoginKeysRequest;

      // verify the required parameter 'deleteLoginKeysRequest' is set
      if (deleteLoginKeysRequest === undefined || deleteLoginKeysRequest === null) {
        throw new Error("Missing the required parameter 'deleteLoginKeysRequest' when calling deleteLoginKeys");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteLoginKeysResponse;

      return this.apiClient.callApi(
        '/deleteLoginKeys', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMemberServerImageInstances operation.
     * @callback module:api/V2Api~deleteMemberServerImageInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteMemberServerImageInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지인스턴스삭제
     * @param {module:model/DeleteMemberServerImageInstancesRequest} deleteMemberServerImageInstancesRequest deleteMemberServerImageInstancesRequest
     * @param {module:api/V2Api~deleteMemberServerImageInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteMemberServerImageInstancesResponse}
     */
    this.deleteMemberServerImageInstances = function(deleteMemberServerImageInstancesRequest, callback) {
      var postBody = deleteMemberServerImageInstancesRequest;

      // verify the required parameter 'deleteMemberServerImageInstancesRequest' is set
      if (deleteMemberServerImageInstancesRequest === undefined || deleteMemberServerImageInstancesRequest === null) {
        throw new Error("Missing the required parameter 'deleteMemberServerImageInstancesRequest' when calling deleteMemberServerImageInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteMemberServerImageInstancesResponse;

      return this.apiClient.callApi(
        '/deleteMemberServerImageInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkInterface operation.
     * @callback module:api/V2Api~deleteNetworkInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteNetworkInterfaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크인터페이스삭제
     * @param {module:model/DeleteNetworkInterfaceRequest} deleteNetworkInterfaceRequest deleteNetworkInterfaceRequest
     * @param {module:api/V2Api~deleteNetworkInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteNetworkInterfaceResponse}
     */
    this.deleteNetworkInterface = function(deleteNetworkInterfaceRequest, callback) {
      var postBody = deleteNetworkInterfaceRequest;

      // verify the required parameter 'deleteNetworkInterfaceRequest' is set
      if (deleteNetworkInterfaceRequest === undefined || deleteNetworkInterfaceRequest === null) {
        throw new Error("Missing the required parameter 'deleteNetworkInterfaceRequest' when calling deleteNetworkInterface");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteNetworkInterfaceResponse;

      return this.apiClient.callApi(
        '/deleteNetworkInterface', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlacementGroup operation.
     * @callback module:api/V2Api~deletePlacementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePlacementGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 물리배치그룹삭제
     * @param {module:model/DeletePlacementGroupRequest} deletePlacementGroupRequest deletePlacementGroupRequest
     * @param {module:api/V2Api~deletePlacementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePlacementGroupResponse}
     */
    this.deletePlacementGroup = function(deletePlacementGroupRequest, callback) {
      var postBody = deletePlacementGroupRequest;

      // verify the required parameter 'deletePlacementGroupRequest' is set
      if (deletePlacementGroupRequest === undefined || deletePlacementGroupRequest === null) {
        throw new Error("Missing the required parameter 'deletePlacementGroupRequest' when calling deletePlacementGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeletePlacementGroupResponse;

      return this.apiClient.callApi(
        '/deletePlacementGroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePublicIpInstance operation.
     * @callback module:api/V2Api~deletePublicIpInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePublicIpInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스삭제
     * @param {module:model/DeletePublicIpInstanceRequest} deletePublicIpInstanceRequest deletePublicIpInstanceRequest
     * @param {module:api/V2Api~deletePublicIpInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePublicIpInstanceResponse}
     */
    this.deletePublicIpInstance = function(deletePublicIpInstanceRequest, callback) {
      var postBody = deletePublicIpInstanceRequest;

      // verify the required parameter 'deletePublicIpInstanceRequest' is set
      if (deletePublicIpInstanceRequest === undefined || deletePublicIpInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deletePublicIpInstanceRequest' when calling deletePublicIpInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeletePublicIpInstanceResponse;

      return this.apiClient.callApi(
        '/deletePublicIpInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the detachBlockStorageInstances operation.
     * @callback module:api/V2Api~detachBlockStorageInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetachBlockStorageInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스할당해제
     * @param {module:model/DetachBlockStorageInstancesRequest} detachBlockStorageInstancesRequest detachBlockStorageInstancesRequest
     * @param {module:api/V2Api~detachBlockStorageInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetachBlockStorageInstancesResponse}
     */
    this.detachBlockStorageInstances = function(detachBlockStorageInstancesRequest, callback) {
      var postBody = detachBlockStorageInstancesRequest;

      // verify the required parameter 'detachBlockStorageInstancesRequest' is set
      if (detachBlockStorageInstancesRequest === undefined || detachBlockStorageInstancesRequest === null) {
        throw new Error("Missing the required parameter 'detachBlockStorageInstancesRequest' when calling detachBlockStorageInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DetachBlockStorageInstancesResponse;

      return this.apiClient.callApi(
        '/detachBlockStorageInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the detachNetworkInterface operation.
     * @callback module:api/V2Api~detachNetworkInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetachNetworkInterfaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크인터페이스할당해제
     * @param {module:model/DetachNetworkInterfaceRequest} detachNetworkInterfaceRequest detachNetworkInterfaceRequest
     * @param {module:api/V2Api~detachNetworkInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetachNetworkInterfaceResponse}
     */
    this.detachNetworkInterface = function(detachNetworkInterfaceRequest, callback) {
      var postBody = detachNetworkInterfaceRequest;

      // verify the required parameter 'detachNetworkInterfaceRequest' is set
      if (detachNetworkInterfaceRequest === undefined || detachNetworkInterfaceRequest === null) {
        throw new Error("Missing the required parameter 'detachNetworkInterfaceRequest' when calling detachNetworkInterface");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DetachNetworkInterfaceResponse;

      return this.apiClient.callApi(
        '/detachNetworkInterface', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociatePublicIpFromServerInstance operation.
     * @callback module:api/V2Api~disassociatePublicIpFromServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociatePublicIpFromServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP를서버인스턴스에서할당해제
     * @param {module:model/DisassociatePublicIpFromServerInstanceRequest} disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest
     * @param {module:api/V2Api~disassociatePublicIpFromServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociatePublicIpFromServerInstanceResponse}
     */
    this.disassociatePublicIpFromServerInstance = function(disassociatePublicIpFromServerInstanceRequest, callback) {
      var postBody = disassociatePublicIpFromServerInstanceRequest;

      // verify the required parameter 'disassociatePublicIpFromServerInstanceRequest' is set
      if (disassociatePublicIpFromServerInstanceRequest === undefined || disassociatePublicIpFromServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'disassociatePublicIpFromServerInstanceRequest' when calling disassociatePublicIpFromServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DisassociatePublicIpFromServerInstanceResponse;

      return this.apiClient.callApi(
        '/disassociatePublicIpFromServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlGroupDetail operation.
     * @callback module:api/V2Api~getAccessControlGroupDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccessControlGroupDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ACG상세조회
     * @param {module:model/GetAccessControlGroupDetailRequest} getAccessControlGroupDetailRequest getAccessControlGroupDetailRequest
     * @param {module:api/V2Api~getAccessControlGroupDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccessControlGroupDetailResponse}
     */
    this.getAccessControlGroupDetail = function(getAccessControlGroupDetailRequest, callback) {
      var postBody = getAccessControlGroupDetailRequest;

      // verify the required parameter 'getAccessControlGroupDetailRequest' is set
      if (getAccessControlGroupDetailRequest === undefined || getAccessControlGroupDetailRequest === null) {
        throw new Error("Missing the required parameter 'getAccessControlGroupDetailRequest' when calling getAccessControlGroupDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupDetailResponse;

      return this.apiClient.callApi(
        '/getAccessControlGroupDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlGroupList operation.
     * @callback module:api/V2Api~getAccessControlGroupListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccessControlGroupListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ACG리스트조회
     * @param {module:model/GetAccessControlGroupListRequest} getAccessControlGroupListRequest getAccessControlGroupListRequest
     * @param {module:api/V2Api~getAccessControlGroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccessControlGroupListResponse}
     */
    this.getAccessControlGroupList = function(getAccessControlGroupListRequest, callback) {
      var postBody = getAccessControlGroupListRequest;

      // verify the required parameter 'getAccessControlGroupListRequest' is set
      if (getAccessControlGroupListRequest === undefined || getAccessControlGroupListRequest === null) {
        throw new Error("Missing the required parameter 'getAccessControlGroupListRequest' when calling getAccessControlGroupList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupListResponse;

      return this.apiClient.callApi(
        '/getAccessControlGroupList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlGroupRuleList operation.
     * @callback module:api/V2Api~getAccessControlGroupRuleListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccessControlGroupRuleListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ACGRule리스트조회
     * @param {module:model/GetAccessControlGroupRuleListRequest} getAccessControlGroupRuleListRequest getAccessControlGroupRuleListRequest
     * @param {module:api/V2Api~getAccessControlGroupRuleListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccessControlGroupRuleListResponse}
     */
    this.getAccessControlGroupRuleList = function(getAccessControlGroupRuleListRequest, callback) {
      var postBody = getAccessControlGroupRuleListRequest;

      // verify the required parameter 'getAccessControlGroupRuleListRequest' is set
      if (getAccessControlGroupRuleListRequest === undefined || getAccessControlGroupRuleListRequest === null) {
        throw new Error("Missing the required parameter 'getAccessControlGroupRuleListRequest' when calling getAccessControlGroupRuleList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupRuleListResponse;

      return this.apiClient.callApi(
        '/getAccessControlGroupRuleList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockStorageInstanceDetail operation.
     * @callback module:api/V2Api~getBlockStorageInstanceDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockStorageInstanceDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스상세조회
     * @param {module:model/GetBlockStorageInstanceDetailRequest} getBlockStorageInstanceDetailRequest getBlockStorageInstanceDetailRequest
     * @param {module:api/V2Api~getBlockStorageInstanceDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockStorageInstanceDetailResponse}
     */
    this.getBlockStorageInstanceDetail = function(getBlockStorageInstanceDetailRequest, callback) {
      var postBody = getBlockStorageInstanceDetailRequest;

      // verify the required parameter 'getBlockStorageInstanceDetailRequest' is set
      if (getBlockStorageInstanceDetailRequest === undefined || getBlockStorageInstanceDetailRequest === null) {
        throw new Error("Missing the required parameter 'getBlockStorageInstanceDetailRequest' when calling getBlockStorageInstanceDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBlockStorageInstanceDetailResponse;

      return this.apiClient.callApi(
        '/getBlockStorageInstanceDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockStorageInstanceList operation.
     * @callback module:api/V2Api~getBlockStorageInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockStorageInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스리스트조회
     * @param {module:model/GetBlockStorageInstanceListRequest} getBlockStorageInstanceListRequest getBlockStorageInstanceListRequest
     * @param {module:api/V2Api~getBlockStorageInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockStorageInstanceListResponse}
     */
    this.getBlockStorageInstanceList = function(getBlockStorageInstanceListRequest, callback) {
      var postBody = getBlockStorageInstanceListRequest;

      // verify the required parameter 'getBlockStorageInstanceListRequest' is set
      if (getBlockStorageInstanceListRequest === undefined || getBlockStorageInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getBlockStorageInstanceListRequest' when calling getBlockStorageInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBlockStorageInstanceListResponse;

      return this.apiClient.callApi(
        '/getBlockStorageInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockStorageSnapshotInstanceDetail operation.
     * @callback module:api/V2Api~getBlockStorageSnapshotInstanceDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockStorageSnapshotInstanceDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지스냅샷인스턴스상세조회
     * @param {module:model/GetBlockStorageSnapshotInstanceDetailRequest} getBlockStorageSnapshotInstanceDetailRequest getBlockStorageSnapshotInstanceDetailRequest
     * @param {module:api/V2Api~getBlockStorageSnapshotInstanceDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockStorageSnapshotInstanceDetailResponse}
     */
    this.getBlockStorageSnapshotInstanceDetail = function(getBlockStorageSnapshotInstanceDetailRequest, callback) {
      var postBody = getBlockStorageSnapshotInstanceDetailRequest;

      // verify the required parameter 'getBlockStorageSnapshotInstanceDetailRequest' is set
      if (getBlockStorageSnapshotInstanceDetailRequest === undefined || getBlockStorageSnapshotInstanceDetailRequest === null) {
        throw new Error("Missing the required parameter 'getBlockStorageSnapshotInstanceDetailRequest' when calling getBlockStorageSnapshotInstanceDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBlockStorageSnapshotInstanceDetailResponse;

      return this.apiClient.callApi(
        '/getBlockStorageSnapshotInstanceDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockStorageSnapshotInstanceList operation.
     * @callback module:api/V2Api~getBlockStorageSnapshotInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockStorageSnapshotInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지스냅샷인스턴스리스트조회
     * @param {module:model/GetBlockStorageSnapshotInstanceListRequest} getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest
     * @param {module:api/V2Api~getBlockStorageSnapshotInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockStorageSnapshotInstanceListResponse}
     */
    this.getBlockStorageSnapshotInstanceList = function(getBlockStorageSnapshotInstanceListRequest, callback) {
      var postBody = getBlockStorageSnapshotInstanceListRequest;

      // verify the required parameter 'getBlockStorageSnapshotInstanceListRequest' is set
      if (getBlockStorageSnapshotInstanceListRequest === undefined || getBlockStorageSnapshotInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getBlockStorageSnapshotInstanceListRequest' when calling getBlockStorageSnapshotInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBlockStorageSnapshotInstanceListResponse;

      return this.apiClient.callApi(
        '/getBlockStorageSnapshotInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInitScriptDetail operation.
     * @callback module:api/V2Api~getInitScriptDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInitScriptDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 초기화스크립트상세조회
     * @param {module:model/GetInitScriptDetailRequest} getInitScriptDetailRequest getInitScriptDetailRequest
     * @param {module:api/V2Api~getInitScriptDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInitScriptDetailResponse}
     */
    this.getInitScriptDetail = function(getInitScriptDetailRequest, callback) {
      var postBody = getInitScriptDetailRequest;

      // verify the required parameter 'getInitScriptDetailRequest' is set
      if (getInitScriptDetailRequest === undefined || getInitScriptDetailRequest === null) {
        throw new Error("Missing the required parameter 'getInitScriptDetailRequest' when calling getInitScriptDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetInitScriptDetailResponse;

      return this.apiClient.callApi(
        '/getInitScriptDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInitScriptList operation.
     * @callback module:api/V2Api~getInitScriptListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInitScriptListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 초기화스크립트리스트조회
     * @param {module:model/GetInitScriptListRequest} getInitScriptListRequest getInitScriptListRequest
     * @param {module:api/V2Api~getInitScriptListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInitScriptListResponse}
     */
    this.getInitScriptList = function(getInitScriptListRequest, callback) {
      var postBody = getInitScriptListRequest;

      // verify the required parameter 'getInitScriptListRequest' is set
      if (getInitScriptListRequest === undefined || getInitScriptListRequest === null) {
        throw new Error("Missing the required parameter 'getInitScriptListRequest' when calling getInitScriptList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetInitScriptListResponse;

      return this.apiClient.callApi(
        '/getInitScriptList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoginKeyList operation.
     * @callback module:api/V2Api~getLoginKeyListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLoginKeyListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키리스트조회
     * @param {module:model/GetLoginKeyListRequest} getLoginKeyListRequest getLoginKeyListRequest
     * @param {module:api/V2Api~getLoginKeyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLoginKeyListResponse}
     */
    this.getLoginKeyList = function(getLoginKeyListRequest, callback) {
      var postBody = getLoginKeyListRequest;

      // verify the required parameter 'getLoginKeyListRequest' is set
      if (getLoginKeyListRequest === undefined || getLoginKeyListRequest === null) {
        throw new Error("Missing the required parameter 'getLoginKeyListRequest' when calling getLoginKeyList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetLoginKeyListResponse;

      return this.apiClient.callApi(
        '/getLoginKeyList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMemberServerImageInstanceDetail operation.
     * @callback module:api/V2Api~getMemberServerImageInstanceDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMemberServerImageInstanceDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지인스턴스상세조회
     * @param {module:model/GetMemberServerImageInstanceDetailRequest} getMemberServerImageInstanceDetailRequest getMemberServerImageInstanceDetailRequest
     * @param {module:api/V2Api~getMemberServerImageInstanceDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMemberServerImageInstanceDetailResponse}
     */
    this.getMemberServerImageInstanceDetail = function(getMemberServerImageInstanceDetailRequest, callback) {
      var postBody = getMemberServerImageInstanceDetailRequest;

      // verify the required parameter 'getMemberServerImageInstanceDetailRequest' is set
      if (getMemberServerImageInstanceDetailRequest === undefined || getMemberServerImageInstanceDetailRequest === null) {
        throw new Error("Missing the required parameter 'getMemberServerImageInstanceDetailRequest' when calling getMemberServerImageInstanceDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetMemberServerImageInstanceDetailResponse;

      return this.apiClient.callApi(
        '/getMemberServerImageInstanceDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMemberServerImageInstanceList operation.
     * @callback module:api/V2Api~getMemberServerImageInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMemberServerImageInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지인스턴스리스트조회
     * @param {module:model/GetMemberServerImageInstanceListRequest} getMemberServerImageInstanceListRequest getMemberServerImageInstanceListRequest
     * @param {module:api/V2Api~getMemberServerImageInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMemberServerImageInstanceListResponse}
     */
    this.getMemberServerImageInstanceList = function(getMemberServerImageInstanceListRequest, callback) {
      var postBody = getMemberServerImageInstanceListRequest;

      // verify the required parameter 'getMemberServerImageInstanceListRequest' is set
      if (getMemberServerImageInstanceListRequest === undefined || getMemberServerImageInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getMemberServerImageInstanceListRequest' when calling getMemberServerImageInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetMemberServerImageInstanceListResponse;

      return this.apiClient.callApi(
        '/getMemberServerImageInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkInterfaceDetail operation.
     * @callback module:api/V2Api~getNetworkInterfaceDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkInterfaceDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크인터페이스상세조회
     * @param {module:model/GetNetworkInterfaceDetailRequest} getNetworkInterfaceDetailRequest getNetworkInterfaceDetailRequest
     * @param {module:api/V2Api~getNetworkInterfaceDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkInterfaceDetailResponse}
     */
    this.getNetworkInterfaceDetail = function(getNetworkInterfaceDetailRequest, callback) {
      var postBody = getNetworkInterfaceDetailRequest;

      // verify the required parameter 'getNetworkInterfaceDetailRequest' is set
      if (getNetworkInterfaceDetailRequest === undefined || getNetworkInterfaceDetailRequest === null) {
        throw new Error("Missing the required parameter 'getNetworkInterfaceDetailRequest' when calling getNetworkInterfaceDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetNetworkInterfaceDetailResponse;

      return this.apiClient.callApi(
        '/getNetworkInterfaceDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkInterfaceList operation.
     * @callback module:api/V2Api~getNetworkInterfaceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkInterfaceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크인터페이스리스트조회
     * @param {module:model/GetNetworkInterfaceListRequest} getNetworkInterfaceListRequest getNetworkInterfaceListRequest
     * @param {module:api/V2Api~getNetworkInterfaceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkInterfaceListResponse}
     */
    this.getNetworkInterfaceList = function(getNetworkInterfaceListRequest, callback) {
      var postBody = getNetworkInterfaceListRequest;

      // verify the required parameter 'getNetworkInterfaceListRequest' is set
      if (getNetworkInterfaceListRequest === undefined || getNetworkInterfaceListRequest === null) {
        throw new Error("Missing the required parameter 'getNetworkInterfaceListRequest' when calling getNetworkInterfaceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetNetworkInterfaceListResponse;

      return this.apiClient.callApi(
        '/getNetworkInterfaceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlacementGroupDetail operation.
     * @callback module:api/V2Api~getPlacementGroupDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPlacementGroupDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 물리배치그룹상세조회
     * @param {module:model/GetPlacementGroupDetailRequest} getPlacementGroupDetailRequest getPlacementGroupDetailRequest
     * @param {module:api/V2Api~getPlacementGroupDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPlacementGroupDetailResponse}
     */
    this.getPlacementGroupDetail = function(getPlacementGroupDetailRequest, callback) {
      var postBody = getPlacementGroupDetailRequest;

      // verify the required parameter 'getPlacementGroupDetailRequest' is set
      if (getPlacementGroupDetailRequest === undefined || getPlacementGroupDetailRequest === null) {
        throw new Error("Missing the required parameter 'getPlacementGroupDetailRequest' when calling getPlacementGroupDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPlacementGroupDetailResponse;

      return this.apiClient.callApi(
        '/getPlacementGroupDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlacementGroupList operation.
     * @callback module:api/V2Api~getPlacementGroupListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPlacementGroupListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 물리배치그룹리스트조회
     * @param {module:model/GetPlacementGroupListRequest} getPlacementGroupListRequest getPlacementGroupListRequest
     * @param {module:api/V2Api~getPlacementGroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPlacementGroupListResponse}
     */
    this.getPlacementGroupList = function(getPlacementGroupListRequest, callback) {
      var postBody = getPlacementGroupListRequest;

      // verify the required parameter 'getPlacementGroupListRequest' is set
      if (getPlacementGroupListRequest === undefined || getPlacementGroupListRequest === null) {
        throw new Error("Missing the required parameter 'getPlacementGroupListRequest' when calling getPlacementGroupList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPlacementGroupListResponse;

      return this.apiClient.callApi(
        '/getPlacementGroupList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicIpInstanceDetail operation.
     * @callback module:api/V2Api~getPublicIpInstanceDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicIpInstanceDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스상세조회
     * @param {module:model/GetPublicIpInstanceDetailRequest} getPublicIpInstanceDetailRequest getPublicIpInstanceDetailRequest
     * @param {module:api/V2Api~getPublicIpInstanceDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicIpInstanceDetailResponse}
     */
    this.getPublicIpInstanceDetail = function(getPublicIpInstanceDetailRequest, callback) {
      var postBody = getPublicIpInstanceDetailRequest;

      // verify the required parameter 'getPublicIpInstanceDetailRequest' is set
      if (getPublicIpInstanceDetailRequest === undefined || getPublicIpInstanceDetailRequest === null) {
        throw new Error("Missing the required parameter 'getPublicIpInstanceDetailRequest' when calling getPublicIpInstanceDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPublicIpInstanceDetailResponse;

      return this.apiClient.callApi(
        '/getPublicIpInstanceDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicIpInstanceList operation.
     * @callback module:api/V2Api~getPublicIpInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicIpInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스리스트조회
     * @param {module:model/GetPublicIpInstanceListRequest} getPublicIpInstanceListRequest getPublicIpInstanceListRequest
     * @param {module:api/V2Api~getPublicIpInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicIpInstanceListResponse}
     */
    this.getPublicIpInstanceList = function(getPublicIpInstanceListRequest, callback) {
      var postBody = getPublicIpInstanceListRequest;

      // verify the required parameter 'getPublicIpInstanceListRequest' is set
      if (getPublicIpInstanceListRequest === undefined || getPublicIpInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getPublicIpInstanceListRequest' when calling getPublicIpInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPublicIpInstanceListResponse;

      return this.apiClient.callApi(
        '/getPublicIpInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicIpTargetServerInstanceList operation.
     * @callback module:api/V2Api~getPublicIpTargetServerInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicIpTargetServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP할당가능서버인스턴스리스트조회
     * @param {module:model/GetPublicIpTargetServerInstanceListRequest} getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest
     * @param {module:api/V2Api~getPublicIpTargetServerInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicIpTargetServerInstanceListResponse}
     */
    this.getPublicIpTargetServerInstanceList = function(getPublicIpTargetServerInstanceListRequest, callback) {
      var postBody = getPublicIpTargetServerInstanceListRequest;

      // verify the required parameter 'getPublicIpTargetServerInstanceListRequest' is set
      if (getPublicIpTargetServerInstanceListRequest === undefined || getPublicIpTargetServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getPublicIpTargetServerInstanceListRequest' when calling getPublicIpTargetServerInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPublicIpTargetServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getPublicIpTargetServerInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegionList operation.
     * @callback module:api/V2Api~getRegionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRegionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * REGION리스트조회
     * @param {module:model/GetRegionListRequest} getRegionListRequest getRegionListRequest
     * @param {module:api/V2Api~getRegionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRegionListResponse}
     */
    this.getRegionList = function(getRegionListRequest, callback) {
      var postBody = getRegionListRequest;

      // verify the required parameter 'getRegionListRequest' is set
      if (getRegionListRequest === undefined || getRegionListRequest === null) {
        throw new Error("Missing the required parameter 'getRegionListRequest' when calling getRegionList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRegionListResponse;

      return this.apiClient.callApi(
        '/getRegionList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRootPassword operation.
     * @callback module:api/V2Api~getRootPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRootPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스의루트패스워드조회
     * @param {module:model/GetRootPasswordRequest} getRootPasswordRequest getRootPasswordRequest
     * @param {module:api/V2Api~getRootPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRootPasswordResponse}
     */
    this.getRootPassword = function(getRootPasswordRequest, callback) {
      var postBody = getRootPasswordRequest;

      // verify the required parameter 'getRootPasswordRequest' is set
      if (getRootPasswordRequest === undefined || getRootPasswordRequest === null) {
        throw new Error("Missing the required parameter 'getRootPasswordRequest' when calling getRootPassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRootPasswordResponse;

      return this.apiClient.callApi(
        '/getRootPassword', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRootPasswordServerInstanceList operation.
     * @callback module:api/V2Api~getRootPasswordServerInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRootPasswordServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스리스트의루트패스워드조회
     * @param {module:model/GetRootPasswordServerInstanceListRequest} getRootPasswordServerInstanceListRequest getRootPasswordServerInstanceListRequest
     * @param {module:api/V2Api~getRootPasswordServerInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRootPasswordServerInstanceListResponse}
     */
    this.getRootPasswordServerInstanceList = function(getRootPasswordServerInstanceListRequest, callback) {
      var postBody = getRootPasswordServerInstanceListRequest;

      // verify the required parameter 'getRootPasswordServerInstanceListRequest' is set
      if (getRootPasswordServerInstanceListRequest === undefined || getRootPasswordServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getRootPasswordServerInstanceListRequest' when calling getRootPasswordServerInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRootPasswordServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getRootPasswordServerInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerImageProductList operation.
     * @callback module:api/V2Api~getServerImageProductListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServerImageProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버이미지상품리스트조회
     * @param {module:model/GetServerImageProductListRequest} getServerImageProductListRequest getServerImageProductListRequest
     * @param {module:api/V2Api~getServerImageProductListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServerImageProductListResponse}
     */
    this.getServerImageProductList = function(getServerImageProductListRequest, callback) {
      var postBody = getServerImageProductListRequest;

      // verify the required parameter 'getServerImageProductListRequest' is set
      if (getServerImageProductListRequest === undefined || getServerImageProductListRequest === null) {
        throw new Error("Missing the required parameter 'getServerImageProductListRequest' when calling getServerImageProductList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerImageProductListResponse;

      return this.apiClient.callApi(
        '/getServerImageProductList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerInstanceDetail operation.
     * @callback module:api/V2Api~getServerInstanceDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServerInstanceDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스상세조회
     * @param {module:model/GetServerInstanceDetailRequest} getServerInstanceDetailRequest getServerInstanceDetailRequest
     * @param {module:api/V2Api~getServerInstanceDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServerInstanceDetailResponse}
     */
    this.getServerInstanceDetail = function(getServerInstanceDetailRequest, callback) {
      var postBody = getServerInstanceDetailRequest;

      // verify the required parameter 'getServerInstanceDetailRequest' is set
      if (getServerInstanceDetailRequest === undefined || getServerInstanceDetailRequest === null) {
        throw new Error("Missing the required parameter 'getServerInstanceDetailRequest' when calling getServerInstanceDetail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerInstanceDetailResponse;

      return this.apiClient.callApi(
        '/getServerInstanceDetail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerInstanceList operation.
     * @callback module:api/V2Api~getServerInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스리스트조회
     * @param {module:model/GetServerInstanceListRequest} getServerInstanceListRequest getServerInstanceListRequest
     * @param {module:api/V2Api~getServerInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServerInstanceListResponse}
     */
    this.getServerInstanceList = function(getServerInstanceListRequest, callback) {
      var postBody = getServerInstanceListRequest;

      // verify the required parameter 'getServerInstanceListRequest' is set
      if (getServerInstanceListRequest === undefined || getServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getServerInstanceListRequest' when calling getServerInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getServerInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerProductList operation.
     * @callback module:api/V2Api~getServerProductListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServerProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버상품리스트조회
     * @param {module:model/GetServerProductListRequest} getServerProductListRequest getServerProductListRequest
     * @param {module:api/V2Api~getServerProductListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServerProductListResponse}
     */
    this.getServerProductList = function(getServerProductListRequest, callback) {
      var postBody = getServerProductListRequest;

      // verify the required parameter 'getServerProductListRequest' is set
      if (getServerProductListRequest === undefined || getServerProductListRequest === null) {
        throw new Error("Missing the required parameter 'getServerProductListRequest' when calling getServerProductList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerProductListResponse;

      return this.apiClient.callApi(
        '/getServerProductList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getZoneList operation.
     * @callback module:api/V2Api~getZoneListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetZoneListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ZONE리스트조회
     * @param {module:model/GetZoneListRequest} getZoneListRequest getZoneListRequest
     * @param {module:api/V2Api~getZoneListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetZoneListResponse}
     */
    this.getZoneList = function(getZoneListRequest, callback) {
      var postBody = getZoneListRequest;

      // verify the required parameter 'getZoneListRequest' is set
      if (getZoneListRequest === undefined || getZoneListRequest === null) {
        throw new Error("Missing the required parameter 'getZoneListRequest' when calling getZoneList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetZoneListResponse;

      return this.apiClient.callApi(
        '/getZoneList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importLoginKey operation.
     * @callback module:api/V2Api~importLoginKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportLoginKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 사용자가생성한로그인키import
     * @param {module:model/ImportLoginKeyRequest} importLoginKeyRequest importLoginKeyRequest
     * @param {module:api/V2Api~importLoginKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportLoginKeyResponse}
     */
    this.importLoginKey = function(importLoginKeyRequest, callback) {
      var postBody = importLoginKeyRequest;

      // verify the required parameter 'importLoginKeyRequest' is set
      if (importLoginKeyRequest === undefined || importLoginKeyRequest === null) {
        throw new Error("Missing the required parameter 'importLoginKeyRequest' when calling importLoginKey");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = ImportLoginKeyResponse;

      return this.apiClient.callApi(
        '/importLoginKey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootServerInstances operation.
     * @callback module:api/V2Api~rebootServerInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebootServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스재시작
     * @param {module:model/RebootServerInstancesRequest} rebootServerInstancesRequest rebootServerInstancesRequest
     * @param {module:api/V2Api~rebootServerInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebootServerInstancesResponse}
     */
    this.rebootServerInstances = function(rebootServerInstancesRequest, callback) {
      var postBody = rebootServerInstancesRequest;

      // verify the required parameter 'rebootServerInstancesRequest' is set
      if (rebootServerInstancesRequest === undefined || rebootServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'rebootServerInstancesRequest' when calling rebootServerInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RebootServerInstancesResponse;

      return this.apiClient.callApi(
        '/rebootServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAccessControlGroupInboundRule operation.
     * @callback module:api/V2Api~removeAccessControlGroupInboundRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveAccessControlGroupInboundRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ACGInboundRule삭제
     * @param {module:model/RemoveAccessControlGroupInboundRuleRequest} removeAccessControlGroupInboundRuleRequest removeAccessControlGroupInboundRuleRequest
     * @param {module:api/V2Api~removeAccessControlGroupInboundRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveAccessControlGroupInboundRuleResponse}
     */
    this.removeAccessControlGroupInboundRule = function(removeAccessControlGroupInboundRuleRequest, callback) {
      var postBody = removeAccessControlGroupInboundRuleRequest;

      // verify the required parameter 'removeAccessControlGroupInboundRuleRequest' is set
      if (removeAccessControlGroupInboundRuleRequest === undefined || removeAccessControlGroupInboundRuleRequest === null) {
        throw new Error("Missing the required parameter 'removeAccessControlGroupInboundRuleRequest' when calling removeAccessControlGroupInboundRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RemoveAccessControlGroupInboundRuleResponse;

      return this.apiClient.callApi(
        '/removeAccessControlGroupInboundRule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAccessControlGroupOutboundRule operation.
     * @callback module:api/V2Api~removeAccessControlGroupOutboundRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveAccessControlGroupOutboundRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ACGOutboundRule삭제
     * @param {module:model/RemoveAccessControlGroupOutboundRuleRequest} removeAccessControlGroupOutboundRuleRequest removeAccessControlGroupOutboundRuleRequest
     * @param {module:api/V2Api~removeAccessControlGroupOutboundRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveAccessControlGroupOutboundRuleResponse}
     */
    this.removeAccessControlGroupOutboundRule = function(removeAccessControlGroupOutboundRuleRequest, callback) {
      var postBody = removeAccessControlGroupOutboundRuleRequest;

      // verify the required parameter 'removeAccessControlGroupOutboundRuleRequest' is set
      if (removeAccessControlGroupOutboundRuleRequest === undefined || removeAccessControlGroupOutboundRuleRequest === null) {
        throw new Error("Missing the required parameter 'removeAccessControlGroupOutboundRuleRequest' when calling removeAccessControlGroupOutboundRule");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RemoveAccessControlGroupOutboundRuleResponse;

      return this.apiClient.callApi(
        '/removeAccessControlGroupOutboundRule', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkInterfaceAccessControlGroup operation.
     * @callback module:api/V2Api~removeNetworkInterfaceAccessControlGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveNetworkInterfaceAccessControlGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 네트워크인터페이스의ACG제거
     * @param {module:model/RemoveNetworkInterfaceAccessControlGroupRequest} removeNetworkInterfaceAccessControlGroupRequest removeNetworkInterfaceAccessControlGroupRequest
     * @param {module:api/V2Api~removeNetworkInterfaceAccessControlGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveNetworkInterfaceAccessControlGroupResponse}
     */
    this.removeNetworkInterfaceAccessControlGroup = function(removeNetworkInterfaceAccessControlGroupRequest, callback) {
      var postBody = removeNetworkInterfaceAccessControlGroupRequest;

      // verify the required parameter 'removeNetworkInterfaceAccessControlGroupRequest' is set
      if (removeNetworkInterfaceAccessControlGroupRequest === undefined || removeNetworkInterfaceAccessControlGroupRequest === null) {
        throw new Error("Missing the required parameter 'removeNetworkInterfaceAccessControlGroupRequest' when calling removeNetworkInterfaceAccessControlGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RemoveNetworkInterfaceAccessControlGroupResponse;

      return this.apiClient.callApi(
        '/removeNetworkInterfaceAccessControlGroup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removePlacementGroupServerInstance operation.
     * @callback module:api/V2Api~removePlacementGroupServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemovePlacementGroupServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 물리배치그룹에서서버인스턴스제거
     * @param {module:model/RemovePlacementGroupServerInstanceRequest} removePlacementGroupServerInstanceRequest removePlacementGroupServerInstanceRequest
     * @param {module:api/V2Api~removePlacementGroupServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemovePlacementGroupServerInstanceResponse}
     */
    this.removePlacementGroupServerInstance = function(removePlacementGroupServerInstanceRequest, callback) {
      var postBody = removePlacementGroupServerInstanceRequest;

      // verify the required parameter 'removePlacementGroupServerInstanceRequest' is set
      if (removePlacementGroupServerInstanceRequest === undefined || removePlacementGroupServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'removePlacementGroupServerInstanceRequest' when calling removePlacementGroupServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RemovePlacementGroupServerInstanceResponse;

      return this.apiClient.callApi(
        '/removePlacementGroupServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startServerInstances operation.
     * @callback module:api/V2Api~startServerInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스시작
     * @param {module:model/StartServerInstancesRequest} startServerInstancesRequest startServerInstancesRequest
     * @param {module:api/V2Api~startServerInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartServerInstancesResponse}
     */
    this.startServerInstances = function(startServerInstancesRequest, callback) {
      var postBody = startServerInstancesRequest;

      // verify the required parameter 'startServerInstancesRequest' is set
      if (startServerInstancesRequest === undefined || startServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'startServerInstancesRequest' when calling startServerInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = StartServerInstancesResponse;

      return this.apiClient.callApi(
        '/startServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopServerInstances operation.
     * @callback module:api/V2Api~stopServerInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스정지
     * @param {module:model/StopServerInstancesRequest} stopServerInstancesRequest stopServerInstancesRequest
     * @param {module:api/V2Api~stopServerInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopServerInstancesResponse}
     */
    this.stopServerInstances = function(stopServerInstancesRequest, callback) {
      var postBody = stopServerInstancesRequest;

      // verify the required parameter 'stopServerInstancesRequest' is set
      if (stopServerInstancesRequest === undefined || stopServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'stopServerInstancesRequest' when calling stopServerInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = StopServerInstancesResponse;

      return this.apiClient.callApi(
        '/stopServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateServerInstances operation.
     * @callback module:api/V2Api~terminateServerInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerminateServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스반납
     * @param {module:model/TerminateServerInstancesRequest} terminateServerInstancesRequest terminateServerInstancesRequest
     * @param {module:api/V2Api~terminateServerInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerminateServerInstancesResponse}
     */
    this.terminateServerInstances = function(terminateServerInstancesRequest, callback) {
      var postBody = terminateServerInstancesRequest;

      // verify the required parameter 'terminateServerInstancesRequest' is set
      if (terminateServerInstancesRequest === undefined || terminateServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'terminateServerInstancesRequest' when calling terminateServerInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = TerminateServerInstancesResponse;

      return this.apiClient.callApi(
        '/terminateServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
