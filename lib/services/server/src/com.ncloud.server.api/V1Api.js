/*
* server
* <br/>https://ncloud.beta-apigw.ntruss.com/server/v1
*
* OpenAPI spec version: 2018-05-30T06:14:49Z
*
* NBP corp.
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'com.ncloud.server.model/AccessControlGroupRequest', 'com.ncloud.server.model/AddPortForwardingRulesResponse', 'com.ncloud.server.model/AssociatePublicIpWithServerInstanceRequest', 'com.ncloud.server.model/AssociatePublicIpWithServerInstanceResponse', 'com.ncloud.server.model/BlockStorageInstanceNoList', 'com.ncloud.server.model/BlockStorageInstanceRequest', 'com.ncloud.server.model/ChangeNasVolumeSizeRequest', 'com.ncloud.server.model/ChangeServerInstanceSpecRequest', 'com.ncloud.server.model/ChangeServerInstanceSpecResponse', 'com.ncloud.server.model/CreateBlockStorageInstanceRequest', 'com.ncloud.server.model/CreateBlockStorageInstanceResponse', 'com.ncloud.server.model/CreateLoginKeyRequest', 'com.ncloud.server.model/CreateLoginKeyResponse', 'com.ncloud.server.model/CreateMemberServerImageRequest', 'com.ncloud.server.model/CreateMemberServerImageResponse', 'com.ncloud.server.model/CreateNasVolumeInstanceRequest', 'com.ncloud.server.model/CreatePublicIpInstanceRequest', 'com.ncloud.server.model/CreatePublicIpInstanceResponse', 'com.ncloud.server.model/CreateServerInstancesRequest', 'com.ncloud.server.model/CreateServerInstancesResponse', 'com.ncloud.server.model/DeleteBlockStorageInstancesResponse', 'com.ncloud.server.model/DeleteLoginKeyRequest', 'com.ncloud.server.model/DeleteLoginKeyResponse', 'com.ncloud.server.model/DeleteMemberServerImagesResponse', 'com.ncloud.server.model/DeleteNasVolumeInstanceRequest', 'com.ncloud.server.model/DeletePortForwardingRulesResponse', 'com.ncloud.server.model/DeletePublicIpInstancesResponse', 'com.ncloud.server.model/DisassociatePublicIpFromServerInstanceRequest', 'com.ncloud.server.model/DisassociatePublicIpFromServerInstanceResponse', 'com.ncloud.server.model/GetAccessControlGroupListResponse', 'com.ncloud.server.model/GetAccessControlGroupServerInstanceListRequest', 'com.ncloud.server.model/GetAccessControlGroupServerInstanceListResponse', 'com.ncloud.server.model/GetAccessControlRuleListRequest', 'com.ncloud.server.model/GetBlockStorageInstanceListResponse', 'com.ncloud.server.model/GetBlockStorageSnapshotInstanceListRequest', 'com.ncloud.server.model/GetBlockStorageSnapshotInstanceListResponse', 'com.ncloud.server.model/GetLoginKeyListRequest', 'com.ncloud.server.model/GetLoginKeyListResponse', 'com.ncloud.server.model/GetMemberServerImageListResponse', 'com.ncloud.server.model/GetNasVolumeInstanceRatingListRequest', 'com.ncloud.server.model/GetPortForwardingRuleListRequest', 'com.ncloud.server.model/GetPortForwardingRuleListResponse', 'com.ncloud.server.model/GetPublicIpInstanceListResponse', 'com.ncloud.server.model/GetPublicIpTargetServerInstanceListRequest', 'com.ncloud.server.model/GetPublicIpTargetServerInstanceListResponse', 'com.ncloud.server.model/GetRaidListRequest', 'com.ncloud.server.model/GetRaidListResponse', 'com.ncloud.server.model/GetRegionListRequest', 'com.ncloud.server.model/GetRegionListResponse', 'com.ncloud.server.model/GetRootPasswordRequest', 'com.ncloud.server.model/GetRootPasswordResponse', 'com.ncloud.server.model/GetServerImageProductListRequest', 'com.ncloud.server.model/GetServerImageProductListResponse', 'com.ncloud.server.model/GetServerInstanceListRequest', 'com.ncloud.server.model/GetServerInstanceListResponse', 'com.ncloud.server.model/GetServerProductListRequest', 'com.ncloud.server.model/GetServerProductListResponse', 'com.ncloud.server.model/GetZoneListRequest', 'com.ncloud.server.model/GetZoneListResponse', 'com.ncloud.server.model/MemberServerImageNoList', 'com.ncloud.server.model/MemberServerImageRequest', 'com.ncloud.server.model/NasVolumeAccessControl', 'com.ncloud.server.model/NasVolumeInstanceListRequest', 'com.ncloud.server.model/NasVolumeInstanceListResponse', 'com.ncloud.server.model/NasVolumeInstanceRatingListResponse', 'com.ncloud.server.model/PortForwardingRuleRequest', 'com.ncloud.server.model/PublicIpInstanceList', 'com.ncloud.server.model/PublicIpInstanceNoList', 'com.ncloud.server.model/RebootServerInstancesResponse', 'com.ncloud.server.model/RecreateServerInstanceRequest', 'com.ncloud.server.model/RecreateServerInstanceResponse', 'com.ncloud.server.model/ServerInstanceNoList', 'com.ncloud.server.model/StartServerInstancesResponse', 'com.ncloud.server.model/StopServerInstancesResponse', 'com.ncloud.server.model/TerminateServerInstancesResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.ncloud.server.model/AccessControlGroupRequest'), require('../com.ncloud.server.model/AddPortForwardingRulesResponse'), require('../com.ncloud.server.model/AssociatePublicIpWithServerInstanceRequest'), require('../com.ncloud.server.model/AssociatePublicIpWithServerInstanceResponse'), require('../com.ncloud.server.model/BlockStorageInstanceNoList'), require('../com.ncloud.server.model/BlockStorageInstanceRequest'), require('../com.ncloud.server.model/ChangeNasVolumeSizeRequest'), require('../com.ncloud.server.model/ChangeServerInstanceSpecRequest'), require('../com.ncloud.server.model/ChangeServerInstanceSpecResponse'), require('../com.ncloud.server.model/CreateBlockStorageInstanceRequest'), require('../com.ncloud.server.model/CreateBlockStorageInstanceResponse'), require('../com.ncloud.server.model/CreateLoginKeyRequest'), require('../com.ncloud.server.model/CreateLoginKeyResponse'), require('../com.ncloud.server.model/CreateMemberServerImageRequest'), require('../com.ncloud.server.model/CreateMemberServerImageResponse'), require('../com.ncloud.server.model/CreateNasVolumeInstanceRequest'), require('../com.ncloud.server.model/CreatePublicIpInstanceRequest'), require('../com.ncloud.server.model/CreatePublicIpInstanceResponse'), require('../com.ncloud.server.model/CreateServerInstancesRequest'), require('../com.ncloud.server.model/CreateServerInstancesResponse'), require('../com.ncloud.server.model/DeleteBlockStorageInstancesResponse'), require('../com.ncloud.server.model/DeleteLoginKeyRequest'), require('../com.ncloud.server.model/DeleteLoginKeyResponse'), require('../com.ncloud.server.model/DeleteMemberServerImagesResponse'), require('../com.ncloud.server.model/DeleteNasVolumeInstanceRequest'), require('../com.ncloud.server.model/DeletePortForwardingRulesResponse'), require('../com.ncloud.server.model/DeletePublicIpInstancesResponse'), require('../com.ncloud.server.model/DisassociatePublicIpFromServerInstanceRequest'), require('../com.ncloud.server.model/DisassociatePublicIpFromServerInstanceResponse'), require('../com.ncloud.server.model/GetAccessControlGroupListResponse'), require('../com.ncloud.server.model/GetAccessControlGroupServerInstanceListRequest'), require('../com.ncloud.server.model/GetAccessControlGroupServerInstanceListResponse'), require('../com.ncloud.server.model/GetAccessControlRuleListRequest'), require('../com.ncloud.server.model/GetBlockStorageInstanceListResponse'), require('../com.ncloud.server.model/GetBlockStorageSnapshotInstanceListRequest'), require('../com.ncloud.server.model/GetBlockStorageSnapshotInstanceListResponse'), require('../com.ncloud.server.model/GetLoginKeyListRequest'), require('../com.ncloud.server.model/GetLoginKeyListResponse'), require('../com.ncloud.server.model/GetMemberServerImageListResponse'), require('../com.ncloud.server.model/GetNasVolumeInstanceRatingListRequest'), require('../com.ncloud.server.model/GetPortForwardingRuleListRequest'), require('../com.ncloud.server.model/GetPortForwardingRuleListResponse'), require('../com.ncloud.server.model/GetPublicIpInstanceListResponse'), require('../com.ncloud.server.model/GetPublicIpTargetServerInstanceListRequest'), require('../com.ncloud.server.model/GetPublicIpTargetServerInstanceListResponse'), require('../com.ncloud.server.model/GetRaidListRequest'), require('../com.ncloud.server.model/GetRaidListResponse'), require('../com.ncloud.server.model/GetRegionListRequest'), require('../com.ncloud.server.model/GetRegionListResponse'), require('../com.ncloud.server.model/GetRootPasswordRequest'), require('../com.ncloud.server.model/GetRootPasswordResponse'), require('../com.ncloud.server.model/GetServerImageProductListRequest'), require('../com.ncloud.server.model/GetServerImageProductListResponse'), require('../com.ncloud.server.model/GetServerInstanceListRequest'), require('../com.ncloud.server.model/GetServerInstanceListResponse'), require('../com.ncloud.server.model/GetServerProductListRequest'), require('../com.ncloud.server.model/GetServerProductListResponse'), require('../com.ncloud.server.model/GetZoneListRequest'), require('../com.ncloud.server.model/GetZoneListResponse'), require('../com.ncloud.server.model/MemberServerImageNoList'), require('../com.ncloud.server.model/MemberServerImageRequest'), require('../com.ncloud.server.model/NasVolumeAccessControl'), require('../com.ncloud.server.model/NasVolumeInstanceListRequest'), require('../com.ncloud.server.model/NasVolumeInstanceListResponse'), require('../com.ncloud.server.model/NasVolumeInstanceRatingListResponse'), require('../com.ncloud.server.model/PortForwardingRuleRequest'), require('../com.ncloud.server.model/PublicIpInstanceList'), require('../com.ncloud.server.model/PublicIpInstanceNoList'), require('../com.ncloud.server.model/RebootServerInstancesResponse'), require('../com.ncloud.server.model/RecreateServerInstanceRequest'), require('../com.ncloud.server.model/RecreateServerInstanceResponse'), require('../com.ncloud.server.model/ServerInstanceNoList'), require('../com.ncloud.server.model/StartServerInstancesResponse'), require('../com.ncloud.server.model/StopServerInstancesResponse'), require('../com.ncloud.server.model/TerminateServerInstancesResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Server) {
      root.Server = {};
    }
    root.Server.V1Api = factory(root.Server.ApiClient, root.Server.AccessControlGroupRequest, root.Server.AddPortForwardingRulesResponse, root.Server.AssociatePublicIpWithServerInstanceRequest, root.Server.AssociatePublicIpWithServerInstanceResponse, root.Server.BlockStorageInstanceNoList, root.Server.BlockStorageInstanceRequest, root.Server.ChangeNasVolumeSizeRequest, root.Server.ChangeServerInstanceSpecRequest, root.Server.ChangeServerInstanceSpecResponse, root.Server.CreateBlockStorageInstanceRequest, root.Server.CreateBlockStorageInstanceResponse, root.Server.CreateLoginKeyRequest, root.Server.CreateLoginKeyResponse, root.Server.CreateMemberServerImageRequest, root.Server.CreateMemberServerImageResponse, root.Server.CreateNasVolumeInstanceRequest, root.Server.CreatePublicIpInstanceRequest, root.Server.CreatePublicIpInstanceResponse, root.Server.CreateServerInstancesRequest, root.Server.CreateServerInstancesResponse, root.Server.DeleteBlockStorageInstancesResponse, root.Server.DeleteLoginKeyRequest, root.Server.DeleteLoginKeyResponse, root.Server.DeleteMemberServerImagesResponse, root.Server.DeleteNasVolumeInstanceRequest, root.Server.DeletePortForwardingRulesResponse, root.Server.DeletePublicIpInstancesResponse, root.Server.DisassociatePublicIpFromServerInstanceRequest, root.Server.DisassociatePublicIpFromServerInstanceResponse, root.Server.GetAccessControlGroupListResponse, root.Server.GetAccessControlGroupServerInstanceListRequest, root.Server.GetAccessControlGroupServerInstanceListResponse, root.Server.GetAccessControlRuleListRequest, root.Server.GetBlockStorageInstanceListResponse, root.Server.GetBlockStorageSnapshotInstanceListRequest, root.Server.GetBlockStorageSnapshotInstanceListResponse, root.Server.GetLoginKeyListRequest, root.Server.GetLoginKeyListResponse, root.Server.GetMemberServerImageListResponse, root.Server.GetNasVolumeInstanceRatingListRequest, root.Server.GetPortForwardingRuleListRequest, root.Server.GetPortForwardingRuleListResponse, root.Server.GetPublicIpInstanceListResponse, root.Server.GetPublicIpTargetServerInstanceListRequest, root.Server.GetPublicIpTargetServerInstanceListResponse, root.Server.GetRaidListRequest, root.Server.GetRaidListResponse, root.Server.GetRegionListRequest, root.Server.GetRegionListResponse, root.Server.GetRootPasswordRequest, root.Server.GetRootPasswordResponse, root.Server.GetServerImageProductListRequest, root.Server.GetServerImageProductListResponse, root.Server.GetServerInstanceListRequest, root.Server.GetServerInstanceListResponse, root.Server.GetServerProductListRequest, root.Server.GetServerProductListResponse, root.Server.GetZoneListRequest, root.Server.GetZoneListResponse, root.Server.MemberServerImageNoList, root.Server.MemberServerImageRequest, root.Server.NasVolumeAccessControl, root.Server.NasVolumeInstanceListRequest, root.Server.NasVolumeInstanceListResponse, root.Server.NasVolumeInstanceRatingListResponse, root.Server.PortForwardingRuleRequest, root.Server.PublicIpInstanceList, root.Server.PublicIpInstanceNoList, root.Server.RebootServerInstancesResponse, root.Server.RecreateServerInstanceRequest, root.Server.RecreateServerInstanceResponse, root.Server.ServerInstanceNoList, root.Server.StartServerInstancesResponse, root.Server.StopServerInstancesResponse, root.Server.TerminateServerInstancesResponse);
  }
}(this, function(ApiClient, AccessControlGroupRequest, AddPortForwardingRulesResponse, AssociatePublicIpWithServerInstanceRequest, AssociatePublicIpWithServerInstanceResponse, BlockStorageInstanceNoList, BlockStorageInstanceRequest, ChangeNasVolumeSizeRequest, ChangeServerInstanceSpecRequest, ChangeServerInstanceSpecResponse, CreateBlockStorageInstanceRequest, CreateBlockStorageInstanceResponse, CreateLoginKeyRequest, CreateLoginKeyResponse, CreateMemberServerImageRequest, CreateMemberServerImageResponse, CreateNasVolumeInstanceRequest, CreatePublicIpInstanceRequest, CreatePublicIpInstanceResponse, CreateServerInstancesRequest, CreateServerInstancesResponse, DeleteBlockStorageInstancesResponse, DeleteLoginKeyRequest, DeleteLoginKeyResponse, DeleteMemberServerImagesResponse, DeleteNasVolumeInstanceRequest, DeletePortForwardingRulesResponse, DeletePublicIpInstancesResponse, DisassociatePublicIpFromServerInstanceRequest, DisassociatePublicIpFromServerInstanceResponse, GetAccessControlGroupListResponse, GetAccessControlGroupServerInstanceListRequest, GetAccessControlGroupServerInstanceListResponse, GetAccessControlRuleListRequest, GetBlockStorageInstanceListResponse, GetBlockStorageSnapshotInstanceListRequest, GetBlockStorageSnapshotInstanceListResponse, GetLoginKeyListRequest, GetLoginKeyListResponse, GetMemberServerImageListResponse, GetNasVolumeInstanceRatingListRequest, GetPortForwardingRuleListRequest, GetPortForwardingRuleListResponse, GetPublicIpInstanceListResponse, GetPublicIpTargetServerInstanceListRequest, GetPublicIpTargetServerInstanceListResponse, GetRaidListRequest, GetRaidListResponse, GetRegionListRequest, GetRegionListResponse, GetRootPasswordRequest, GetRootPasswordResponse, GetServerImageProductListRequest, GetServerImageProductListResponse, GetServerInstanceListRequest, GetServerInstanceListResponse, GetServerProductListRequest, GetServerProductListResponse, GetZoneListRequest, GetZoneListResponse, MemberServerImageNoList, MemberServerImageRequest, NasVolumeAccessControl, NasVolumeInstanceListRequest, NasVolumeInstanceListResponse, NasVolumeInstanceRatingListResponse, PortForwardingRuleRequest, PublicIpInstanceList, PublicIpInstanceNoList, RebootServerInstancesResponse, RecreateServerInstanceRequest, RecreateServerInstanceResponse, ServerInstanceNoList, StartServerInstancesResponse, StopServerInstancesResponse, TerminateServerInstancesResponse) {
  'use strict';

  /**
   * V1 service.
   * @module com.ncloud.server.api/V1Api
   * @version 1.0.0
   */

  /**
   * Constructs a new V1Api. 
   * @alias module:com.ncloud.server.api/V1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addNasVolumeAccessControlGet operation.
     * @callback module:com.ncloud.server.api/V1Api~addNasVolumeAccessControlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스접근제어추가
     * @param {module:com.ncloud.server.model/NasVolumeAccessControl} nasVolumeAccessControl NasVolumeAccessControl
     * @param {module:com.ncloud.server.api/V1Api~addNasVolumeAccessControlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.addNasVolumeAccessControlGet = function(nasVolumeAccessControl, callback) {
      var postBody = nasVolumeAccessControl;

      // verify the required parameter 'nasVolumeAccessControl' is set
      if (nasVolumeAccessControl === undefined || nasVolumeAccessControl === null) {
        throw new Error("Missing the required parameter 'nasVolumeAccessControl' when calling addNasVolumeAccessControlGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/addNasVolumeAccessControl', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addNasVolumeAccessControlPost operation.
     * @callback module:com.ncloud.server.api/V1Api~addNasVolumeAccessControlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스접근제어추가
     * @param {module:com.ncloud.server.model/NasVolumeAccessControl} nasVolumeAccessControl NasVolumeAccessControl
     * @param {module:com.ncloud.server.api/V1Api~addNasVolumeAccessControlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.addNasVolumeAccessControlPost = function(nasVolumeAccessControl, callback) {
      var postBody = nasVolumeAccessControl;

      // verify the required parameter 'nasVolumeAccessControl' is set
      if (nasVolumeAccessControl === undefined || nasVolumeAccessControl === null) {
        throw new Error("Missing the required parameter 'nasVolumeAccessControl' when calling addNasVolumeAccessControlPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/addNasVolumeAccessControl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPortForwardingRulesGet operation.
     * @callback module:com.ncloud.server.api/V1Api~addPortForwardingRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/AddPortForwardingRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 포트포워딩Rule추가
     * @param {module:com.ncloud.server.model/PortForwardingRuleRequest} portForwardingRuleRequest PortForwardingRuleRequest
     * @param {module:com.ncloud.server.api/V1Api~addPortForwardingRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/AddPortForwardingRulesResponse}
     */
    this.addPortForwardingRulesGet = function(portForwardingRuleRequest, callback) {
      var postBody = portForwardingRuleRequest;

      // verify the required parameter 'portForwardingRuleRequest' is set
      if (portForwardingRuleRequest === undefined || portForwardingRuleRequest === null) {
        throw new Error("Missing the required parameter 'portForwardingRuleRequest' when calling addPortForwardingRulesGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddPortForwardingRulesResponse;

      return this.apiClient.callApi(
        '/addPortForwardingRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPortForwardingRulesPost operation.
     * @callback module:com.ncloud.server.api/V1Api~addPortForwardingRulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/AddPortForwardingRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 포트포워딩Rule추가
     * @param {module:com.ncloud.server.model/PortForwardingRuleRequest} portForwardingRuleRequest PortForwardingRuleRequest
     * @param {module:com.ncloud.server.api/V1Api~addPortForwardingRulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/AddPortForwardingRulesResponse}
     */
    this.addPortForwardingRulesPost = function(portForwardingRuleRequest, callback) {
      var postBody = portForwardingRuleRequest;

      // verify the required parameter 'portForwardingRuleRequest' is set
      if (portForwardingRuleRequest === undefined || portForwardingRuleRequest === null) {
        throw new Error("Missing the required parameter 'portForwardingRuleRequest' when calling addPortForwardingRulesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddPortForwardingRulesResponse;

      return this.apiClient.callApi(
        '/addPortForwardingRules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the associatePublicIpWithServerInstanceGet operation.
     * @callback module:com.ncloud.server.api/V1Api~associatePublicIpWithServerInstanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/AssociatePublicIpWithServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP를서버인스턴스에할당
     * @param {module:com.ncloud.server.model/AssociatePublicIpWithServerInstanceRequest} associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~associatePublicIpWithServerInstanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/AssociatePublicIpWithServerInstanceResponse}
     */
    this.associatePublicIpWithServerInstanceGet = function(associatePublicIpWithServerInstanceRequest, callback) {
      var postBody = associatePublicIpWithServerInstanceRequest;

      // verify the required parameter 'associatePublicIpWithServerInstanceRequest' is set
      if (associatePublicIpWithServerInstanceRequest === undefined || associatePublicIpWithServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'associatePublicIpWithServerInstanceRequest' when calling associatePublicIpWithServerInstanceGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AssociatePublicIpWithServerInstanceResponse;

      return this.apiClient.callApi(
        '/associatePublicIpWithServerInstance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the associatePublicIpWithServerInstancePost operation.
     * @callback module:com.ncloud.server.api/V1Api~associatePublicIpWithServerInstancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/AssociatePublicIpWithServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP를서버인스턴스에할당
     * @param {module:com.ncloud.server.model/AssociatePublicIpWithServerInstanceRequest} associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~associatePublicIpWithServerInstancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/AssociatePublicIpWithServerInstanceResponse}
     */
    this.associatePublicIpWithServerInstancePost = function(associatePublicIpWithServerInstanceRequest, callback) {
      var postBody = associatePublicIpWithServerInstanceRequest;

      // verify the required parameter 'associatePublicIpWithServerInstanceRequest' is set
      if (associatePublicIpWithServerInstanceRequest === undefined || associatePublicIpWithServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'associatePublicIpWithServerInstanceRequest' when calling associatePublicIpWithServerInstancePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AssociatePublicIpWithServerInstanceResponse;

      return this.apiClient.callApi(
        '/associatePublicIpWithServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeNasVolumeSizeGet operation.
     * @callback module:com.ncloud.server.api/V1Api~changeNasVolumeSizeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨사이즈변경
     * @param {module:com.ncloud.server.model/ChangeNasVolumeSizeRequest} changeNasVolumeSizeRequest changeNasVolumeSizeRequest
     * @param {module:com.ncloud.server.api/V1Api~changeNasVolumeSizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.changeNasVolumeSizeGet = function(changeNasVolumeSizeRequest, callback) {
      var postBody = changeNasVolumeSizeRequest;

      // verify the required parameter 'changeNasVolumeSizeRequest' is set
      if (changeNasVolumeSizeRequest === undefined || changeNasVolumeSizeRequest === null) {
        throw new Error("Missing the required parameter 'changeNasVolumeSizeRequest' when calling changeNasVolumeSizeGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/changeNasVolumeSize', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeNasVolumeSizePost operation.
     * @callback module:com.ncloud.server.api/V1Api~changeNasVolumeSizePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨사이즈변경
     * @param {module:com.ncloud.server.model/ChangeNasVolumeSizeRequest} changeNasVolumeSizeRequest changeNasVolumeSizeRequest
     * @param {module:com.ncloud.server.api/V1Api~changeNasVolumeSizePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.changeNasVolumeSizePost = function(changeNasVolumeSizeRequest, callback) {
      var postBody = changeNasVolumeSizeRequest;

      // verify the required parameter 'changeNasVolumeSizeRequest' is set
      if (changeNasVolumeSizeRequest === undefined || changeNasVolumeSizeRequest === null) {
        throw new Error("Missing the required parameter 'changeNasVolumeSizeRequest' when calling changeNasVolumeSizePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/changeNasVolumeSize', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeServerInstanceSpecGet operation.
     * @callback module:com.ncloud.server.api/V1Api~changeServerInstanceSpecGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/ChangeServerInstanceSpecResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스스팩변경
     * @param {module:com.ncloud.server.model/ChangeServerInstanceSpecRequest} changeServerInstanceSpecRequest changeServerInstanceSpecRequest
     * @param {module:com.ncloud.server.api/V1Api~changeServerInstanceSpecGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/ChangeServerInstanceSpecResponse}
     */
    this.changeServerInstanceSpecGet = function(changeServerInstanceSpecRequest, callback) {
      var postBody = changeServerInstanceSpecRequest;

      // verify the required parameter 'changeServerInstanceSpecRequest' is set
      if (changeServerInstanceSpecRequest === undefined || changeServerInstanceSpecRequest === null) {
        throw new Error("Missing the required parameter 'changeServerInstanceSpecRequest' when calling changeServerInstanceSpecGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = ChangeServerInstanceSpecResponse;

      return this.apiClient.callApi(
        '/changeServerInstanceSpec', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeServerInstanceSpecPost operation.
     * @callback module:com.ncloud.server.api/V1Api~changeServerInstanceSpecPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/ChangeServerInstanceSpecResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스스팩변경
     * @param {module:com.ncloud.server.model/ChangeServerInstanceSpecRequest} changeServerInstanceSpecRequest changeServerInstanceSpecRequest
     * @param {module:com.ncloud.server.api/V1Api~changeServerInstanceSpecPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/ChangeServerInstanceSpecResponse}
     */
    this.changeServerInstanceSpecPost = function(changeServerInstanceSpecRequest, callback) {
      var postBody = changeServerInstanceSpecRequest;

      // verify the required parameter 'changeServerInstanceSpecRequest' is set
      if (changeServerInstanceSpecRequest === undefined || changeServerInstanceSpecRequest === null) {
        throw new Error("Missing the required parameter 'changeServerInstanceSpecRequest' when calling changeServerInstanceSpecPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = ChangeServerInstanceSpecResponse;

      return this.apiClient.callApi(
        '/changeServerInstanceSpec', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBlockStorageInstanceGet operation.
     * @callback module:com.ncloud.server.api/V1Api~createBlockStorageInstanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/CreateBlockStorageInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스생성
     * @param {module:com.ncloud.server.model/CreateBlockStorageInstanceRequest} createBlockStorageInstanceRequest createBlockStorageInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~createBlockStorageInstanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/CreateBlockStorageInstanceResponse}
     */
    this.createBlockStorageInstanceGet = function(createBlockStorageInstanceRequest, callback) {
      var postBody = createBlockStorageInstanceRequest;

      // verify the required parameter 'createBlockStorageInstanceRequest' is set
      if (createBlockStorageInstanceRequest === undefined || createBlockStorageInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createBlockStorageInstanceRequest' when calling createBlockStorageInstanceGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateBlockStorageInstanceResponse;

      return this.apiClient.callApi(
        '/createBlockStorageInstance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBlockStorageInstancePost operation.
     * @callback module:com.ncloud.server.api/V1Api~createBlockStorageInstancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/CreateBlockStorageInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스생성
     * @param {module:com.ncloud.server.model/CreateBlockStorageInstanceRequest} createBlockStorageInstanceRequest createBlockStorageInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~createBlockStorageInstancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/CreateBlockStorageInstanceResponse}
     */
    this.createBlockStorageInstancePost = function(createBlockStorageInstanceRequest, callback) {
      var postBody = createBlockStorageInstanceRequest;

      // verify the required parameter 'createBlockStorageInstanceRequest' is set
      if (createBlockStorageInstanceRequest === undefined || createBlockStorageInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createBlockStorageInstanceRequest' when calling createBlockStorageInstancePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateBlockStorageInstanceResponse;

      return this.apiClient.callApi(
        '/createBlockStorageInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoginKeyGet operation.
     * @callback module:com.ncloud.server.api/V1Api~createLoginKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/CreateLoginKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키생성
     * @param {module:com.ncloud.server.model/CreateLoginKeyRequest} createLoginKeyRequest createLoginKeyRequest
     * @param {module:com.ncloud.server.api/V1Api~createLoginKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/CreateLoginKeyResponse}
     */
    this.createLoginKeyGet = function(createLoginKeyRequest, callback) {
      var postBody = createLoginKeyRequest;

      // verify the required parameter 'createLoginKeyRequest' is set
      if (createLoginKeyRequest === undefined || createLoginKeyRequest === null) {
        throw new Error("Missing the required parameter 'createLoginKeyRequest' when calling createLoginKeyGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateLoginKeyResponse;

      return this.apiClient.callApi(
        '/createLoginKey', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoginKeyPost operation.
     * @callback module:com.ncloud.server.api/V1Api~createLoginKeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/CreateLoginKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키생성
     * @param {module:com.ncloud.server.model/CreateLoginKeyRequest} createLoginKeyRequest createLoginKeyRequest
     * @param {module:com.ncloud.server.api/V1Api~createLoginKeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/CreateLoginKeyResponse}
     */
    this.createLoginKeyPost = function(createLoginKeyRequest, callback) {
      var postBody = createLoginKeyRequest;

      // verify the required parameter 'createLoginKeyRequest' is set
      if (createLoginKeyRequest === undefined || createLoginKeyRequest === null) {
        throw new Error("Missing the required parameter 'createLoginKeyRequest' when calling createLoginKeyPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateLoginKeyResponse;

      return this.apiClient.callApi(
        '/createLoginKey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createMemberServerImageGet operation.
     * @callback module:com.ncloud.server.api/V1Api~createMemberServerImageGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/CreateMemberServerImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지생성
     * @param {module:com.ncloud.server.model/CreateMemberServerImageRequest} createMemberServerImageRequest createMemberServerImageRequest
     * @param {module:com.ncloud.server.api/V1Api~createMemberServerImageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/CreateMemberServerImageResponse}
     */
    this.createMemberServerImageGet = function(createMemberServerImageRequest, callback) {
      var postBody = createMemberServerImageRequest;

      // verify the required parameter 'createMemberServerImageRequest' is set
      if (createMemberServerImageRequest === undefined || createMemberServerImageRequest === null) {
        throw new Error("Missing the required parameter 'createMemberServerImageRequest' when calling createMemberServerImageGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateMemberServerImageResponse;

      return this.apiClient.callApi(
        '/createMemberServerImage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createMemberServerImagePost operation.
     * @callback module:com.ncloud.server.api/V1Api~createMemberServerImagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/CreateMemberServerImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지생성
     * @param {module:com.ncloud.server.model/CreateMemberServerImageRequest} createMemberServerImageRequest createMemberServerImageRequest
     * @param {module:com.ncloud.server.api/V1Api~createMemberServerImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/CreateMemberServerImageResponse}
     */
    this.createMemberServerImagePost = function(createMemberServerImageRequest, callback) {
      var postBody = createMemberServerImageRequest;

      // verify the required parameter 'createMemberServerImageRequest' is set
      if (createMemberServerImageRequest === undefined || createMemberServerImageRequest === null) {
        throw new Error("Missing the required parameter 'createMemberServerImageRequest' when calling createMemberServerImagePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateMemberServerImageResponse;

      return this.apiClient.callApi(
        '/createMemberServerImage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNasVolumeInstanceGet operation.
     * @callback module:com.ncloud.server.api/V1Api~createNasVolumeInstanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스생성
     * @param {module:com.ncloud.server.model/CreateNasVolumeInstanceRequest} createNasVolumeInstanceRequest createNasVolumeInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~createNasVolumeInstanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.createNasVolumeInstanceGet = function(createNasVolumeInstanceRequest, callback) {
      var postBody = createNasVolumeInstanceRequest;

      // verify the required parameter 'createNasVolumeInstanceRequest' is set
      if (createNasVolumeInstanceRequest === undefined || createNasVolumeInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createNasVolumeInstanceRequest' when calling createNasVolumeInstanceGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/createNasVolumeInstance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNasVolumeInstancePost operation.
     * @callback module:com.ncloud.server.api/V1Api~createNasVolumeInstancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스생성
     * @param {module:com.ncloud.server.model/CreateNasVolumeInstanceRequest} createNasVolumeInstanceRequest createNasVolumeInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~createNasVolumeInstancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.createNasVolumeInstancePost = function(createNasVolumeInstanceRequest, callback) {
      var postBody = createNasVolumeInstanceRequest;

      // verify the required parameter 'createNasVolumeInstanceRequest' is set
      if (createNasVolumeInstanceRequest === undefined || createNasVolumeInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createNasVolumeInstanceRequest' when calling createNasVolumeInstancePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/createNasVolumeInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPublicIpInstanceGet operation.
     * @callback module:com.ncloud.server.api/V1Api~createPublicIpInstanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/CreatePublicIpInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스생성
     * @param {module:com.ncloud.server.model/CreatePublicIpInstanceRequest} createPublicIpInstanceRequest createPublicIpInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~createPublicIpInstanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/CreatePublicIpInstanceResponse}
     */
    this.createPublicIpInstanceGet = function(createPublicIpInstanceRequest, callback) {
      var postBody = createPublicIpInstanceRequest;

      // verify the required parameter 'createPublicIpInstanceRequest' is set
      if (createPublicIpInstanceRequest === undefined || createPublicIpInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createPublicIpInstanceRequest' when calling createPublicIpInstanceGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreatePublicIpInstanceResponse;

      return this.apiClient.callApi(
        '/createPublicIpInstance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPublicIpInstancePost operation.
     * @callback module:com.ncloud.server.api/V1Api~createPublicIpInstancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/CreatePublicIpInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스생성
     * @param {module:com.ncloud.server.model/CreatePublicIpInstanceRequest} createPublicIpInstanceRequest createPublicIpInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~createPublicIpInstancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/CreatePublicIpInstanceResponse}
     */
    this.createPublicIpInstancePost = function(createPublicIpInstanceRequest, callback) {
      var postBody = createPublicIpInstanceRequest;

      // verify the required parameter 'createPublicIpInstanceRequest' is set
      if (createPublicIpInstanceRequest === undefined || createPublicIpInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createPublicIpInstanceRequest' when calling createPublicIpInstancePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreatePublicIpInstanceResponse;

      return this.apiClient.callApi(
        '/createPublicIpInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createServerInstancesGet operation.
     * @callback module:com.ncloud.server.api/V1Api~createServerInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/CreateServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스생성
     * @param {module:com.ncloud.server.model/CreateServerInstancesRequest} createServerInstancesRequest createServerInstancesRequest
     * @param {module:com.ncloud.server.api/V1Api~createServerInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/CreateServerInstancesResponse}
     */
    this.createServerInstancesGet = function(createServerInstancesRequest, callback) {
      var postBody = createServerInstancesRequest;

      // verify the required parameter 'createServerInstancesRequest' is set
      if (createServerInstancesRequest === undefined || createServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'createServerInstancesRequest' when calling createServerInstancesGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateServerInstancesResponse;

      return this.apiClient.callApi(
        '/createServerInstances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createServerInstancesPost operation.
     * @callback module:com.ncloud.server.api/V1Api~createServerInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/CreateServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스생성
     * @param {module:com.ncloud.server.model/CreateServerInstancesRequest} createServerInstancesRequest createServerInstancesRequest
     * @param {module:com.ncloud.server.api/V1Api~createServerInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/CreateServerInstancesResponse}
     */
    this.createServerInstancesPost = function(createServerInstancesRequest, callback) {
      var postBody = createServerInstancesRequest;

      // verify the required parameter 'createServerInstancesRequest' is set
      if (createServerInstancesRequest === undefined || createServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'createServerInstancesRequest' when calling createServerInstancesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateServerInstancesResponse;

      return this.apiClient.callApi(
        '/createServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlockStorageInstancesGet operation.
     * @callback module:com.ncloud.server.api/V1Api~deleteBlockStorageInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DeleteBlockStorageInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스삭제
     * @param {module:com.ncloud.server.model/BlockStorageInstanceNoList} blockStorageInstanceNoList BlockStorageInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~deleteBlockStorageInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DeleteBlockStorageInstancesResponse}
     */
    this.deleteBlockStorageInstancesGet = function(blockStorageInstanceNoList, callback) {
      var postBody = blockStorageInstanceNoList;

      // verify the required parameter 'blockStorageInstanceNoList' is set
      if (blockStorageInstanceNoList === undefined || blockStorageInstanceNoList === null) {
        throw new Error("Missing the required parameter 'blockStorageInstanceNoList' when calling deleteBlockStorageInstancesGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteBlockStorageInstancesResponse;

      return this.apiClient.callApi(
        '/deleteBlockStorageInstances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlockStorageInstancesPost operation.
     * @callback module:com.ncloud.server.api/V1Api~deleteBlockStorageInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DeleteBlockStorageInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스삭제
     * @param {module:com.ncloud.server.model/BlockStorageInstanceNoList} blockStorageInstanceNoList BlockStorageInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~deleteBlockStorageInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DeleteBlockStorageInstancesResponse}
     */
    this.deleteBlockStorageInstancesPost = function(blockStorageInstanceNoList, callback) {
      var postBody = blockStorageInstanceNoList;

      // verify the required parameter 'blockStorageInstanceNoList' is set
      if (blockStorageInstanceNoList === undefined || blockStorageInstanceNoList === null) {
        throw new Error("Missing the required parameter 'blockStorageInstanceNoList' when calling deleteBlockStorageInstancesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteBlockStorageInstancesResponse;

      return this.apiClient.callApi(
        '/deleteBlockStorageInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoginKeyGet operation.
     * @callback module:com.ncloud.server.api/V1Api~deleteLoginKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DeleteLoginKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키삭제
     * @param {module:com.ncloud.server.model/DeleteLoginKeyRequest} deleteLoginKeyRequest deleteLoginKeyRequest
     * @param {module:com.ncloud.server.api/V1Api~deleteLoginKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DeleteLoginKeyResponse}
     */
    this.deleteLoginKeyGet = function(deleteLoginKeyRequest, callback) {
      var postBody = deleteLoginKeyRequest;

      // verify the required parameter 'deleteLoginKeyRequest' is set
      if (deleteLoginKeyRequest === undefined || deleteLoginKeyRequest === null) {
        throw new Error("Missing the required parameter 'deleteLoginKeyRequest' when calling deleteLoginKeyGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteLoginKeyResponse;

      return this.apiClient.callApi(
        '/deleteLoginKey', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoginKeyPost operation.
     * @callback module:com.ncloud.server.api/V1Api~deleteLoginKeyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DeleteLoginKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키삭제
     * @param {module:com.ncloud.server.model/DeleteLoginKeyRequest} deleteLoginKeyRequest deleteLoginKeyRequest
     * @param {module:com.ncloud.server.api/V1Api~deleteLoginKeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DeleteLoginKeyResponse}
     */
    this.deleteLoginKeyPost = function(deleteLoginKeyRequest, callback) {
      var postBody = deleteLoginKeyRequest;

      // verify the required parameter 'deleteLoginKeyRequest' is set
      if (deleteLoginKeyRequest === undefined || deleteLoginKeyRequest === null) {
        throw new Error("Missing the required parameter 'deleteLoginKeyRequest' when calling deleteLoginKeyPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteLoginKeyResponse;

      return this.apiClient.callApi(
        '/deleteLoginKey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMemberServerImagesGet operation.
     * @callback module:com.ncloud.server.api/V1Api~deleteMemberServerImagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DeleteMemberServerImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지삭제
     * @param {module:com.ncloud.server.model/MemberServerImageNoList} memberServerImageNoList MemberServerImageNoList
     * @param {module:com.ncloud.server.api/V1Api~deleteMemberServerImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DeleteMemberServerImagesResponse}
     */
    this.deleteMemberServerImagesGet = function(memberServerImageNoList, callback) {
      var postBody = memberServerImageNoList;

      // verify the required parameter 'memberServerImageNoList' is set
      if (memberServerImageNoList === undefined || memberServerImageNoList === null) {
        throw new Error("Missing the required parameter 'memberServerImageNoList' when calling deleteMemberServerImagesGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteMemberServerImagesResponse;

      return this.apiClient.callApi(
        '/deleteMemberServerImages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMemberServerImagesPost operation.
     * @callback module:com.ncloud.server.api/V1Api~deleteMemberServerImagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DeleteMemberServerImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지삭제
     * @param {module:com.ncloud.server.model/MemberServerImageNoList} memberServerImageNoList MemberServerImageNoList
     * @param {module:com.ncloud.server.api/V1Api~deleteMemberServerImagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DeleteMemberServerImagesResponse}
     */
    this.deleteMemberServerImagesPost = function(memberServerImageNoList, callback) {
      var postBody = memberServerImageNoList;

      // verify the required parameter 'memberServerImageNoList' is set
      if (memberServerImageNoList === undefined || memberServerImageNoList === null) {
        throw new Error("Missing the required parameter 'memberServerImageNoList' when calling deleteMemberServerImagesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteMemberServerImagesResponse;

      return this.apiClient.callApi(
        '/deleteMemberServerImages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNasVolumeInstanceGet operation.
     * @callback module:com.ncloud.server.api/V1Api~deleteNasVolumeInstanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스삭제
     * @param {module:com.ncloud.server.model/DeleteNasVolumeInstanceRequest} deleteNasVolumeInstanceRequest deleteNasVolumeInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~deleteNasVolumeInstanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.deleteNasVolumeInstanceGet = function(deleteNasVolumeInstanceRequest, callback) {
      var postBody = deleteNasVolumeInstanceRequest;

      // verify the required parameter 'deleteNasVolumeInstanceRequest' is set
      if (deleteNasVolumeInstanceRequest === undefined || deleteNasVolumeInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deleteNasVolumeInstanceRequest' when calling deleteNasVolumeInstanceGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/deleteNasVolumeInstance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNasVolumeInstancePost operation.
     * @callback module:com.ncloud.server.api/V1Api~deleteNasVolumeInstancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스삭제
     * @param {module:com.ncloud.server.model/DeleteNasVolumeInstanceRequest} deleteNasVolumeInstanceRequest deleteNasVolumeInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~deleteNasVolumeInstancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.deleteNasVolumeInstancePost = function(deleteNasVolumeInstanceRequest, callback) {
      var postBody = deleteNasVolumeInstanceRequest;

      // verify the required parameter 'deleteNasVolumeInstanceRequest' is set
      if (deleteNasVolumeInstanceRequest === undefined || deleteNasVolumeInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deleteNasVolumeInstanceRequest' when calling deleteNasVolumeInstancePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/deleteNasVolumeInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortForwardingRulesGet operation.
     * @callback module:com.ncloud.server.api/V1Api~deletePortForwardingRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DeletePortForwardingRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 포트포워딩Rule삭제
     * @param {module:com.ncloud.server.model/PortForwardingRuleRequest} portForwardingRuleRequest PortForwardingRuleRequest
     * @param {module:com.ncloud.server.api/V1Api~deletePortForwardingRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DeletePortForwardingRulesResponse}
     */
    this.deletePortForwardingRulesGet = function(portForwardingRuleRequest, callback) {
      var postBody = portForwardingRuleRequest;

      // verify the required parameter 'portForwardingRuleRequest' is set
      if (portForwardingRuleRequest === undefined || portForwardingRuleRequest === null) {
        throw new Error("Missing the required parameter 'portForwardingRuleRequest' when calling deletePortForwardingRulesGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeletePortForwardingRulesResponse;

      return this.apiClient.callApi(
        '/deletePortForwardingRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortForwardingRulesPost operation.
     * @callback module:com.ncloud.server.api/V1Api~deletePortForwardingRulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DeletePortForwardingRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 포트포워딩Rule삭제
     * @param {module:com.ncloud.server.model/PortForwardingRuleRequest} portForwardingRuleRequest PortForwardingRuleRequest
     * @param {module:com.ncloud.server.api/V1Api~deletePortForwardingRulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DeletePortForwardingRulesResponse}
     */
    this.deletePortForwardingRulesPost = function(portForwardingRuleRequest, callback) {
      var postBody = portForwardingRuleRequest;

      // verify the required parameter 'portForwardingRuleRequest' is set
      if (portForwardingRuleRequest === undefined || portForwardingRuleRequest === null) {
        throw new Error("Missing the required parameter 'portForwardingRuleRequest' when calling deletePortForwardingRulesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeletePortForwardingRulesResponse;

      return this.apiClient.callApi(
        '/deletePortForwardingRules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePublicIpInstancesGet operation.
     * @callback module:com.ncloud.server.api/V1Api~deletePublicIpInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DeletePublicIpInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스삭제
     * @param {module:com.ncloud.server.model/PublicIpInstanceNoList} publicIpInstanceNoList PublicIpInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~deletePublicIpInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DeletePublicIpInstancesResponse}
     */
    this.deletePublicIpInstancesGet = function(publicIpInstanceNoList, callback) {
      var postBody = publicIpInstanceNoList;

      // verify the required parameter 'publicIpInstanceNoList' is set
      if (publicIpInstanceNoList === undefined || publicIpInstanceNoList === null) {
        throw new Error("Missing the required parameter 'publicIpInstanceNoList' when calling deletePublicIpInstancesGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeletePublicIpInstancesResponse;

      return this.apiClient.callApi(
        '/deletePublicIpInstances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePublicIpInstancesPost operation.
     * @callback module:com.ncloud.server.api/V1Api~deletePublicIpInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DeletePublicIpInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스삭제
     * @param {module:com.ncloud.server.model/PublicIpInstanceNoList} publicIpInstanceNoList PublicIpInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~deletePublicIpInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DeletePublicIpInstancesResponse}
     */
    this.deletePublicIpInstancesPost = function(publicIpInstanceNoList, callback) {
      var postBody = publicIpInstanceNoList;

      // verify the required parameter 'publicIpInstanceNoList' is set
      if (publicIpInstanceNoList === undefined || publicIpInstanceNoList === null) {
        throw new Error("Missing the required parameter 'publicIpInstanceNoList' when calling deletePublicIpInstancesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeletePublicIpInstancesResponse;

      return this.apiClient.callApi(
        '/deletePublicIpInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociatePublicIpFromServerInstanceGet operation.
     * @callback module:com.ncloud.server.api/V1Api~disassociatePublicIpFromServerInstanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DisassociatePublicIpFromServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP를서버인스턴스에할당해제
     * @param {module:com.ncloud.server.model/DisassociatePublicIpFromServerInstanceRequest} disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~disassociatePublicIpFromServerInstanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DisassociatePublicIpFromServerInstanceResponse}
     */
    this.disassociatePublicIpFromServerInstanceGet = function(disassociatePublicIpFromServerInstanceRequest, callback) {
      var postBody = disassociatePublicIpFromServerInstanceRequest;

      // verify the required parameter 'disassociatePublicIpFromServerInstanceRequest' is set
      if (disassociatePublicIpFromServerInstanceRequest === undefined || disassociatePublicIpFromServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'disassociatePublicIpFromServerInstanceRequest' when calling disassociatePublicIpFromServerInstanceGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DisassociatePublicIpFromServerInstanceResponse;

      return this.apiClient.callApi(
        '/disassociatePublicIpFromServerInstance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociatePublicIpFromServerInstancePost operation.
     * @callback module:com.ncloud.server.api/V1Api~disassociatePublicIpFromServerInstancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/DisassociatePublicIpFromServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP를서버인스턴스에할당해제
     * @param {module:com.ncloud.server.model/DisassociatePublicIpFromServerInstanceRequest} disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~disassociatePublicIpFromServerInstancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/DisassociatePublicIpFromServerInstanceResponse}
     */
    this.disassociatePublicIpFromServerInstancePost = function(disassociatePublicIpFromServerInstanceRequest, callback) {
      var postBody = disassociatePublicIpFromServerInstanceRequest;

      // verify the required parameter 'disassociatePublicIpFromServerInstanceRequest' is set
      if (disassociatePublicIpFromServerInstanceRequest === undefined || disassociatePublicIpFromServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'disassociatePublicIpFromServerInstanceRequest' when calling disassociatePublicIpFromServerInstancePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DisassociatePublicIpFromServerInstanceResponse;

      return this.apiClient.callApi(
        '/disassociatePublicIpFromServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlGroupListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getAccessControlGroupListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetAccessControlGroupListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 접근제어그룹리스트조회
     * @param {module:com.ncloud.server.model/AccessControlGroupRequest} accessControlGroupRequest AccessControlGroupRequest
     * @param {module:com.ncloud.server.api/V1Api~getAccessControlGroupListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetAccessControlGroupListResponse}
     */
    this.getAccessControlGroupListGet = function(accessControlGroupRequest, callback) {
      var postBody = accessControlGroupRequest;

      // verify the required parameter 'accessControlGroupRequest' is set
      if (accessControlGroupRequest === undefined || accessControlGroupRequest === null) {
        throw new Error("Missing the required parameter 'accessControlGroupRequest' when calling getAccessControlGroupListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupListResponse;

      return this.apiClient.callApi(
        '/getAccessControlGroupList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlGroupListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getAccessControlGroupListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetAccessControlGroupListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 접근제어그룹리스트조회
     * @param {module:com.ncloud.server.model/AccessControlGroupRequest} accessControlGroupRequest AccessControlGroupRequest
     * @param {module:com.ncloud.server.api/V1Api~getAccessControlGroupListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetAccessControlGroupListResponse}
     */
    this.getAccessControlGroupListPost = function(accessControlGroupRequest, callback) {
      var postBody = accessControlGroupRequest;

      // verify the required parameter 'accessControlGroupRequest' is set
      if (accessControlGroupRequest === undefined || accessControlGroupRequest === null) {
        throw new Error("Missing the required parameter 'accessControlGroupRequest' when calling getAccessControlGroupListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupListResponse;

      return this.apiClient.callApi(
        '/getAccessControlGroupList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlGroupServerInstanceListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getAccessControlGroupServerInstanceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetAccessControlGroupServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 접근제어그룹적용된서버인스턴스리스트조회
     * @param {module:com.ncloud.server.model/GetAccessControlGroupServerInstanceListRequest} getAccessControlGroupServerInstanceListRequest getAccessControlGroupServerInstanceListRequest
     * @param {module:com.ncloud.server.api/V1Api~getAccessControlGroupServerInstanceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetAccessControlGroupServerInstanceListResponse}
     */
    this.getAccessControlGroupServerInstanceListGet = function(getAccessControlGroupServerInstanceListRequest, callback) {
      var postBody = getAccessControlGroupServerInstanceListRequest;

      // verify the required parameter 'getAccessControlGroupServerInstanceListRequest' is set
      if (getAccessControlGroupServerInstanceListRequest === undefined || getAccessControlGroupServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getAccessControlGroupServerInstanceListRequest' when calling getAccessControlGroupServerInstanceListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getAccessControlGroupServerInstanceList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlGroupServerInstanceListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getAccessControlGroupServerInstanceListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetAccessControlGroupServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 접근제어그룹적용된서버인스턴스리스트조회
     * @param {module:com.ncloud.server.model/GetAccessControlGroupServerInstanceListRequest} getAccessControlGroupServerInstanceListRequest getAccessControlGroupServerInstanceListRequest
     * @param {module:com.ncloud.server.api/V1Api~getAccessControlGroupServerInstanceListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetAccessControlGroupServerInstanceListResponse}
     */
    this.getAccessControlGroupServerInstanceListPost = function(getAccessControlGroupServerInstanceListRequest, callback) {
      var postBody = getAccessControlGroupServerInstanceListRequest;

      // verify the required parameter 'getAccessControlGroupServerInstanceListRequest' is set
      if (getAccessControlGroupServerInstanceListRequest === undefined || getAccessControlGroupServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getAccessControlGroupServerInstanceListRequest' when calling getAccessControlGroupServerInstanceListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getAccessControlGroupServerInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlRuleListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getAccessControlRuleListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetAccessControlGroupServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 접근제어규칙리스트조회
     * @param {module:com.ncloud.server.model/GetAccessControlRuleListRequest} getAccessControlRuleListRequest getAccessControlRuleListRequest
     * @param {module:com.ncloud.server.api/V1Api~getAccessControlRuleListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetAccessControlGroupServerInstanceListResponse}
     */
    this.getAccessControlRuleListGet = function(getAccessControlRuleListRequest, callback) {
      var postBody = getAccessControlRuleListRequest;

      // verify the required parameter 'getAccessControlRuleListRequest' is set
      if (getAccessControlRuleListRequest === undefined || getAccessControlRuleListRequest === null) {
        throw new Error("Missing the required parameter 'getAccessControlRuleListRequest' when calling getAccessControlRuleListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getAccessControlRuleList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlRuleListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getAccessControlRuleListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetAccessControlGroupServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 접근제어규칙리스트조회
     * @param {module:com.ncloud.server.model/GetAccessControlRuleListRequest} getAccessControlRuleListRequest getAccessControlRuleListRequest
     * @param {module:com.ncloud.server.api/V1Api~getAccessControlRuleListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetAccessControlGroupServerInstanceListResponse}
     */
    this.getAccessControlRuleListPost = function(getAccessControlRuleListRequest, callback) {
      var postBody = getAccessControlRuleListRequest;

      // verify the required parameter 'getAccessControlRuleListRequest' is set
      if (getAccessControlRuleListRequest === undefined || getAccessControlRuleListRequest === null) {
        throw new Error("Missing the required parameter 'getAccessControlRuleListRequest' when calling getAccessControlRuleListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getAccessControlRuleList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockStorageInstanceListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getBlockStorageInstanceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetBlockStorageInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스리스트조회
     * @param {module:com.ncloud.server.model/BlockStorageInstanceRequest} blockStorageInstanceRequest BlockStorageInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~getBlockStorageInstanceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetBlockStorageInstanceListResponse}
     */
    this.getBlockStorageInstanceListGet = function(blockStorageInstanceRequest, callback) {
      var postBody = blockStorageInstanceRequest;

      // verify the required parameter 'blockStorageInstanceRequest' is set
      if (blockStorageInstanceRequest === undefined || blockStorageInstanceRequest === null) {
        throw new Error("Missing the required parameter 'blockStorageInstanceRequest' when calling getBlockStorageInstanceListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBlockStorageInstanceListResponse;

      return this.apiClient.callApi(
        '/getBlockStorageInstanceList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockStorageInstanceListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getBlockStorageInstanceListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetBlockStorageInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스리스트조회
     * @param {module:com.ncloud.server.model/BlockStorageInstanceRequest} blockStorageInstanceRequest BlockStorageInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~getBlockStorageInstanceListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetBlockStorageInstanceListResponse}
     */
    this.getBlockStorageInstanceListPost = function(blockStorageInstanceRequest, callback) {
      var postBody = blockStorageInstanceRequest;

      // verify the required parameter 'blockStorageInstanceRequest' is set
      if (blockStorageInstanceRequest === undefined || blockStorageInstanceRequest === null) {
        throw new Error("Missing the required parameter 'blockStorageInstanceRequest' when calling getBlockStorageInstanceListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBlockStorageInstanceListResponse;

      return this.apiClient.callApi(
        '/getBlockStorageInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockStorageSnapshotInstanceListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getBlockStorageSnapshotInstanceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetBlockStorageSnapshotInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지스냅샷인스턴스리스트조회
     * @param {module:com.ncloud.server.model/GetBlockStorageSnapshotInstanceListRequest} getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest
     * @param {module:com.ncloud.server.api/V1Api~getBlockStorageSnapshotInstanceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetBlockStorageSnapshotInstanceListResponse}
     */
    this.getBlockStorageSnapshotInstanceListGet = function(getBlockStorageSnapshotInstanceListRequest, callback) {
      var postBody = getBlockStorageSnapshotInstanceListRequest;

      // verify the required parameter 'getBlockStorageSnapshotInstanceListRequest' is set
      if (getBlockStorageSnapshotInstanceListRequest === undefined || getBlockStorageSnapshotInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getBlockStorageSnapshotInstanceListRequest' when calling getBlockStorageSnapshotInstanceListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBlockStorageSnapshotInstanceListResponse;

      return this.apiClient.callApi(
        '/getBlockStorageSnapshotInstanceList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockStorageSnapshotInstanceListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getBlockStorageSnapshotInstanceListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetBlockStorageSnapshotInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지스냅샷인스턴스리스트조회
     * @param {module:com.ncloud.server.model/GetBlockStorageSnapshotInstanceListRequest} getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest
     * @param {module:com.ncloud.server.api/V1Api~getBlockStorageSnapshotInstanceListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetBlockStorageSnapshotInstanceListResponse}
     */
    this.getBlockStorageSnapshotInstanceListPost = function(getBlockStorageSnapshotInstanceListRequest, callback) {
      var postBody = getBlockStorageSnapshotInstanceListRequest;

      // verify the required parameter 'getBlockStorageSnapshotInstanceListRequest' is set
      if (getBlockStorageSnapshotInstanceListRequest === undefined || getBlockStorageSnapshotInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getBlockStorageSnapshotInstanceListRequest' when calling getBlockStorageSnapshotInstanceListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBlockStorageSnapshotInstanceListResponse;

      return this.apiClient.callApi(
        '/getBlockStorageSnapshotInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoginKeyListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getLoginKeyListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetLoginKeyListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키리스트조회
     * @param {module:com.ncloud.server.model/GetLoginKeyListRequest} getLoginKeyListRequest getLoginKeyListRequest
     * @param {module:com.ncloud.server.api/V1Api~getLoginKeyListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetLoginKeyListResponse}
     */
    this.getLoginKeyListGet = function(getLoginKeyListRequest, callback) {
      var postBody = getLoginKeyListRequest;

      // verify the required parameter 'getLoginKeyListRequest' is set
      if (getLoginKeyListRequest === undefined || getLoginKeyListRequest === null) {
        throw new Error("Missing the required parameter 'getLoginKeyListRequest' when calling getLoginKeyListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetLoginKeyListResponse;

      return this.apiClient.callApi(
        '/getLoginKeyList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoginKeyListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getLoginKeyListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetLoginKeyListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키리스트조회
     * @param {module:com.ncloud.server.model/GetLoginKeyListRequest} getLoginKeyListRequest getLoginKeyListRequest
     * @param {module:com.ncloud.server.api/V1Api~getLoginKeyListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetLoginKeyListResponse}
     */
    this.getLoginKeyListPost = function(getLoginKeyListRequest, callback) {
      var postBody = getLoginKeyListRequest;

      // verify the required parameter 'getLoginKeyListRequest' is set
      if (getLoginKeyListRequest === undefined || getLoginKeyListRequest === null) {
        throw new Error("Missing the required parameter 'getLoginKeyListRequest' when calling getLoginKeyListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetLoginKeyListResponse;

      return this.apiClient.callApi(
        '/getLoginKeyList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMemberServerImageListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getMemberServerImageListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetMemberServerImageListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지리스트조회
     * @param {module:com.ncloud.server.model/MemberServerImageRequest} memberServerImageRequest MemberServerImageRequest
     * @param {module:com.ncloud.server.api/V1Api~getMemberServerImageListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetMemberServerImageListResponse}
     */
    this.getMemberServerImageListGet = function(memberServerImageRequest, callback) {
      var postBody = memberServerImageRequest;

      // verify the required parameter 'memberServerImageRequest' is set
      if (memberServerImageRequest === undefined || memberServerImageRequest === null) {
        throw new Error("Missing the required parameter 'memberServerImageRequest' when calling getMemberServerImageListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetMemberServerImageListResponse;

      return this.apiClient.callApi(
        '/getMemberServerImageList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMemberServerImageListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getMemberServerImageListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetMemberServerImageListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지리스트조회
     * @param {module:com.ncloud.server.model/MemberServerImageRequest} memberServerImageRequest MemberServerImageRequest
     * @param {module:com.ncloud.server.api/V1Api~getMemberServerImageListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetMemberServerImageListResponse}
     */
    this.getMemberServerImageListPost = function(memberServerImageRequest, callback) {
      var postBody = memberServerImageRequest;

      // verify the required parameter 'memberServerImageRequest' is set
      if (memberServerImageRequest === undefined || memberServerImageRequest === null) {
        throw new Error("Missing the required parameter 'memberServerImageRequest' when calling getMemberServerImageListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetMemberServerImageListResponse;

      return this.apiClient.callApi(
        '/getMemberServerImageList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNasVolumeInstanceListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getNasVolumeInstanceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스리스트조회
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListRequest} nasVolumeInstanceListRequest nasVolumeInstanceListRequest
     * @param {module:com.ncloud.server.api/V1Api~getNasVolumeInstanceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.getNasVolumeInstanceListGet = function(nasVolumeInstanceListRequest, callback) {
      var postBody = nasVolumeInstanceListRequest;

      // verify the required parameter 'nasVolumeInstanceListRequest' is set
      if (nasVolumeInstanceListRequest === undefined || nasVolumeInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'nasVolumeInstanceListRequest' when calling getNasVolumeInstanceListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/getNasVolumeInstanceList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNasVolumeInstanceListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getNasVolumeInstanceListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스리스트조회
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListRequest} nasVolumeInstanceListRequest nasVolumeInstanceListRequest
     * @param {module:com.ncloud.server.api/V1Api~getNasVolumeInstanceListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.getNasVolumeInstanceListPost = function(nasVolumeInstanceListRequest, callback) {
      var postBody = nasVolumeInstanceListRequest;

      // verify the required parameter 'nasVolumeInstanceListRequest' is set
      if (nasVolumeInstanceListRequest === undefined || nasVolumeInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'nasVolumeInstanceListRequest' when calling getNasVolumeInstanceListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/getNasVolumeInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNasVolumeInstanceRatingListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getNasVolumeInstanceRatingListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceRatingListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스측정리스트조회
     * @param {module:com.ncloud.server.model/GetNasVolumeInstanceRatingListRequest} getNasVolumeInstanceRatingListRequest getNasVolumeInstanceRatingListRequest
     * @param {module:com.ncloud.server.api/V1Api~getNasVolumeInstanceRatingListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceRatingListResponse}
     */
    this.getNasVolumeInstanceRatingListGet = function(getNasVolumeInstanceRatingListRequest, callback) {
      var postBody = getNasVolumeInstanceRatingListRequest;

      // verify the required parameter 'getNasVolumeInstanceRatingListRequest' is set
      if (getNasVolumeInstanceRatingListRequest === undefined || getNasVolumeInstanceRatingListRequest === null) {
        throw new Error("Missing the required parameter 'getNasVolumeInstanceRatingListRequest' when calling getNasVolumeInstanceRatingListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceRatingListResponse;

      return this.apiClient.callApi(
        '/getNasVolumeInstanceRatingList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNasVolumeInstanceRatingListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getNasVolumeInstanceRatingListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceRatingListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스측정리스트조회
     * @param {module:com.ncloud.server.model/GetNasVolumeInstanceRatingListRequest} getNasVolumeInstanceRatingListRequest getNasVolumeInstanceRatingListRequest
     * @param {module:com.ncloud.server.api/V1Api~getNasVolumeInstanceRatingListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceRatingListResponse}
     */
    this.getNasVolumeInstanceRatingListPost = function(getNasVolumeInstanceRatingListRequest, callback) {
      var postBody = getNasVolumeInstanceRatingListRequest;

      // verify the required parameter 'getNasVolumeInstanceRatingListRequest' is set
      if (getNasVolumeInstanceRatingListRequest === undefined || getNasVolumeInstanceRatingListRequest === null) {
        throw new Error("Missing the required parameter 'getNasVolumeInstanceRatingListRequest' when calling getNasVolumeInstanceRatingListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceRatingListResponse;

      return this.apiClient.callApi(
        '/getNasVolumeInstanceRatingList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortForwardingRuleListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getPortForwardingRuleListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetPortForwardingRuleListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 포트포워딩Rule리스트조회
     * @param {module:com.ncloud.server.model/GetPortForwardingRuleListRequest} getPortForwardingRuleListRequest getPortForwardingRuleListRequest
     * @param {module:com.ncloud.server.api/V1Api~getPortForwardingRuleListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetPortForwardingRuleListResponse}
     */
    this.getPortForwardingRuleListGet = function(getPortForwardingRuleListRequest, callback) {
      var postBody = getPortForwardingRuleListRequest;

      // verify the required parameter 'getPortForwardingRuleListRequest' is set
      if (getPortForwardingRuleListRequest === undefined || getPortForwardingRuleListRequest === null) {
        throw new Error("Missing the required parameter 'getPortForwardingRuleListRequest' when calling getPortForwardingRuleListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPortForwardingRuleListResponse;

      return this.apiClient.callApi(
        '/getPortForwardingRuleList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortForwardingRuleListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getPortForwardingRuleListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetPortForwardingRuleListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 포트포워딩Rule리스트조회
     * @param {module:com.ncloud.server.model/GetPortForwardingRuleListRequest} getPortForwardingRuleListRequest getPortForwardingRuleListRequest
     * @param {module:com.ncloud.server.api/V1Api~getPortForwardingRuleListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetPortForwardingRuleListResponse}
     */
    this.getPortForwardingRuleListPost = function(getPortForwardingRuleListRequest, callback) {
      var postBody = getPortForwardingRuleListRequest;

      // verify the required parameter 'getPortForwardingRuleListRequest' is set
      if (getPortForwardingRuleListRequest === undefined || getPortForwardingRuleListRequest === null) {
        throw new Error("Missing the required parameter 'getPortForwardingRuleListRequest' when calling getPortForwardingRuleListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPortForwardingRuleListResponse;

      return this.apiClient.callApi(
        '/getPortForwardingRuleList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicIpInstanceListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getPublicIpInstanceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetPublicIpInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스리스트조회
     * @param {module:com.ncloud.server.model/PublicIpInstanceList} publicIpInstanceList PublicIpInstanceList
     * @param {module:com.ncloud.server.api/V1Api~getPublicIpInstanceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetPublicIpInstanceListResponse}
     */
    this.getPublicIpInstanceListGet = function(publicIpInstanceList, callback) {
      var postBody = publicIpInstanceList;

      // verify the required parameter 'publicIpInstanceList' is set
      if (publicIpInstanceList === undefined || publicIpInstanceList === null) {
        throw new Error("Missing the required parameter 'publicIpInstanceList' when calling getPublicIpInstanceListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPublicIpInstanceListResponse;

      return this.apiClient.callApi(
        '/getPublicIpInstanceList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicIpInstanceListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getPublicIpInstanceListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetPublicIpInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스리스트조회
     * @param {module:com.ncloud.server.model/PublicIpInstanceList} publicIpInstanceList PublicIpInstanceList
     * @param {module:com.ncloud.server.api/V1Api~getPublicIpInstanceListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetPublicIpInstanceListResponse}
     */
    this.getPublicIpInstanceListPost = function(publicIpInstanceList, callback) {
      var postBody = publicIpInstanceList;

      // verify the required parameter 'publicIpInstanceList' is set
      if (publicIpInstanceList === undefined || publicIpInstanceList === null) {
        throw new Error("Missing the required parameter 'publicIpInstanceList' when calling getPublicIpInstanceListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPublicIpInstanceListResponse;

      return this.apiClient.callApi(
        '/getPublicIpInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicIpTargetServerInstanceListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getPublicIpTargetServerInstanceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetPublicIpTargetServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP할당(가능)서버인스턴스리스트조회
     * @param {module:com.ncloud.server.model/GetPublicIpTargetServerInstanceListRequest} getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest
     * @param {module:com.ncloud.server.api/V1Api~getPublicIpTargetServerInstanceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetPublicIpTargetServerInstanceListResponse}
     */
    this.getPublicIpTargetServerInstanceListGet = function(getPublicIpTargetServerInstanceListRequest, callback) {
      var postBody = getPublicIpTargetServerInstanceListRequest;

      // verify the required parameter 'getPublicIpTargetServerInstanceListRequest' is set
      if (getPublicIpTargetServerInstanceListRequest === undefined || getPublicIpTargetServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getPublicIpTargetServerInstanceListRequest' when calling getPublicIpTargetServerInstanceListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPublicIpTargetServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getPublicIpTargetServerInstanceList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicIpTargetServerInstanceListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getPublicIpTargetServerInstanceListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetPublicIpTargetServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP할당(가능)서버인스턴스리스트조회
     * @param {module:com.ncloud.server.model/GetPublicIpTargetServerInstanceListRequest} getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest
     * @param {module:com.ncloud.server.api/V1Api~getPublicIpTargetServerInstanceListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetPublicIpTargetServerInstanceListResponse}
     */
    this.getPublicIpTargetServerInstanceListPost = function(getPublicIpTargetServerInstanceListRequest, callback) {
      var postBody = getPublicIpTargetServerInstanceListRequest;

      // verify the required parameter 'getPublicIpTargetServerInstanceListRequest' is set
      if (getPublicIpTargetServerInstanceListRequest === undefined || getPublicIpTargetServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getPublicIpTargetServerInstanceListRequest' when calling getPublicIpTargetServerInstanceListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPublicIpTargetServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getPublicIpTargetServerInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRaidListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getRaidListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetRaidListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RAID리스트조회
     * @param {module:com.ncloud.server.model/GetRaidListRequest} getRaidListRequest getRaidListRequest
     * @param {module:com.ncloud.server.api/V1Api~getRaidListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetRaidListResponse}
     */
    this.getRaidListGet = function(getRaidListRequest, callback) {
      var postBody = getRaidListRequest;

      // verify the required parameter 'getRaidListRequest' is set
      if (getRaidListRequest === undefined || getRaidListRequest === null) {
        throw new Error("Missing the required parameter 'getRaidListRequest' when calling getRaidListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRaidListResponse;

      return this.apiClient.callApi(
        '/getRaidList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRaidListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getRaidListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetRaidListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RAID리스트조회
     * @param {module:com.ncloud.server.model/GetRaidListRequest} getRaidListRequest getRaidListRequest
     * @param {module:com.ncloud.server.api/V1Api~getRaidListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetRaidListResponse}
     */
    this.getRaidListPost = function(getRaidListRequest, callback) {
      var postBody = getRaidListRequest;

      // verify the required parameter 'getRaidListRequest' is set
      if (getRaidListRequest === undefined || getRaidListRequest === null) {
        throw new Error("Missing the required parameter 'getRaidListRequest' when calling getRaidListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRaidListResponse;

      return this.apiClient.callApi(
        '/getRaidList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegionListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getRegionListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetRegionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * REGION리스트조회
     * @param {module:com.ncloud.server.model/GetRegionListRequest} getRegionListRequest getRegionListRequest
     * @param {module:com.ncloud.server.api/V1Api~getRegionListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetRegionListResponse}
     */
    this.getRegionListGet = function(getRegionListRequest, callback) {
      var postBody = getRegionListRequest;

      // verify the required parameter 'getRegionListRequest' is set
      if (getRegionListRequest === undefined || getRegionListRequest === null) {
        throw new Error("Missing the required parameter 'getRegionListRequest' when calling getRegionListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRegionListResponse;

      return this.apiClient.callApi(
        '/getRegionList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegionListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getRegionListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetRegionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * REGION리스트조회
     * @param {module:com.ncloud.server.model/GetRegionListRequest} getRegionListRequest getRegionListRequest
     * @param {module:com.ncloud.server.api/V1Api~getRegionListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetRegionListResponse}
     */
    this.getRegionListPost = function(getRegionListRequest, callback) {
      var postBody = getRegionListRequest;

      // verify the required parameter 'getRegionListRequest' is set
      if (getRegionListRequest === undefined || getRegionListRequest === null) {
        throw new Error("Missing the required parameter 'getRegionListRequest' when calling getRegionListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRegionListResponse;

      return this.apiClient.callApi(
        '/getRegionList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRootPasswordGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getRootPasswordGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetRootPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 루트패스워드조회
     * @param {module:com.ncloud.server.model/GetRootPasswordRequest} getRootPasswordRequest getRootPasswordRequest
     * @param {module:com.ncloud.server.api/V1Api~getRootPasswordGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetRootPasswordResponse}
     */
    this.getRootPasswordGet = function(getRootPasswordRequest, callback) {
      var postBody = getRootPasswordRequest;

      // verify the required parameter 'getRootPasswordRequest' is set
      if (getRootPasswordRequest === undefined || getRootPasswordRequest === null) {
        throw new Error("Missing the required parameter 'getRootPasswordRequest' when calling getRootPasswordGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRootPasswordResponse;

      return this.apiClient.callApi(
        '/getRootPassword', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRootPasswordPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getRootPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetRootPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 루트패스워드조회
     * @param {module:com.ncloud.server.model/GetRootPasswordRequest} getRootPasswordRequest getRootPasswordRequest
     * @param {module:com.ncloud.server.api/V1Api~getRootPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetRootPasswordResponse}
     */
    this.getRootPasswordPost = function(getRootPasswordRequest, callback) {
      var postBody = getRootPasswordRequest;

      // verify the required parameter 'getRootPasswordRequest' is set
      if (getRootPasswordRequest === undefined || getRootPasswordRequest === null) {
        throw new Error("Missing the required parameter 'getRootPasswordRequest' when calling getRootPasswordPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRootPasswordResponse;

      return this.apiClient.callApi(
        '/getRootPassword', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerImageProductListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getServerImageProductListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetServerImageProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버이미지상품리스트조회
     * @param {module:com.ncloud.server.model/GetServerImageProductListRequest} getServerImageProductListRequest getServerImageProductListRequest
     * @param {module:com.ncloud.server.api/V1Api~getServerImageProductListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetServerImageProductListResponse}
     */
    this.getServerImageProductListGet = function(getServerImageProductListRequest, callback) {
      var postBody = getServerImageProductListRequest;

      // verify the required parameter 'getServerImageProductListRequest' is set
      if (getServerImageProductListRequest === undefined || getServerImageProductListRequest === null) {
        throw new Error("Missing the required parameter 'getServerImageProductListRequest' when calling getServerImageProductListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerImageProductListResponse;

      return this.apiClient.callApi(
        '/getServerImageProductList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerImageProductListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getServerImageProductListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetServerImageProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버이미지상품리스트조회
     * @param {module:com.ncloud.server.model/GetServerImageProductListRequest} getServerImageProductListRequest getServerImageProductListRequest
     * @param {module:com.ncloud.server.api/V1Api~getServerImageProductListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetServerImageProductListResponse}
     */
    this.getServerImageProductListPost = function(getServerImageProductListRequest, callback) {
      var postBody = getServerImageProductListRequest;

      // verify the required parameter 'getServerImageProductListRequest' is set
      if (getServerImageProductListRequest === undefined || getServerImageProductListRequest === null) {
        throw new Error("Missing the required parameter 'getServerImageProductListRequest' when calling getServerImageProductListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerImageProductListResponse;

      return this.apiClient.callApi(
        '/getServerImageProductList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerInstanceListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getServerInstanceListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스리스트조회
     * @param {module:com.ncloud.server.model/GetServerInstanceListRequest} getServerInstanceListRequest getServerInstanceListRequest
     * @param {module:com.ncloud.server.api/V1Api~getServerInstanceListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetServerInstanceListResponse}
     */
    this.getServerInstanceListGet = function(getServerInstanceListRequest, callback) {
      var postBody = getServerInstanceListRequest;

      // verify the required parameter 'getServerInstanceListRequest' is set
      if (getServerInstanceListRequest === undefined || getServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getServerInstanceListRequest' when calling getServerInstanceListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getServerInstanceList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerInstanceListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getServerInstanceListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스리스트조회
     * @param {module:com.ncloud.server.model/GetServerInstanceListRequest} getServerInstanceListRequest getServerInstanceListRequest
     * @param {module:com.ncloud.server.api/V1Api~getServerInstanceListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetServerInstanceListResponse}
     */
    this.getServerInstanceListPost = function(getServerInstanceListRequest, callback) {
      var postBody = getServerInstanceListRequest;

      // verify the required parameter 'getServerInstanceListRequest' is set
      if (getServerInstanceListRequest === undefined || getServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getServerInstanceListRequest' when calling getServerInstanceListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getServerInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerProductListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getServerProductListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetServerProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버상품리스트조회
     * @param {module:com.ncloud.server.model/GetServerProductListRequest} getServerProductListRequest getServerProductListRequest
     * @param {module:com.ncloud.server.api/V1Api~getServerProductListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetServerProductListResponse}
     */
    this.getServerProductListGet = function(getServerProductListRequest, callback) {
      var postBody = getServerProductListRequest;

      // verify the required parameter 'getServerProductListRequest' is set
      if (getServerProductListRequest === undefined || getServerProductListRequest === null) {
        throw new Error("Missing the required parameter 'getServerProductListRequest' when calling getServerProductListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerProductListResponse;

      return this.apiClient.callApi(
        '/getServerProductList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerProductListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getServerProductListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetServerProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버상품리스트조회
     * @param {module:com.ncloud.server.model/GetServerProductListRequest} getServerProductListRequest getServerProductListRequest
     * @param {module:com.ncloud.server.api/V1Api~getServerProductListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetServerProductListResponse}
     */
    this.getServerProductListPost = function(getServerProductListRequest, callback) {
      var postBody = getServerProductListRequest;

      // verify the required parameter 'getServerProductListRequest' is set
      if (getServerProductListRequest === undefined || getServerProductListRequest === null) {
        throw new Error("Missing the required parameter 'getServerProductListRequest' when calling getServerProductListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerProductListResponse;

      return this.apiClient.callApi(
        '/getServerProductList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getZoneListGet operation.
     * @callback module:com.ncloud.server.api/V1Api~getZoneListGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetZoneListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ZONE리스트조회
     * @param {module:com.ncloud.server.model/GetZoneListRequest} getZoneListRequest getZoneListRequest
     * @param {module:com.ncloud.server.api/V1Api~getZoneListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetZoneListResponse}
     */
    this.getZoneListGet = function(getZoneListRequest, callback) {
      var postBody = getZoneListRequest;

      // verify the required parameter 'getZoneListRequest' is set
      if (getZoneListRequest === undefined || getZoneListRequest === null) {
        throw new Error("Missing the required parameter 'getZoneListRequest' when calling getZoneListGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetZoneListResponse;

      return this.apiClient.callApi(
        '/getZoneList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getZoneListPost operation.
     * @callback module:com.ncloud.server.api/V1Api~getZoneListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/GetZoneListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ZONE리스트조회
     * @param {module:com.ncloud.server.model/GetZoneListRequest} getZoneListRequest getZoneListRequest
     * @param {module:com.ncloud.server.api/V1Api~getZoneListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/GetZoneListResponse}
     */
    this.getZoneListPost = function(getZoneListRequest, callback) {
      var postBody = getZoneListRequest;

      // verify the required parameter 'getZoneListRequest' is set
      if (getZoneListRequest === undefined || getZoneListRequest === null) {
        throw new Error("Missing the required parameter 'getZoneListRequest' when calling getZoneListPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetZoneListResponse;

      return this.apiClient.callApi(
        '/getZoneList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootServerInstancesGet operation.
     * @callback module:com.ncloud.server.api/V1Api~rebootServerInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/RebootServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스재시작
     * @param {module:com.ncloud.server.model/ServerInstanceNoList} serverInstanceNoList ServerInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~rebootServerInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/RebootServerInstancesResponse}
     */
    this.rebootServerInstancesGet = function(serverInstanceNoList, callback) {
      var postBody = serverInstanceNoList;

      // verify the required parameter 'serverInstanceNoList' is set
      if (serverInstanceNoList === undefined || serverInstanceNoList === null) {
        throw new Error("Missing the required parameter 'serverInstanceNoList' when calling rebootServerInstancesGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RebootServerInstancesResponse;

      return this.apiClient.callApi(
        '/rebootServerInstances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootServerInstancesPost operation.
     * @callback module:com.ncloud.server.api/V1Api~rebootServerInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/RebootServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스재시작
     * @param {module:com.ncloud.server.model/ServerInstanceNoList} serverInstanceNoList ServerInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~rebootServerInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/RebootServerInstancesResponse}
     */
    this.rebootServerInstancesPost = function(serverInstanceNoList, callback) {
      var postBody = serverInstanceNoList;

      // verify the required parameter 'serverInstanceNoList' is set
      if (serverInstanceNoList === undefined || serverInstanceNoList === null) {
        throw new Error("Missing the required parameter 'serverInstanceNoList' when calling rebootServerInstancesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RebootServerInstancesResponse;

      return this.apiClient.callApi(
        '/rebootServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recreateServerInstanceGet operation.
     * @callback module:com.ncloud.server.api/V1Api~recreateServerInstanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/RecreateServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스재생성
     * @param {module:com.ncloud.server.model/RecreateServerInstanceRequest} recreateServerInstanceRequest recreateServerInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~recreateServerInstanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/RecreateServerInstanceResponse}
     */
    this.recreateServerInstanceGet = function(recreateServerInstanceRequest, callback) {
      var postBody = recreateServerInstanceRequest;

      // verify the required parameter 'recreateServerInstanceRequest' is set
      if (recreateServerInstanceRequest === undefined || recreateServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'recreateServerInstanceRequest' when calling recreateServerInstanceGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RecreateServerInstanceResponse;

      return this.apiClient.callApi(
        '/recreateServerInstance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recreateServerInstancePost operation.
     * @callback module:com.ncloud.server.api/V1Api~recreateServerInstancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/RecreateServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스재생성
     * @param {module:com.ncloud.server.model/RecreateServerInstanceRequest} recreateServerInstanceRequest recreateServerInstanceRequest
     * @param {module:com.ncloud.server.api/V1Api~recreateServerInstancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/RecreateServerInstanceResponse}
     */
    this.recreateServerInstancePost = function(recreateServerInstanceRequest, callback) {
      var postBody = recreateServerInstanceRequest;

      // verify the required parameter 'recreateServerInstanceRequest' is set
      if (recreateServerInstanceRequest === undefined || recreateServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'recreateServerInstanceRequest' when calling recreateServerInstancePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RecreateServerInstanceResponse;

      return this.apiClient.callApi(
        '/recreateServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNasVolumeAccessControlGet operation.
     * @callback module:com.ncloud.server.api/V1Api~removeNasVolumeAccessControlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스접근제어제거
     * @param {module:com.ncloud.server.model/NasVolumeAccessControl} nasVolumeAccessControl NasVolumeAccessControl
     * @param {module:com.ncloud.server.api/V1Api~removeNasVolumeAccessControlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.removeNasVolumeAccessControlGet = function(nasVolumeAccessControl, callback) {
      var postBody = nasVolumeAccessControl;

      // verify the required parameter 'nasVolumeAccessControl' is set
      if (nasVolumeAccessControl === undefined || nasVolumeAccessControl === null) {
        throw new Error("Missing the required parameter 'nasVolumeAccessControl' when calling removeNasVolumeAccessControlGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/removeNasVolumeAccessControl', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNasVolumeAccessControlPost operation.
     * @callback module:com.ncloud.server.api/V1Api~removeNasVolumeAccessControlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스접근제어제거
     * @param {module:com.ncloud.server.model/NasVolumeAccessControl} nasVolumeAccessControl NasVolumeAccessControl
     * @param {module:com.ncloud.server.api/V1Api~removeNasVolumeAccessControlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.removeNasVolumeAccessControlPost = function(nasVolumeAccessControl, callback) {
      var postBody = nasVolumeAccessControl;

      // verify the required parameter 'nasVolumeAccessControl' is set
      if (nasVolumeAccessControl === undefined || nasVolumeAccessControl === null) {
        throw new Error("Missing the required parameter 'nasVolumeAccessControl' when calling removeNasVolumeAccessControlPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/removeNasVolumeAccessControl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setNasVolumeAccessControlGet operation.
     * @callback module:com.ncloud.server.api/V1Api~setNasVolumeAccessControlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스접근제어설정
     * @param {module:com.ncloud.server.model/NasVolumeAccessControl} nasVolumeAccessControl NasVolumeAccessControl
     * @param {module:com.ncloud.server.api/V1Api~setNasVolumeAccessControlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.setNasVolumeAccessControlGet = function(nasVolumeAccessControl, callback) {
      var postBody = nasVolumeAccessControl;

      // verify the required parameter 'nasVolumeAccessControl' is set
      if (nasVolumeAccessControl === undefined || nasVolumeAccessControl === null) {
        throw new Error("Missing the required parameter 'nasVolumeAccessControl' when calling setNasVolumeAccessControlGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/setNasVolumeAccessControl', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setNasVolumeAccessControlPost operation.
     * @callback module:com.ncloud.server.api/V1Api~setNasVolumeAccessControlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/NasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스접근제어설정
     * @param {module:com.ncloud.server.model/NasVolumeAccessControl} nasVolumeAccessControl NasVolumeAccessControl
     * @param {module:com.ncloud.server.api/V1Api~setNasVolumeAccessControlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/NasVolumeInstanceListResponse}
     */
    this.setNasVolumeAccessControlPost = function(nasVolumeAccessControl, callback) {
      var postBody = nasVolumeAccessControl;

      // verify the required parameter 'nasVolumeAccessControl' is set
      if (nasVolumeAccessControl === undefined || nasVolumeAccessControl === null) {
        throw new Error("Missing the required parameter 'nasVolumeAccessControl' when calling setNasVolumeAccessControlPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = NasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/setNasVolumeAccessControl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startServerInstancesGet operation.
     * @callback module:com.ncloud.server.api/V1Api~startServerInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/StartServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스시작
     * @param {module:com.ncloud.server.model/ServerInstanceNoList} serverInstanceNoList ServerInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~startServerInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/StartServerInstancesResponse}
     */
    this.startServerInstancesGet = function(serverInstanceNoList, callback) {
      var postBody = serverInstanceNoList;

      // verify the required parameter 'serverInstanceNoList' is set
      if (serverInstanceNoList === undefined || serverInstanceNoList === null) {
        throw new Error("Missing the required parameter 'serverInstanceNoList' when calling startServerInstancesGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = StartServerInstancesResponse;

      return this.apiClient.callApi(
        '/startServerInstances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startServerInstancesPost operation.
     * @callback module:com.ncloud.server.api/V1Api~startServerInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/StartServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스시작
     * @param {module:com.ncloud.server.model/ServerInstanceNoList} serverInstanceNoList ServerInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~startServerInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/StartServerInstancesResponse}
     */
    this.startServerInstancesPost = function(serverInstanceNoList, callback) {
      var postBody = serverInstanceNoList;

      // verify the required parameter 'serverInstanceNoList' is set
      if (serverInstanceNoList === undefined || serverInstanceNoList === null) {
        throw new Error("Missing the required parameter 'serverInstanceNoList' when calling startServerInstancesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = StartServerInstancesResponse;

      return this.apiClient.callApi(
        '/startServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopServerInstancesGet operation.
     * @callback module:com.ncloud.server.api/V1Api~stopServerInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/StopServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스종료
     * @param {module:com.ncloud.server.model/ServerInstanceNoList} serverInstanceNoList ServerInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~stopServerInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/StopServerInstancesResponse}
     */
    this.stopServerInstancesGet = function(serverInstanceNoList, callback) {
      var postBody = serverInstanceNoList;

      // verify the required parameter 'serverInstanceNoList' is set
      if (serverInstanceNoList === undefined || serverInstanceNoList === null) {
        throw new Error("Missing the required parameter 'serverInstanceNoList' when calling stopServerInstancesGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = StopServerInstancesResponse;

      return this.apiClient.callApi(
        '/stopServerInstances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopServerInstancesPost operation.
     * @callback module:com.ncloud.server.api/V1Api~stopServerInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/StopServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스종료
     * @param {module:com.ncloud.server.model/ServerInstanceNoList} serverInstanceNoList ServerInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~stopServerInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/StopServerInstancesResponse}
     */
    this.stopServerInstancesPost = function(serverInstanceNoList, callback) {
      var postBody = serverInstanceNoList;

      // verify the required parameter 'serverInstanceNoList' is set
      if (serverInstanceNoList === undefined || serverInstanceNoList === null) {
        throw new Error("Missing the required parameter 'serverInstanceNoList' when calling stopServerInstancesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = StopServerInstancesResponse;

      return this.apiClient.callApi(
        '/stopServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateServerInstancesGet operation.
     * @callback module:com.ncloud.server.api/V1Api~terminateServerInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/TerminateServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스반납
     * @param {module:com.ncloud.server.model/ServerInstanceNoList} serverInstanceNoList ServerInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~terminateServerInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/TerminateServerInstancesResponse}
     */
    this.terminateServerInstancesGet = function(serverInstanceNoList, callback) {
      var postBody = serverInstanceNoList;

      // verify the required parameter 'serverInstanceNoList' is set
      if (serverInstanceNoList === undefined || serverInstanceNoList === null) {
        throw new Error("Missing the required parameter 'serverInstanceNoList' when calling terminateServerInstancesGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = TerminateServerInstancesResponse;

      return this.apiClient.callApi(
        '/terminateServerInstances', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateServerInstancesPost operation.
     * @callback module:com.ncloud.server.api/V1Api~terminateServerInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ncloud.server.model/TerminateServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스반납
     * @param {module:com.ncloud.server.model/ServerInstanceNoList} serverInstanceNoList ServerInstanceNoList
     * @param {module:com.ncloud.server.api/V1Api~terminateServerInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ncloud.server.model/TerminateServerInstancesResponse}
     */
    this.terminateServerInstancesPost = function(serverInstanceNoList, callback) {
      var postBody = serverInstanceNoList;

      // verify the required parameter 'serverInstanceNoList' is set
      if (serverInstanceNoList === undefined || serverInstanceNoList === null) {
        throw new Error("Missing the required parameter 'serverInstanceNoList' when calling terminateServerInstancesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = TerminateServerInstancesResponse;

      return this.apiClient.callApi(
        '/terminateServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
