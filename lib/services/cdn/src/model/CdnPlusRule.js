/*
* cdn
* <br/>https://ncloud.apigw.ntruss.com/cdn/v2
*
* OpenAPI spec version: 2018-07-04T02:02:10Z
*
* NBP corp.
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Cdn) {
      root.Cdn = {};
    }
    root.Cdn.CdnPlusRule = factory(root.Cdn.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The CdnPlusRule model module.
   * @module model/CdnPlusRule
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>CdnPlusRule</code>.
   * @alias module:model/CdnPlusRule
   * @class
   */
  var exports = function() {
    var _this = this;



























  };

  /**
   * Constructs a <code>CdnPlusRule</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CdnPlusRule} obj Optional instance to populate.
   * @return {module:model/CdnPlusRule} The populated <code>CdnPlusRule</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('protocolTypeCode')) {
        obj['protocolTypeCode'] = ApiClient.convertToType(data['protocolTypeCode'], 'String');
      }
      if (data.hasOwnProperty('serviceDomainTypeCode')) {
        obj['serviceDomainTypeCode'] = ApiClient.convertToType(data['serviceDomainTypeCode'], 'String');
      }
      if (data.hasOwnProperty('originUrl')) {
        obj['originUrl'] = ApiClient.convertToType(data['originUrl'], 'String');
      }
      if (data.hasOwnProperty('originPath')) {
        obj['originPath'] = ApiClient.convertToType(data['originPath'], 'String');
      }
      if (data.hasOwnProperty('originHttpPort')) {
        obj['originHttpPort'] = ApiClient.convertToType(data['originHttpPort'], 'Number');
      }
      if (data.hasOwnProperty('originHttpsPort')) {
        obj['originHttpsPort'] = ApiClient.convertToType(data['originHttpsPort'], 'Number');
      }
      if (data.hasOwnProperty('forwardHostHeaderTypeCode')) {
        obj['forwardHostHeaderTypeCode'] = ApiClient.convertToType(data['forwardHostHeaderTypeCode'], 'String');
      }
      if (data.hasOwnProperty('forwardHostHeader')) {
        obj['forwardHostHeader'] = ApiClient.convertToType(data['forwardHostHeader'], 'String');
      }
      if (data.hasOwnProperty('cacheKeyHostNameTypeCode')) {
        obj['cacheKeyHostNameTypeCode'] = ApiClient.convertToType(data['cacheKeyHostNameTypeCode'], 'String');
      }
      if (data.hasOwnProperty('isGzipCompressionUse')) {
        obj['isGzipCompressionUse'] = ApiClient.convertToType(data['isGzipCompressionUse'], 'Boolean');
      }
      if (data.hasOwnProperty('cachingOptionTypeCode')) {
        obj['cachingOptionTypeCode'] = ApiClient.convertToType(data['cachingOptionTypeCode'], 'String');
      }
      if (data.hasOwnProperty('isErrorContentsResponseUse')) {
        obj['isErrorContentsResponseUse'] = ApiClient.convertToType(data['isErrorContentsResponseUse'], 'Boolean');
      }
      if (data.hasOwnProperty('cachingTtlTime')) {
        obj['cachingTtlTime'] = ApiClient.convertToType(data['cachingTtlTime'], 'String');
      }
      if (data.hasOwnProperty('isQueryStringIgnoreUse')) {
        obj['isQueryStringIgnoreUse'] = ApiClient.convertToType(data['isQueryStringIgnoreUse'], 'Boolean');
      }
      if (data.hasOwnProperty('isRemoveVaryHeaderUse')) {
        obj['isRemoveVaryHeaderUse'] = ApiClient.convertToType(data['isRemoveVaryHeaderUse'], 'Boolean');
      }
      if (data.hasOwnProperty('isLargeFileOptimizationUse')) {
        obj['isLargeFileOptimizationUse'] = ApiClient.convertToType(data['isLargeFileOptimizationUse'], 'Boolean');
      }
      if (data.hasOwnProperty('gzipResponseTypeCode')) {
        obj['gzipResponseTypeCode'] = ApiClient.convertToType(data['gzipResponseTypeCode'], 'String');
      }
      if (data.hasOwnProperty('isReferrerDomainUse')) {
        obj['isReferrerDomainUse'] = ApiClient.convertToType(data['isReferrerDomainUse'], 'Boolean');
      }
      if (data.hasOwnProperty('referrerDomainList')) {
        obj['referrerDomainList'] = ApiClient.convertToType(data['referrerDomainList'], ['String']);
      }
      if (data.hasOwnProperty('isReferrerDomainRestrictUse')) {
        obj['isReferrerDomainRestrictUse'] = ApiClient.convertToType(data['isReferrerDomainRestrictUse'], 'Boolean');
      }
      if (data.hasOwnProperty('isSecureTokenUse')) {
        obj['isSecureTokenUse'] = ApiClient.convertToType(data['isSecureTokenUse'], 'Boolean');
      }
      if (data.hasOwnProperty('secureTokenPassword')) {
        obj['secureTokenPassword'] = ApiClient.convertToType(data['secureTokenPassword'], 'String');
      }
      if (data.hasOwnProperty('isReissueSecureTokenPassword')) {
        obj['isReissueSecureTokenPassword'] = ApiClient.convertToType(data['isReissueSecureTokenPassword'], 'Boolean');
      }
      if (data.hasOwnProperty('certificateName')) {
        obj['certificateName'] = ApiClient.convertToType(data['certificateName'], 'String');
      }
      if (data.hasOwnProperty('isAccessLogUse')) {
        obj['isAccessLogUse'] = ApiClient.convertToType(data['isAccessLogUse'], 'Boolean');
      }
      if (data.hasOwnProperty('accessLogFileStorageContainerName')) {
        obj['accessLogFileStorageContainerName'] = ApiClient.convertToType(data['accessLogFileStorageContainerName'], 'String');
      }
    }
    return obj;
  }

  /**
   * 프로토콜구분코드
   * @member {String} protocolTypeCode
   */
  exports.prototype['protocolTypeCode'] = undefined;
  /**
   * 서비스도메인구분코드
   * @member {String} serviceDomainTypeCode
   */
  exports.prototype['serviceDomainTypeCode'] = undefined;
  /**
   * 원본URL
   * @member {String} originUrl
   */
  exports.prototype['originUrl'] = undefined;
  /**
   * 원본경로
   * @member {String} originPath
   */
  exports.prototype['originPath'] = undefined;
  /**
   * 원본HTTP포트
   * @member {Number} originHttpPort
   */
  exports.prototype['originHttpPort'] = undefined;
  /**
   * 원본HTTPS포트
   * @member {Number} originHttpsPort
   */
  exports.prototype['originHttpsPort'] = undefined;
  /**
   * 포워드호스트헤더구분코드
   * @member {String} forwardHostHeaderTypeCode
   */
  exports.prototype['forwardHostHeaderTypeCode'] = undefined;
  /**
   * 포워드호스트헤더
   * @member {String} forwardHostHeader
   */
  exports.prototype['forwardHostHeader'] = undefined;
  /**
   * 캐쉬키호스트명구분코드
   * @member {String} cacheKeyHostNameTypeCode
   */
  exports.prototype['cacheKeyHostNameTypeCode'] = undefined;
  /**
   * GZIP압축사용여부
   * @member {Boolean} isGzipCompressionUse
   */
  exports.prototype['isGzipCompressionUse'] = undefined;
  /**
   * 캐싱옵션구분코드
   * @member {String} cachingOptionTypeCode
   */
  exports.prototype['cachingOptionTypeCode'] = undefined;
  /**
   * 오류내용응답사용여부
   * @member {Boolean} isErrorContentsResponseUse
   */
  exports.prototype['isErrorContentsResponseUse'] = undefined;
  /**
   * TTL캐싱
   * @member {String} cachingTtlTime
   */
  exports.prototype['cachingTtlTime'] = undefined;
  /**
   * 쿼리스트링무시여부
   * @member {Boolean} isQueryStringIgnoreUse
   */
  exports.prototype['isQueryStringIgnoreUse'] = undefined;
  /**
   * 헤더제거사용여부
   * @member {Boolean} isRemoveVaryHeaderUse
   */
  exports.prototype['isRemoveVaryHeaderUse'] = undefined;
  /**
   * 대용량파일최적화사용여부
   * @member {Boolean} isLargeFileOptimizationUse
   */
  exports.prototype['isLargeFileOptimizationUse'] = undefined;
  /**
   * GZIP응답구분코드
   * @member {String} gzipResponseTypeCode
   */
  exports.prototype['gzipResponseTypeCode'] = undefined;
  /**
   * 레퍼러도메인사용여부
   * @member {Boolean} isReferrerDomainUse
   */
  exports.prototype['isReferrerDomainUse'] = undefined;
  /**
   * 레퍼러도메인리스트
   * @member {Array.<String>} referrerDomainList
   */
  exports.prototype['referrerDomainList'] = undefined;
  /**
   * 레퍼러도메인제한사용여부
   * @member {Boolean} isReferrerDomainRestrictUse
   */
  exports.prototype['isReferrerDomainRestrictUse'] = undefined;
  /**
   * 보안토큰사용여부
   * @member {Boolean} isSecureTokenUse
   */
  exports.prototype['isSecureTokenUse'] = undefined;
  /**
   * 보안토큰비밀번호
   * @member {String} secureTokenPassword
   */
  exports.prototype['secureTokenPassword'] = undefined;
  /**
   * 보안토큰재발급여부
   * @member {Boolean} isReissueSecureTokenPassword
   */
  exports.prototype['isReissueSecureTokenPassword'] = undefined;
  /**
   * 인증서이름
   * @member {String} certificateName
   */
  exports.prototype['certificateName'] = undefined;
  /**
   * 엑세스로그사용여부
   * @member {Boolean} isAccessLogUse
   */
  exports.prototype['isAccessLogUse'] = undefined;
  /**
   * 엑세스로그파일스토리지인스턴스이름
   * @member {String} accessLogFileStorageContainerName
   */
  exports.prototype['accessLogFileStorageContainerName'] = undefined;



  return exports;
}));


