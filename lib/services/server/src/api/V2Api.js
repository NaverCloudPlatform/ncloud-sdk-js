/*
* server
* <br/>https://ncloud.apigw.ntruss.com/server/v2
*
* OpenAPI spec version: 2018-07-02T09:06:17Z
*
* NBP corp.
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddNasVolumeAccessControlRequest', 'model/AddNasVolumeAccessControlResponse', 'model/AddPortForwardingRulesRequest', 'model/AddPortForwardingRulesResponse', 'model/AssociatePublicIpWithServerInstanceRequest', 'model/AssociatePublicIpWithServerInstanceResponse', 'model/ChangeNasVolumeSizeRequest', 'model/ChangeNasVolumeSizeResponse', 'model/ChangeServerInstanceSpecRequest', 'model/ChangeServerInstanceSpecResponse', 'model/CreateBlockStorageInstanceRequest', 'model/CreateBlockStorageInstanceResponse', 'model/CreateLoginKeyRequest', 'model/CreateLoginKeyResponse', 'model/CreateMemberServerImageRequest', 'model/CreateMemberServerImageResponse', 'model/CreateNasVolumeInstanceRequest', 'model/CreateNasVolumeInstanceResponse', 'model/CreatePublicIpInstanceRequest', 'model/CreatePublicIpInstanceResponse', 'model/CreateServerInstancesRequest', 'model/CreateServerInstancesResponse', 'model/DeleteBlockStorageInstancesRequest', 'model/DeleteBlockStorageInstancesResponse', 'model/DeleteLoginKeyRequest', 'model/DeleteLoginKeyResponse', 'model/DeleteMemberServerImagesRequest', 'model/DeleteMemberServerImagesResponse', 'model/DeleteNasVolumeInstanceRequest', 'model/DeleteNasVolumeInstanceResponse', 'model/DeletePortForwardingRulesRequest', 'model/DeletePortForwardingRulesResponse', 'model/DeletePublicIpInstancesRequest', 'model/DeletePublicIpInstancesResponse', 'model/DisassociatePublicIpFromServerInstanceRequest', 'model/DisassociatePublicIpFromServerInstanceResponse', 'model/GetAccessControlGroupListRequest', 'model/GetAccessControlGroupListResponse', 'model/GetAccessControlGroupServerInstanceListRequest', 'model/GetAccessControlGroupServerInstanceListResponse', 'model/GetAccessControlRuleListRequest', 'model/GetAccessControlRuleListResponse', 'model/GetBlockStorageInstanceListRequest', 'model/GetBlockStorageInstanceListResponse', 'model/GetBlockStorageSnapshotInstanceListRequest', 'model/GetBlockStorageSnapshotInstanceListResponse', 'model/GetLoginKeyListRequest', 'model/GetLoginKeyListResponse', 'model/GetMemberServerImageListRequest', 'model/GetMemberServerImageListResponse', 'model/GetNasVolumeInstanceListRequest', 'model/GetNasVolumeInstanceListResponse', 'model/GetNasVolumeInstanceRatingListRequest', 'model/GetNasVolumeInstanceRatingListResponse', 'model/GetPortForwardingRuleListRequest', 'model/GetPortForwardingRuleListResponse', 'model/GetPublicIpInstanceListRequest', 'model/GetPublicIpInstanceListResponse', 'model/GetPublicIpTargetServerInstanceListRequest', 'model/GetPublicIpTargetServerInstanceListResponse', 'model/GetRaidListRequest', 'model/GetRaidListResponse', 'model/GetRegionListRequest', 'model/GetRegionListResponse', 'model/GetRootPasswordRequest', 'model/GetRootPasswordResponse', 'model/GetServerImageProductListRequest', 'model/GetServerImageProductListResponse', 'model/GetServerInstanceListRequest', 'model/GetServerInstanceListResponse', 'model/GetServerProductListRequest', 'model/GetServerProductListResponse', 'model/GetZoneListRequest', 'model/GetZoneListResponse', 'model/RebootServerInstancesRequest', 'model/RebootServerInstancesResponse', 'model/RecreateServerInstanceRequest', 'model/RecreateServerInstanceResponse', 'model/RemoveNasVolumeAccessControlRequest', 'model/RemoveNasVolumeAccessControlResponse', 'model/SetNasVolumeAccessControlRequest', 'model/SetNasVolumeAccessControlResponse', 'model/StartServerInstancesRequest', 'model/StartServerInstancesResponse', 'model/StopServerInstancesRequest', 'model/StopServerInstancesResponse', 'model/TerminateServerInstancesRequest', 'model/TerminateServerInstancesResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddNasVolumeAccessControlRequest'), require('../model/AddNasVolumeAccessControlResponse'), require('../model/AddPortForwardingRulesRequest'), require('../model/AddPortForwardingRulesResponse'), require('../model/AssociatePublicIpWithServerInstanceRequest'), require('../model/AssociatePublicIpWithServerInstanceResponse'), require('../model/ChangeNasVolumeSizeRequest'), require('../model/ChangeNasVolumeSizeResponse'), require('../model/ChangeServerInstanceSpecRequest'), require('../model/ChangeServerInstanceSpecResponse'), require('../model/CreateBlockStorageInstanceRequest'), require('../model/CreateBlockStorageInstanceResponse'), require('../model/CreateLoginKeyRequest'), require('../model/CreateLoginKeyResponse'), require('../model/CreateMemberServerImageRequest'), require('../model/CreateMemberServerImageResponse'), require('../model/CreateNasVolumeInstanceRequest'), require('../model/CreateNasVolumeInstanceResponse'), require('../model/CreatePublicIpInstanceRequest'), require('../model/CreatePublicIpInstanceResponse'), require('../model/CreateServerInstancesRequest'), require('../model/CreateServerInstancesResponse'), require('../model/DeleteBlockStorageInstancesRequest'), require('../model/DeleteBlockStorageInstancesResponse'), require('../model/DeleteLoginKeyRequest'), require('../model/DeleteLoginKeyResponse'), require('../model/DeleteMemberServerImagesRequest'), require('../model/DeleteMemberServerImagesResponse'), require('../model/DeleteNasVolumeInstanceRequest'), require('../model/DeleteNasVolumeInstanceResponse'), require('../model/DeletePortForwardingRulesRequest'), require('../model/DeletePortForwardingRulesResponse'), require('../model/DeletePublicIpInstancesRequest'), require('../model/DeletePublicIpInstancesResponse'), require('../model/DisassociatePublicIpFromServerInstanceRequest'), require('../model/DisassociatePublicIpFromServerInstanceResponse'), require('../model/GetAccessControlGroupListRequest'), require('../model/GetAccessControlGroupListResponse'), require('../model/GetAccessControlGroupServerInstanceListRequest'), require('../model/GetAccessControlGroupServerInstanceListResponse'), require('../model/GetAccessControlRuleListRequest'), require('../model/GetAccessControlRuleListResponse'), require('../model/GetBlockStorageInstanceListRequest'), require('../model/GetBlockStorageInstanceListResponse'), require('../model/GetBlockStorageSnapshotInstanceListRequest'), require('../model/GetBlockStorageSnapshotInstanceListResponse'), require('../model/GetLoginKeyListRequest'), require('../model/GetLoginKeyListResponse'), require('../model/GetMemberServerImageListRequest'), require('../model/GetMemberServerImageListResponse'), require('../model/GetNasVolumeInstanceListRequest'), require('../model/GetNasVolumeInstanceListResponse'), require('../model/GetNasVolumeInstanceRatingListRequest'), require('../model/GetNasVolumeInstanceRatingListResponse'), require('../model/GetPortForwardingRuleListRequest'), require('../model/GetPortForwardingRuleListResponse'), require('../model/GetPublicIpInstanceListRequest'), require('../model/GetPublicIpInstanceListResponse'), require('../model/GetPublicIpTargetServerInstanceListRequest'), require('../model/GetPublicIpTargetServerInstanceListResponse'), require('../model/GetRaidListRequest'), require('../model/GetRaidListResponse'), require('../model/GetRegionListRequest'), require('../model/GetRegionListResponse'), require('../model/GetRootPasswordRequest'), require('../model/GetRootPasswordResponse'), require('../model/GetServerImageProductListRequest'), require('../model/GetServerImageProductListResponse'), require('../model/GetServerInstanceListRequest'), require('../model/GetServerInstanceListResponse'), require('../model/GetServerProductListRequest'), require('../model/GetServerProductListResponse'), require('../model/GetZoneListRequest'), require('../model/GetZoneListResponse'), require('../model/RebootServerInstancesRequest'), require('../model/RebootServerInstancesResponse'), require('../model/RecreateServerInstanceRequest'), require('../model/RecreateServerInstanceResponse'), require('../model/RemoveNasVolumeAccessControlRequest'), require('../model/RemoveNasVolumeAccessControlResponse'), require('../model/SetNasVolumeAccessControlRequest'), require('../model/SetNasVolumeAccessControlResponse'), require('../model/StartServerInstancesRequest'), require('../model/StartServerInstancesResponse'), require('../model/StopServerInstancesRequest'), require('../model/StopServerInstancesResponse'), require('../model/TerminateServerInstancesRequest'), require('../model/TerminateServerInstancesResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Server) {
      root.Server = {};
    }
    root.Server.V2Api = factory(root.Server.ApiClient, root.Server.AddNasVolumeAccessControlRequest, root.Server.AddNasVolumeAccessControlResponse, root.Server.AddPortForwardingRulesRequest, root.Server.AddPortForwardingRulesResponse, root.Server.AssociatePublicIpWithServerInstanceRequest, root.Server.AssociatePublicIpWithServerInstanceResponse, root.Server.ChangeNasVolumeSizeRequest, root.Server.ChangeNasVolumeSizeResponse, root.Server.ChangeServerInstanceSpecRequest, root.Server.ChangeServerInstanceSpecResponse, root.Server.CreateBlockStorageInstanceRequest, root.Server.CreateBlockStorageInstanceResponse, root.Server.CreateLoginKeyRequest, root.Server.CreateLoginKeyResponse, root.Server.CreateMemberServerImageRequest, root.Server.CreateMemberServerImageResponse, root.Server.CreateNasVolumeInstanceRequest, root.Server.CreateNasVolumeInstanceResponse, root.Server.CreatePublicIpInstanceRequest, root.Server.CreatePublicIpInstanceResponse, root.Server.CreateServerInstancesRequest, root.Server.CreateServerInstancesResponse, root.Server.DeleteBlockStorageInstancesRequest, root.Server.DeleteBlockStorageInstancesResponse, root.Server.DeleteLoginKeyRequest, root.Server.DeleteLoginKeyResponse, root.Server.DeleteMemberServerImagesRequest, root.Server.DeleteMemberServerImagesResponse, root.Server.DeleteNasVolumeInstanceRequest, root.Server.DeleteNasVolumeInstanceResponse, root.Server.DeletePortForwardingRulesRequest, root.Server.DeletePortForwardingRulesResponse, root.Server.DeletePublicIpInstancesRequest, root.Server.DeletePublicIpInstancesResponse, root.Server.DisassociatePublicIpFromServerInstanceRequest, root.Server.DisassociatePublicIpFromServerInstanceResponse, root.Server.GetAccessControlGroupListRequest, root.Server.GetAccessControlGroupListResponse, root.Server.GetAccessControlGroupServerInstanceListRequest, root.Server.GetAccessControlGroupServerInstanceListResponse, root.Server.GetAccessControlRuleListRequest, root.Server.GetAccessControlRuleListResponse, root.Server.GetBlockStorageInstanceListRequest, root.Server.GetBlockStorageInstanceListResponse, root.Server.GetBlockStorageSnapshotInstanceListRequest, root.Server.GetBlockStorageSnapshotInstanceListResponse, root.Server.GetLoginKeyListRequest, root.Server.GetLoginKeyListResponse, root.Server.GetMemberServerImageListRequest, root.Server.GetMemberServerImageListResponse, root.Server.GetNasVolumeInstanceListRequest, root.Server.GetNasVolumeInstanceListResponse, root.Server.GetNasVolumeInstanceRatingListRequest, root.Server.GetNasVolumeInstanceRatingListResponse, root.Server.GetPortForwardingRuleListRequest, root.Server.GetPortForwardingRuleListResponse, root.Server.GetPublicIpInstanceListRequest, root.Server.GetPublicIpInstanceListResponse, root.Server.GetPublicIpTargetServerInstanceListRequest, root.Server.GetPublicIpTargetServerInstanceListResponse, root.Server.GetRaidListRequest, root.Server.GetRaidListResponse, root.Server.GetRegionListRequest, root.Server.GetRegionListResponse, root.Server.GetRootPasswordRequest, root.Server.GetRootPasswordResponse, root.Server.GetServerImageProductListRequest, root.Server.GetServerImageProductListResponse, root.Server.GetServerInstanceListRequest, root.Server.GetServerInstanceListResponse, root.Server.GetServerProductListRequest, root.Server.GetServerProductListResponse, root.Server.GetZoneListRequest, root.Server.GetZoneListResponse, root.Server.RebootServerInstancesRequest, root.Server.RebootServerInstancesResponse, root.Server.RecreateServerInstanceRequest, root.Server.RecreateServerInstanceResponse, root.Server.RemoveNasVolumeAccessControlRequest, root.Server.RemoveNasVolumeAccessControlResponse, root.Server.SetNasVolumeAccessControlRequest, root.Server.SetNasVolumeAccessControlResponse, root.Server.StartServerInstancesRequest, root.Server.StartServerInstancesResponse, root.Server.StopServerInstancesRequest, root.Server.StopServerInstancesResponse, root.Server.TerminateServerInstancesRequest, root.Server.TerminateServerInstancesResponse);
  }
}(this, function(ApiClient, AddNasVolumeAccessControlRequest, AddNasVolumeAccessControlResponse, AddPortForwardingRulesRequest, AddPortForwardingRulesResponse, AssociatePublicIpWithServerInstanceRequest, AssociatePublicIpWithServerInstanceResponse, ChangeNasVolumeSizeRequest, ChangeNasVolumeSizeResponse, ChangeServerInstanceSpecRequest, ChangeServerInstanceSpecResponse, CreateBlockStorageInstanceRequest, CreateBlockStorageInstanceResponse, CreateLoginKeyRequest, CreateLoginKeyResponse, CreateMemberServerImageRequest, CreateMemberServerImageResponse, CreateNasVolumeInstanceRequest, CreateNasVolumeInstanceResponse, CreatePublicIpInstanceRequest, CreatePublicIpInstanceResponse, CreateServerInstancesRequest, CreateServerInstancesResponse, DeleteBlockStorageInstancesRequest, DeleteBlockStorageInstancesResponse, DeleteLoginKeyRequest, DeleteLoginKeyResponse, DeleteMemberServerImagesRequest, DeleteMemberServerImagesResponse, DeleteNasVolumeInstanceRequest, DeleteNasVolumeInstanceResponse, DeletePortForwardingRulesRequest, DeletePortForwardingRulesResponse, DeletePublicIpInstancesRequest, DeletePublicIpInstancesResponse, DisassociatePublicIpFromServerInstanceRequest, DisassociatePublicIpFromServerInstanceResponse, GetAccessControlGroupListRequest, GetAccessControlGroupListResponse, GetAccessControlGroupServerInstanceListRequest, GetAccessControlGroupServerInstanceListResponse, GetAccessControlRuleListRequest, GetAccessControlRuleListResponse, GetBlockStorageInstanceListRequest, GetBlockStorageInstanceListResponse, GetBlockStorageSnapshotInstanceListRequest, GetBlockStorageSnapshotInstanceListResponse, GetLoginKeyListRequest, GetLoginKeyListResponse, GetMemberServerImageListRequest, GetMemberServerImageListResponse, GetNasVolumeInstanceListRequest, GetNasVolumeInstanceListResponse, GetNasVolumeInstanceRatingListRequest, GetNasVolumeInstanceRatingListResponse, GetPortForwardingRuleListRequest, GetPortForwardingRuleListResponse, GetPublicIpInstanceListRequest, GetPublicIpInstanceListResponse, GetPublicIpTargetServerInstanceListRequest, GetPublicIpTargetServerInstanceListResponse, GetRaidListRequest, GetRaidListResponse, GetRegionListRequest, GetRegionListResponse, GetRootPasswordRequest, GetRootPasswordResponse, GetServerImageProductListRequest, GetServerImageProductListResponse, GetServerInstanceListRequest, GetServerInstanceListResponse, GetServerProductListRequest, GetServerProductListResponse, GetZoneListRequest, GetZoneListResponse, RebootServerInstancesRequest, RebootServerInstancesResponse, RecreateServerInstanceRequest, RecreateServerInstanceResponse, RemoveNasVolumeAccessControlRequest, RemoveNasVolumeAccessControlResponse, SetNasVolumeAccessControlRequest, SetNasVolumeAccessControlResponse, StartServerInstancesRequest, StartServerInstancesResponse, StopServerInstancesRequest, StopServerInstancesResponse, TerminateServerInstancesRequest, TerminateServerInstancesResponse) {
  'use strict';

  /**
   * V2 service.
   * @module api/V2Api
   * @version 1.0.0
   */

  /**
   * Constructs a new V2Api. 
   * @alias module:api/V2Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addNasVolumeAccessControl operation.
     * @callback module:api/V2Api~addNasVolumeAccessControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddNasVolumeAccessControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스접근제어추가
     * @param {module:model/AddNasVolumeAccessControlRequest} addNasVolumeAccessControlRequest addNasVolumeAccessControlRequest
     * @param {module:api/V2Api~addNasVolumeAccessControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddNasVolumeAccessControlResponse}
     */
    this.addNasVolumeAccessControl = function(addNasVolumeAccessControlRequest, callback) {
      var postBody = addNasVolumeAccessControlRequest;

      // verify the required parameter 'addNasVolumeAccessControlRequest' is set
      if (addNasVolumeAccessControlRequest === undefined || addNasVolumeAccessControlRequest === null) {
        throw new Error("Missing the required parameter 'addNasVolumeAccessControlRequest' when calling addNasVolumeAccessControl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddNasVolumeAccessControlResponse;

      return this.apiClient.callApi(
        '/addNasVolumeAccessControl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPortForwardingRules operation.
     * @callback module:api/V2Api~addPortForwardingRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddPortForwardingRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 포트포워딩Rule추가
     * @param {module:model/AddPortForwardingRulesRequest} addPortForwardingRulesRequest addPortForwardingRulesRequest
     * @param {module:api/V2Api~addPortForwardingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddPortForwardingRulesResponse}
     */
    this.addPortForwardingRules = function(addPortForwardingRulesRequest, callback) {
      var postBody = addPortForwardingRulesRequest;

      // verify the required parameter 'addPortForwardingRulesRequest' is set
      if (addPortForwardingRulesRequest === undefined || addPortForwardingRulesRequest === null) {
        throw new Error("Missing the required parameter 'addPortForwardingRulesRequest' when calling addPortForwardingRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AddPortForwardingRulesResponse;

      return this.apiClient.callApi(
        '/addPortForwardingRules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the associatePublicIpWithServerInstance operation.
     * @callback module:api/V2Api~associatePublicIpWithServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociatePublicIpWithServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP를서버인스턴스에할당
     * @param {module:model/AssociatePublicIpWithServerInstanceRequest} associatePublicIpWithServerInstanceRequest associatePublicIpWithServerInstanceRequest
     * @param {module:api/V2Api~associatePublicIpWithServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociatePublicIpWithServerInstanceResponse}
     */
    this.associatePublicIpWithServerInstance = function(associatePublicIpWithServerInstanceRequest, callback) {
      var postBody = associatePublicIpWithServerInstanceRequest;

      // verify the required parameter 'associatePublicIpWithServerInstanceRequest' is set
      if (associatePublicIpWithServerInstanceRequest === undefined || associatePublicIpWithServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'associatePublicIpWithServerInstanceRequest' when calling associatePublicIpWithServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = AssociatePublicIpWithServerInstanceResponse;

      return this.apiClient.callApi(
        '/associatePublicIpWithServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeNasVolumeSize operation.
     * @callback module:api/V2Api~changeNasVolumeSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeNasVolumeSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨사이즈변경
     * @param {module:model/ChangeNasVolumeSizeRequest} changeNasVolumeSizeRequest changeNasVolumeSizeRequest
     * @param {module:api/V2Api~changeNasVolumeSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeNasVolumeSizeResponse}
     */
    this.changeNasVolumeSize = function(changeNasVolumeSizeRequest, callback) {
      var postBody = changeNasVolumeSizeRequest;

      // verify the required parameter 'changeNasVolumeSizeRequest' is set
      if (changeNasVolumeSizeRequest === undefined || changeNasVolumeSizeRequest === null) {
        throw new Error("Missing the required parameter 'changeNasVolumeSizeRequest' when calling changeNasVolumeSize");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = ChangeNasVolumeSizeResponse;

      return this.apiClient.callApi(
        '/changeNasVolumeSize', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeServerInstanceSpec operation.
     * @callback module:api/V2Api~changeServerInstanceSpecCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeServerInstanceSpecResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스스팩변경
     * @param {module:model/ChangeServerInstanceSpecRequest} changeServerInstanceSpecRequest changeServerInstanceSpecRequest
     * @param {module:api/V2Api~changeServerInstanceSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeServerInstanceSpecResponse}
     */
    this.changeServerInstanceSpec = function(changeServerInstanceSpecRequest, callback) {
      var postBody = changeServerInstanceSpecRequest;

      // verify the required parameter 'changeServerInstanceSpecRequest' is set
      if (changeServerInstanceSpecRequest === undefined || changeServerInstanceSpecRequest === null) {
        throw new Error("Missing the required parameter 'changeServerInstanceSpecRequest' when calling changeServerInstanceSpec");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = ChangeServerInstanceSpecResponse;

      return this.apiClient.callApi(
        '/changeServerInstanceSpec', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBlockStorageInstance operation.
     * @callback module:api/V2Api~createBlockStorageInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBlockStorageInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스생성
     * @param {module:model/CreateBlockStorageInstanceRequest} createBlockStorageInstanceRequest createBlockStorageInstanceRequest
     * @param {module:api/V2Api~createBlockStorageInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBlockStorageInstanceResponse}
     */
    this.createBlockStorageInstance = function(createBlockStorageInstanceRequest, callback) {
      var postBody = createBlockStorageInstanceRequest;

      // verify the required parameter 'createBlockStorageInstanceRequest' is set
      if (createBlockStorageInstanceRequest === undefined || createBlockStorageInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createBlockStorageInstanceRequest' when calling createBlockStorageInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateBlockStorageInstanceResponse;

      return this.apiClient.callApi(
        '/createBlockStorageInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLoginKey operation.
     * @callback module:api/V2Api~createLoginKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLoginKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키생성
     * @param {module:model/CreateLoginKeyRequest} createLoginKeyRequest createLoginKeyRequest
     * @param {module:api/V2Api~createLoginKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLoginKeyResponse}
     */
    this.createLoginKey = function(createLoginKeyRequest, callback) {
      var postBody = createLoginKeyRequest;

      // verify the required parameter 'createLoginKeyRequest' is set
      if (createLoginKeyRequest === undefined || createLoginKeyRequest === null) {
        throw new Error("Missing the required parameter 'createLoginKeyRequest' when calling createLoginKey");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateLoginKeyResponse;

      return this.apiClient.callApi(
        '/createLoginKey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createMemberServerImage operation.
     * @callback module:api/V2Api~createMemberServerImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMemberServerImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지생성
     * @param {module:model/CreateMemberServerImageRequest} createMemberServerImageRequest createMemberServerImageRequest
     * @param {module:api/V2Api~createMemberServerImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMemberServerImageResponse}
     */
    this.createMemberServerImage = function(createMemberServerImageRequest, callback) {
      var postBody = createMemberServerImageRequest;

      // verify the required parameter 'createMemberServerImageRequest' is set
      if (createMemberServerImageRequest === undefined || createMemberServerImageRequest === null) {
        throw new Error("Missing the required parameter 'createMemberServerImageRequest' when calling createMemberServerImage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateMemberServerImageResponse;

      return this.apiClient.callApi(
        '/createMemberServerImage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNasVolumeInstance operation.
     * @callback module:api/V2Api~createNasVolumeInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNasVolumeInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스생성
     * @param {module:model/CreateNasVolumeInstanceRequest} createNasVolumeInstanceRequest createNasVolumeInstanceRequest
     * @param {module:api/V2Api~createNasVolumeInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNasVolumeInstanceResponse}
     */
    this.createNasVolumeInstance = function(createNasVolumeInstanceRequest, callback) {
      var postBody = createNasVolumeInstanceRequest;

      // verify the required parameter 'createNasVolumeInstanceRequest' is set
      if (createNasVolumeInstanceRequest === undefined || createNasVolumeInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createNasVolumeInstanceRequest' when calling createNasVolumeInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateNasVolumeInstanceResponse;

      return this.apiClient.callApi(
        '/createNasVolumeInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPublicIpInstance operation.
     * @callback module:api/V2Api~createPublicIpInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePublicIpInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스생성
     * @param {module:model/CreatePublicIpInstanceRequest} createPublicIpInstanceRequest createPublicIpInstanceRequest
     * @param {module:api/V2Api~createPublicIpInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePublicIpInstanceResponse}
     */
    this.createPublicIpInstance = function(createPublicIpInstanceRequest, callback) {
      var postBody = createPublicIpInstanceRequest;

      // verify the required parameter 'createPublicIpInstanceRequest' is set
      if (createPublicIpInstanceRequest === undefined || createPublicIpInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createPublicIpInstanceRequest' when calling createPublicIpInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreatePublicIpInstanceResponse;

      return this.apiClient.callApi(
        '/createPublicIpInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createServerInstances operation.
     * @callback module:api/V2Api~createServerInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스생성
     * @param {module:model/CreateServerInstancesRequest} createServerInstancesRequest createServerInstancesRequest
     * @param {module:api/V2Api~createServerInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateServerInstancesResponse}
     */
    this.createServerInstances = function(createServerInstancesRequest, callback) {
      var postBody = createServerInstancesRequest;

      // verify the required parameter 'createServerInstancesRequest' is set
      if (createServerInstancesRequest === undefined || createServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'createServerInstancesRequest' when calling createServerInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = CreateServerInstancesResponse;

      return this.apiClient.callApi(
        '/createServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlockStorageInstances operation.
     * @callback module:api/V2Api~deleteBlockStorageInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBlockStorageInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스삭제
     * @param {module:model/DeleteBlockStorageInstancesRequest} deleteBlockStorageInstancesRequest deleteBlockStorageInstancesRequest
     * @param {module:api/V2Api~deleteBlockStorageInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBlockStorageInstancesResponse}
     */
    this.deleteBlockStorageInstances = function(deleteBlockStorageInstancesRequest, callback) {
      var postBody = deleteBlockStorageInstancesRequest;

      // verify the required parameter 'deleteBlockStorageInstancesRequest' is set
      if (deleteBlockStorageInstancesRequest === undefined || deleteBlockStorageInstancesRequest === null) {
        throw new Error("Missing the required parameter 'deleteBlockStorageInstancesRequest' when calling deleteBlockStorageInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteBlockStorageInstancesResponse;

      return this.apiClient.callApi(
        '/deleteBlockStorageInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLoginKey operation.
     * @callback module:api/V2Api~deleteLoginKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteLoginKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키삭제
     * @param {module:model/DeleteLoginKeyRequest} deleteLoginKeyRequest deleteLoginKeyRequest
     * @param {module:api/V2Api~deleteLoginKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteLoginKeyResponse}
     */
    this.deleteLoginKey = function(deleteLoginKeyRequest, callback) {
      var postBody = deleteLoginKeyRequest;

      // verify the required parameter 'deleteLoginKeyRequest' is set
      if (deleteLoginKeyRequest === undefined || deleteLoginKeyRequest === null) {
        throw new Error("Missing the required parameter 'deleteLoginKeyRequest' when calling deleteLoginKey");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteLoginKeyResponse;

      return this.apiClient.callApi(
        '/deleteLoginKey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMemberServerImages operation.
     * @callback module:api/V2Api~deleteMemberServerImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteMemberServerImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지삭제
     * @param {module:model/DeleteMemberServerImagesRequest} deleteMemberServerImagesRequest deleteMemberServerImagesRequest
     * @param {module:api/V2Api~deleteMemberServerImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteMemberServerImagesResponse}
     */
    this.deleteMemberServerImages = function(deleteMemberServerImagesRequest, callback) {
      var postBody = deleteMemberServerImagesRequest;

      // verify the required parameter 'deleteMemberServerImagesRequest' is set
      if (deleteMemberServerImagesRequest === undefined || deleteMemberServerImagesRequest === null) {
        throw new Error("Missing the required parameter 'deleteMemberServerImagesRequest' when calling deleteMemberServerImages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteMemberServerImagesResponse;

      return this.apiClient.callApi(
        '/deleteMemberServerImages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNasVolumeInstance operation.
     * @callback module:api/V2Api~deleteNasVolumeInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteNasVolumeInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스삭제
     * @param {module:model/DeleteNasVolumeInstanceRequest} deleteNasVolumeInstanceRequest deleteNasVolumeInstanceRequest
     * @param {module:api/V2Api~deleteNasVolumeInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteNasVolumeInstanceResponse}
     */
    this.deleteNasVolumeInstance = function(deleteNasVolumeInstanceRequest, callback) {
      var postBody = deleteNasVolumeInstanceRequest;

      // verify the required parameter 'deleteNasVolumeInstanceRequest' is set
      if (deleteNasVolumeInstanceRequest === undefined || deleteNasVolumeInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deleteNasVolumeInstanceRequest' when calling deleteNasVolumeInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeleteNasVolumeInstanceResponse;

      return this.apiClient.callApi(
        '/deleteNasVolumeInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortForwardingRules operation.
     * @callback module:api/V2Api~deletePortForwardingRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePortForwardingRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 포트포워딩Rule삭제
     * @param {module:model/DeletePortForwardingRulesRequest} deletePortForwardingRulesRequest deletePortForwardingRulesRequest
     * @param {module:api/V2Api~deletePortForwardingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePortForwardingRulesResponse}
     */
    this.deletePortForwardingRules = function(deletePortForwardingRulesRequest, callback) {
      var postBody = deletePortForwardingRulesRequest;

      // verify the required parameter 'deletePortForwardingRulesRequest' is set
      if (deletePortForwardingRulesRequest === undefined || deletePortForwardingRulesRequest === null) {
        throw new Error("Missing the required parameter 'deletePortForwardingRulesRequest' when calling deletePortForwardingRules");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeletePortForwardingRulesResponse;

      return this.apiClient.callApi(
        '/deletePortForwardingRules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePublicIpInstances operation.
     * @callback module:api/V2Api~deletePublicIpInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePublicIpInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스삭제
     * @param {module:model/DeletePublicIpInstancesRequest} deletePublicIpInstancesRequest deletePublicIpInstancesRequest
     * @param {module:api/V2Api~deletePublicIpInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePublicIpInstancesResponse}
     */
    this.deletePublicIpInstances = function(deletePublicIpInstancesRequest, callback) {
      var postBody = deletePublicIpInstancesRequest;

      // verify the required parameter 'deletePublicIpInstancesRequest' is set
      if (deletePublicIpInstancesRequest === undefined || deletePublicIpInstancesRequest === null) {
        throw new Error("Missing the required parameter 'deletePublicIpInstancesRequest' when calling deletePublicIpInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DeletePublicIpInstancesResponse;

      return this.apiClient.callApi(
        '/deletePublicIpInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociatePublicIpFromServerInstance operation.
     * @callback module:api/V2Api~disassociatePublicIpFromServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociatePublicIpFromServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP를서버인스턴스에할당해제
     * @param {module:model/DisassociatePublicIpFromServerInstanceRequest} disassociatePublicIpFromServerInstanceRequest disassociatePublicIpFromServerInstanceRequest
     * @param {module:api/V2Api~disassociatePublicIpFromServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociatePublicIpFromServerInstanceResponse}
     */
    this.disassociatePublicIpFromServerInstance = function(disassociatePublicIpFromServerInstanceRequest, callback) {
      var postBody = disassociatePublicIpFromServerInstanceRequest;

      // verify the required parameter 'disassociatePublicIpFromServerInstanceRequest' is set
      if (disassociatePublicIpFromServerInstanceRequest === undefined || disassociatePublicIpFromServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'disassociatePublicIpFromServerInstanceRequest' when calling disassociatePublicIpFromServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = DisassociatePublicIpFromServerInstanceResponse;

      return this.apiClient.callApi(
        '/disassociatePublicIpFromServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlGroupList operation.
     * @callback module:api/V2Api~getAccessControlGroupListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccessControlGroupListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 접근제어그룹리스트조회
     * @param {module:model/GetAccessControlGroupListRequest} getAccessControlGroupListRequest getAccessControlGroupListRequest
     * @param {module:api/V2Api~getAccessControlGroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccessControlGroupListResponse}
     */
    this.getAccessControlGroupList = function(getAccessControlGroupListRequest, callback) {
      var postBody = getAccessControlGroupListRequest;

      // verify the required parameter 'getAccessControlGroupListRequest' is set
      if (getAccessControlGroupListRequest === undefined || getAccessControlGroupListRequest === null) {
        throw new Error("Missing the required parameter 'getAccessControlGroupListRequest' when calling getAccessControlGroupList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupListResponse;

      return this.apiClient.callApi(
        '/getAccessControlGroupList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlGroupServerInstanceList operation.
     * @callback module:api/V2Api~getAccessControlGroupServerInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccessControlGroupServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 접근제어그룹적용된서버인스턴스리스트조회
     * @param {module:model/GetAccessControlGroupServerInstanceListRequest} getAccessControlGroupServerInstanceListRequest getAccessControlGroupServerInstanceListRequest
     * @param {module:api/V2Api~getAccessControlGroupServerInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccessControlGroupServerInstanceListResponse}
     */
    this.getAccessControlGroupServerInstanceList = function(getAccessControlGroupServerInstanceListRequest, callback) {
      var postBody = getAccessControlGroupServerInstanceListRequest;

      // verify the required parameter 'getAccessControlGroupServerInstanceListRequest' is set
      if (getAccessControlGroupServerInstanceListRequest === undefined || getAccessControlGroupServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getAccessControlGroupServerInstanceListRequest' when calling getAccessControlGroupServerInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlGroupServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getAccessControlGroupServerInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessControlRuleList operation.
     * @callback module:api/V2Api~getAccessControlRuleListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccessControlRuleListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 접근제어규칙리스트조회
     * @param {module:model/GetAccessControlRuleListRequest} getAccessControlRuleListRequest getAccessControlRuleListRequest
     * @param {module:api/V2Api~getAccessControlRuleListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccessControlRuleListResponse}
     */
    this.getAccessControlRuleList = function(getAccessControlRuleListRequest, callback) {
      var postBody = getAccessControlRuleListRequest;

      // verify the required parameter 'getAccessControlRuleListRequest' is set
      if (getAccessControlRuleListRequest === undefined || getAccessControlRuleListRequest === null) {
        throw new Error("Missing the required parameter 'getAccessControlRuleListRequest' when calling getAccessControlRuleList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetAccessControlRuleListResponse;

      return this.apiClient.callApi(
        '/getAccessControlRuleList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockStorageInstanceList operation.
     * @callback module:api/V2Api~getBlockStorageInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockStorageInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지인스턴스리스트조회
     * @param {module:model/GetBlockStorageInstanceListRequest} getBlockStorageInstanceListRequest getBlockStorageInstanceListRequest
     * @param {module:api/V2Api~getBlockStorageInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockStorageInstanceListResponse}
     */
    this.getBlockStorageInstanceList = function(getBlockStorageInstanceListRequest, callback) {
      var postBody = getBlockStorageInstanceListRequest;

      // verify the required parameter 'getBlockStorageInstanceListRequest' is set
      if (getBlockStorageInstanceListRequest === undefined || getBlockStorageInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getBlockStorageInstanceListRequest' when calling getBlockStorageInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBlockStorageInstanceListResponse;

      return this.apiClient.callApi(
        '/getBlockStorageInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockStorageSnapshotInstanceList operation.
     * @callback module:api/V2Api~getBlockStorageSnapshotInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockStorageSnapshotInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 블록스토리지스냅샷인스턴스리스트조회
     * @param {module:model/GetBlockStorageSnapshotInstanceListRequest} getBlockStorageSnapshotInstanceListRequest getBlockStorageSnapshotInstanceListRequest
     * @param {module:api/V2Api~getBlockStorageSnapshotInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockStorageSnapshotInstanceListResponse}
     */
    this.getBlockStorageSnapshotInstanceList = function(getBlockStorageSnapshotInstanceListRequest, callback) {
      var postBody = getBlockStorageSnapshotInstanceListRequest;

      // verify the required parameter 'getBlockStorageSnapshotInstanceListRequest' is set
      if (getBlockStorageSnapshotInstanceListRequest === undefined || getBlockStorageSnapshotInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getBlockStorageSnapshotInstanceListRequest' when calling getBlockStorageSnapshotInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetBlockStorageSnapshotInstanceListResponse;

      return this.apiClient.callApi(
        '/getBlockStorageSnapshotInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoginKeyList operation.
     * @callback module:api/V2Api~getLoginKeyListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLoginKeyListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 로그인키리스트조회
     * @param {module:model/GetLoginKeyListRequest} getLoginKeyListRequest getLoginKeyListRequest
     * @param {module:api/V2Api~getLoginKeyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLoginKeyListResponse}
     */
    this.getLoginKeyList = function(getLoginKeyListRequest, callback) {
      var postBody = getLoginKeyListRequest;

      // verify the required parameter 'getLoginKeyListRequest' is set
      if (getLoginKeyListRequest === undefined || getLoginKeyListRequest === null) {
        throw new Error("Missing the required parameter 'getLoginKeyListRequest' when calling getLoginKeyList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetLoginKeyListResponse;

      return this.apiClient.callApi(
        '/getLoginKeyList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMemberServerImageList operation.
     * @callback module:api/V2Api~getMemberServerImageListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMemberServerImageListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 회원서버이미지리스트조회
     * @param {module:model/GetMemberServerImageListRequest} getMemberServerImageListRequest getMemberServerImageListRequest
     * @param {module:api/V2Api~getMemberServerImageListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMemberServerImageListResponse}
     */
    this.getMemberServerImageList = function(getMemberServerImageListRequest, callback) {
      var postBody = getMemberServerImageListRequest;

      // verify the required parameter 'getMemberServerImageListRequest' is set
      if (getMemberServerImageListRequest === undefined || getMemberServerImageListRequest === null) {
        throw new Error("Missing the required parameter 'getMemberServerImageListRequest' when calling getMemberServerImageList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetMemberServerImageListResponse;

      return this.apiClient.callApi(
        '/getMemberServerImageList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNasVolumeInstanceList operation.
     * @callback module:api/V2Api~getNasVolumeInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNasVolumeInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스리스트조회
     * @param {module:model/GetNasVolumeInstanceListRequest} getNasVolumeInstanceListRequest getNasVolumeInstanceListRequest
     * @param {module:api/V2Api~getNasVolumeInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNasVolumeInstanceListResponse}
     */
    this.getNasVolumeInstanceList = function(getNasVolumeInstanceListRequest, callback) {
      var postBody = getNasVolumeInstanceListRequest;

      // verify the required parameter 'getNasVolumeInstanceListRequest' is set
      if (getNasVolumeInstanceListRequest === undefined || getNasVolumeInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getNasVolumeInstanceListRequest' when calling getNasVolumeInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetNasVolumeInstanceListResponse;

      return this.apiClient.callApi(
        '/getNasVolumeInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNasVolumeInstanceRatingList operation.
     * @callback module:api/V2Api~getNasVolumeInstanceRatingListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNasVolumeInstanceRatingListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스측정리스트조회
     * @param {module:model/GetNasVolumeInstanceRatingListRequest} getNasVolumeInstanceRatingListRequest getNasVolumeInstanceRatingListRequest
     * @param {module:api/V2Api~getNasVolumeInstanceRatingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNasVolumeInstanceRatingListResponse}
     */
    this.getNasVolumeInstanceRatingList = function(getNasVolumeInstanceRatingListRequest, callback) {
      var postBody = getNasVolumeInstanceRatingListRequest;

      // verify the required parameter 'getNasVolumeInstanceRatingListRequest' is set
      if (getNasVolumeInstanceRatingListRequest === undefined || getNasVolumeInstanceRatingListRequest === null) {
        throw new Error("Missing the required parameter 'getNasVolumeInstanceRatingListRequest' when calling getNasVolumeInstanceRatingList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetNasVolumeInstanceRatingListResponse;

      return this.apiClient.callApi(
        '/getNasVolumeInstanceRatingList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortForwardingRuleList operation.
     * @callback module:api/V2Api~getPortForwardingRuleListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPortForwardingRuleListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 포트포워딩Rule리스트조회
     * @param {module:model/GetPortForwardingRuleListRequest} getPortForwardingRuleListRequest getPortForwardingRuleListRequest
     * @param {module:api/V2Api~getPortForwardingRuleListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPortForwardingRuleListResponse}
     */
    this.getPortForwardingRuleList = function(getPortForwardingRuleListRequest, callback) {
      var postBody = getPortForwardingRuleListRequest;

      // verify the required parameter 'getPortForwardingRuleListRequest' is set
      if (getPortForwardingRuleListRequest === undefined || getPortForwardingRuleListRequest === null) {
        throw new Error("Missing the required parameter 'getPortForwardingRuleListRequest' when calling getPortForwardingRuleList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPortForwardingRuleListResponse;

      return this.apiClient.callApi(
        '/getPortForwardingRuleList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicIpInstanceList operation.
     * @callback module:api/V2Api~getPublicIpInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicIpInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP인스턴스리스트조회
     * @param {module:model/GetPublicIpInstanceListRequest} getPublicIpInstanceListRequest getPublicIpInstanceListRequest
     * @param {module:api/V2Api~getPublicIpInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicIpInstanceListResponse}
     */
    this.getPublicIpInstanceList = function(getPublicIpInstanceListRequest, callback) {
      var postBody = getPublicIpInstanceListRequest;

      // verify the required parameter 'getPublicIpInstanceListRequest' is set
      if (getPublicIpInstanceListRequest === undefined || getPublicIpInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getPublicIpInstanceListRequest' when calling getPublicIpInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPublicIpInstanceListResponse;

      return this.apiClient.callApi(
        '/getPublicIpInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicIpTargetServerInstanceList operation.
     * @callback module:api/V2Api~getPublicIpTargetServerInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublicIpTargetServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 공인IP할당(가능)서버인스턴스리스트조회
     * @param {module:model/GetPublicIpTargetServerInstanceListRequest} getPublicIpTargetServerInstanceListRequest getPublicIpTargetServerInstanceListRequest
     * @param {module:api/V2Api~getPublicIpTargetServerInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublicIpTargetServerInstanceListResponse}
     */
    this.getPublicIpTargetServerInstanceList = function(getPublicIpTargetServerInstanceListRequest, callback) {
      var postBody = getPublicIpTargetServerInstanceListRequest;

      // verify the required parameter 'getPublicIpTargetServerInstanceListRequest' is set
      if (getPublicIpTargetServerInstanceListRequest === undefined || getPublicIpTargetServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getPublicIpTargetServerInstanceListRequest' when calling getPublicIpTargetServerInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetPublicIpTargetServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getPublicIpTargetServerInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRaidList operation.
     * @callback module:api/V2Api~getRaidListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRaidListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RAID리스트조회
     * @param {module:model/GetRaidListRequest} getRaidListRequest getRaidListRequest
     * @param {module:api/V2Api~getRaidListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRaidListResponse}
     */
    this.getRaidList = function(getRaidListRequest, callback) {
      var postBody = getRaidListRequest;

      // verify the required parameter 'getRaidListRequest' is set
      if (getRaidListRequest === undefined || getRaidListRequest === null) {
        throw new Error("Missing the required parameter 'getRaidListRequest' when calling getRaidList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRaidListResponse;

      return this.apiClient.callApi(
        '/getRaidList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegionList operation.
     * @callback module:api/V2Api~getRegionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRegionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * REGION리스트조회
     * @param {module:model/GetRegionListRequest} getRegionListRequest getRegionListRequest
     * @param {module:api/V2Api~getRegionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRegionListResponse}
     */
    this.getRegionList = function(getRegionListRequest, callback) {
      var postBody = getRegionListRequest;

      // verify the required parameter 'getRegionListRequest' is set
      if (getRegionListRequest === undefined || getRegionListRequest === null) {
        throw new Error("Missing the required parameter 'getRegionListRequest' when calling getRegionList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRegionListResponse;

      return this.apiClient.callApi(
        '/getRegionList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRootPassword operation.
     * @callback module:api/V2Api~getRootPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRootPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 루트패스워드조회
     * @param {module:model/GetRootPasswordRequest} getRootPasswordRequest getRootPasswordRequest
     * @param {module:api/V2Api~getRootPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRootPasswordResponse}
     */
    this.getRootPassword = function(getRootPasswordRequest, callback) {
      var postBody = getRootPasswordRequest;

      // verify the required parameter 'getRootPasswordRequest' is set
      if (getRootPasswordRequest === undefined || getRootPasswordRequest === null) {
        throw new Error("Missing the required parameter 'getRootPasswordRequest' when calling getRootPassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetRootPasswordResponse;

      return this.apiClient.callApi(
        '/getRootPassword', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerImageProductList operation.
     * @callback module:api/V2Api~getServerImageProductListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServerImageProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버이미지상품리스트조회
     * @param {module:model/GetServerImageProductListRequest} getServerImageProductListRequest getServerImageProductListRequest
     * @param {module:api/V2Api~getServerImageProductListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServerImageProductListResponse}
     */
    this.getServerImageProductList = function(getServerImageProductListRequest, callback) {
      var postBody = getServerImageProductListRequest;

      // verify the required parameter 'getServerImageProductListRequest' is set
      if (getServerImageProductListRequest === undefined || getServerImageProductListRequest === null) {
        throw new Error("Missing the required parameter 'getServerImageProductListRequest' when calling getServerImageProductList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerImageProductListResponse;

      return this.apiClient.callApi(
        '/getServerImageProductList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerInstanceList operation.
     * @callback module:api/V2Api~getServerInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServerInstanceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스리스트조회
     * @param {module:model/GetServerInstanceListRequest} getServerInstanceListRequest getServerInstanceListRequest
     * @param {module:api/V2Api~getServerInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServerInstanceListResponse}
     */
    this.getServerInstanceList = function(getServerInstanceListRequest, callback) {
      var postBody = getServerInstanceListRequest;

      // verify the required parameter 'getServerInstanceListRequest' is set
      if (getServerInstanceListRequest === undefined || getServerInstanceListRequest === null) {
        throw new Error("Missing the required parameter 'getServerInstanceListRequest' when calling getServerInstanceList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerInstanceListResponse;

      return this.apiClient.callApi(
        '/getServerInstanceList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerProductList operation.
     * @callback module:api/V2Api~getServerProductListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServerProductListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버상품리스트조회
     * @param {module:model/GetServerProductListRequest} getServerProductListRequest getServerProductListRequest
     * @param {module:api/V2Api~getServerProductListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServerProductListResponse}
     */
    this.getServerProductList = function(getServerProductListRequest, callback) {
      var postBody = getServerProductListRequest;

      // verify the required parameter 'getServerProductListRequest' is set
      if (getServerProductListRequest === undefined || getServerProductListRequest === null) {
        throw new Error("Missing the required parameter 'getServerProductListRequest' when calling getServerProductList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetServerProductListResponse;

      return this.apiClient.callApi(
        '/getServerProductList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getZoneList operation.
     * @callback module:api/V2Api~getZoneListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetZoneListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ZONE리스트조회
     * @param {module:model/GetZoneListRequest} getZoneListRequest getZoneListRequest
     * @param {module:api/V2Api~getZoneListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetZoneListResponse}
     */
    this.getZoneList = function(getZoneListRequest, callback) {
      var postBody = getZoneListRequest;

      // verify the required parameter 'getZoneListRequest' is set
      if (getZoneListRequest === undefined || getZoneListRequest === null) {
        throw new Error("Missing the required parameter 'getZoneListRequest' when calling getZoneList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = GetZoneListResponse;

      return this.apiClient.callApi(
        '/getZoneList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootServerInstances operation.
     * @callback module:api/V2Api~rebootServerInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebootServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스재시작
     * @param {module:model/RebootServerInstancesRequest} rebootServerInstancesRequest rebootServerInstancesRequest
     * @param {module:api/V2Api~rebootServerInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebootServerInstancesResponse}
     */
    this.rebootServerInstances = function(rebootServerInstancesRequest, callback) {
      var postBody = rebootServerInstancesRequest;

      // verify the required parameter 'rebootServerInstancesRequest' is set
      if (rebootServerInstancesRequest === undefined || rebootServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'rebootServerInstancesRequest' when calling rebootServerInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RebootServerInstancesResponse;

      return this.apiClient.callApi(
        '/rebootServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recreateServerInstance operation.
     * @callback module:api/V2Api~recreateServerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecreateServerInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스재생성
     * @param {module:model/RecreateServerInstanceRequest} recreateServerInstanceRequest recreateServerInstanceRequest
     * @param {module:api/V2Api~recreateServerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecreateServerInstanceResponse}
     */
    this.recreateServerInstance = function(recreateServerInstanceRequest, callback) {
      var postBody = recreateServerInstanceRequest;

      // verify the required parameter 'recreateServerInstanceRequest' is set
      if (recreateServerInstanceRequest === undefined || recreateServerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'recreateServerInstanceRequest' when calling recreateServerInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RecreateServerInstanceResponse;

      return this.apiClient.callApi(
        '/recreateServerInstance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNasVolumeAccessControl operation.
     * @callback module:api/V2Api~removeNasVolumeAccessControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveNasVolumeAccessControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스접근제어제거
     * @param {module:model/RemoveNasVolumeAccessControlRequest} removeNasVolumeAccessControlRequest removeNasVolumeAccessControlRequest
     * @param {module:api/V2Api~removeNasVolumeAccessControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveNasVolumeAccessControlResponse}
     */
    this.removeNasVolumeAccessControl = function(removeNasVolumeAccessControlRequest, callback) {
      var postBody = removeNasVolumeAccessControlRequest;

      // verify the required parameter 'removeNasVolumeAccessControlRequest' is set
      if (removeNasVolumeAccessControlRequest === undefined || removeNasVolumeAccessControlRequest === null) {
        throw new Error("Missing the required parameter 'removeNasVolumeAccessControlRequest' when calling removeNasVolumeAccessControl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = RemoveNasVolumeAccessControlResponse;

      return this.apiClient.callApi(
        '/removeNasVolumeAccessControl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setNasVolumeAccessControl operation.
     * @callback module:api/V2Api~setNasVolumeAccessControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetNasVolumeAccessControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NAS볼륨인스턴스접근제어설정
     * @param {module:model/SetNasVolumeAccessControlRequest} setNasVolumeAccessControlRequest setNasVolumeAccessControlRequest
     * @param {module:api/V2Api~setNasVolumeAccessControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetNasVolumeAccessControlResponse}
     */
    this.setNasVolumeAccessControl = function(setNasVolumeAccessControlRequest, callback) {
      var postBody = setNasVolumeAccessControlRequest;

      // verify the required parameter 'setNasVolumeAccessControlRequest' is set
      if (setNasVolumeAccessControlRequest === undefined || setNasVolumeAccessControlRequest === null) {
        throw new Error("Missing the required parameter 'setNasVolumeAccessControlRequest' when calling setNasVolumeAccessControl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = SetNasVolumeAccessControlResponse;

      return this.apiClient.callApi(
        '/setNasVolumeAccessControl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startServerInstances operation.
     * @callback module:api/V2Api~startServerInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스시작
     * @param {module:model/StartServerInstancesRequest} startServerInstancesRequest startServerInstancesRequest
     * @param {module:api/V2Api~startServerInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartServerInstancesResponse}
     */
    this.startServerInstances = function(startServerInstancesRequest, callback) {
      var postBody = startServerInstancesRequest;

      // verify the required parameter 'startServerInstancesRequest' is set
      if (startServerInstancesRequest === undefined || startServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'startServerInstancesRequest' when calling startServerInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = StartServerInstancesResponse;

      return this.apiClient.callApi(
        '/startServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopServerInstances operation.
     * @callback module:api/V2Api~stopServerInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스종료
     * @param {module:model/StopServerInstancesRequest} stopServerInstancesRequest stopServerInstancesRequest
     * @param {module:api/V2Api~stopServerInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopServerInstancesResponse}
     */
    this.stopServerInstances = function(stopServerInstancesRequest, callback) {
      var postBody = stopServerInstancesRequest;

      // verify the required parameter 'stopServerInstancesRequest' is set
      if (stopServerInstancesRequest === undefined || stopServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'stopServerInstancesRequest' when calling stopServerInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = StopServerInstancesResponse;

      return this.apiClient.callApi(
        '/stopServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateServerInstances operation.
     * @callback module:api/V2Api~terminateServerInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerminateServerInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 서버인스턴스반납
     * @param {module:model/TerminateServerInstancesRequest} terminateServerInstancesRequest terminateServerInstancesRequest
     * @param {module:api/V2Api~terminateServerInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerminateServerInstancesResponse}
     */
    this.terminateServerInstances = function(terminateServerInstancesRequest, callback) {
      var postBody = terminateServerInstancesRequest;

      // verify the required parameter 'terminateServerInstancesRequest' is set
      if (terminateServerInstancesRequest === undefined || terminateServerInstancesRequest === null) {
        throw new Error("Missing the required parameter 'terminateServerInstancesRequest' when calling terminateServerInstances");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['x-ncp-iam'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = TerminateServerInstancesResponse;

      return this.apiClient.callApi(
        '/terminateServerInstances', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
