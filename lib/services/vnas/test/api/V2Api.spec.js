/*
* vnas
* VPC NAS 관련 API<br/>https://ncloud.apigw.ntruss.com/vnas/v2
*
* OpenAPI spec version: 2020-09-17T02:28:41Z
*
* NBP corp.
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    factory(require('expect.js'), require('../../src/index'));
  } else {
    factory(root.expect, root.Vnas);
  }
}(this, function(expect, Vnas) {
  'use strict';

  var client = new Vnas.ApiClient({
    accessKey: 'your access key',
    secretKey: 'your secret key'
  });
  var instance = new Vnas.V2Api(client);

  describe('V2Api', function() {
    describe('addNasVolumeAccessControl', function() {
      it('should call addNasVolumeAccessControl successfully', function(done) {
        //uncomment below and update the code to test addNasVolumeAccessControl
        //instance.addNasVolumeAccessControl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //done();
        //});
        done();
      });
    });
    describe('changeNasVolumeSize', function() {
      it('should call changeNasVolumeSize successfully', function(done) {
        //uncomment below and update the code to test changeNasVolumeSize
        //instance.changeNasVolumeSize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //done();
        //});
        done();
      });
    });
    describe('createNasVolumeInstance', function() {
      it('should call createNasVolumeInstance successfully', function(done) {
        //uncomment below and update the code to test createNasVolumeInstance
        //instance.createNasVolumeInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //done();
        //});
        done();
      });
    });
    describe('deleteNasVolumeInstances', function() {
      it('should call deleteNasVolumeInstances successfully', function(done) {
        //uncomment below and update the code to test deleteNasVolumeInstances
        //instance.deleteNasVolumeInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //done();
        //});
        done();
      });
    });
    describe('getNasVolumeInstanceDetail', function() {
      it('should call getNasVolumeInstanceDetail successfully', function(done) {
        //uncomment below and update the code to test getNasVolumeInstanceDetail
        //instance.getNasVolumeInstanceDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //done();
        //});
        done();
      });
    });
    describe('getNasVolumeInstanceList', function() {
      it('should call getNasVolumeInstanceList successfully', function(done) {
        //uncomment below and update the code to test getNasVolumeInstanceList
        //instance.getNasVolumeInstanceList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //done();
        //});
        done();
      });
    });
    describe('removeNasVolumeAccessControl', function() {
      it('should call removeNasVolumeAccessControl successfully', function(done) {
        //uncomment below and update the code to test removeNasVolumeAccessControl
        //instance.removeNasVolumeAccessControl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //done();
        //});
        done();
      });
    });
    describe('setNasVolumeAccessControl', function() {
      it('should call setNasVolumeAccessControl successfully', function(done) {
        //uncomment below and update the code to test setNasVolumeAccessControl
        //instance.setNasVolumeAccessControl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //done();
        //});
        done();
      });
    });
  });

}));
