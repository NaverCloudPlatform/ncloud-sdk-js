/*
* vpc
* VPC Network 관련 API<br/>https://ncloud.apigw.ntruss.com/vpc/v2
*
* NBP corp.
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommonCode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CommonCode'));
  } else {
    // Browser globals (root is window)
    if (!root.Vpc) {
      root.Vpc = {};
    }
    root.Vpc.VpcPeeringInstance = factory(root.Vpc.ApiClient, root.Vpc.CommonCode);
  }
}(this, function(ApiClient, CommonCode) {
  'use strict';




  /**
   * The VpcPeeringInstance model module.
   * @module model/VpcPeeringInstance
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>VpcPeeringInstance</code>.
   * @alias module:model/VpcPeeringInstance
   * @class
   */
  var exports = function() {
    var _this = this;





















  };

  /**
   * Constructs a <code>VpcPeeringInstance</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VpcPeeringInstance} obj Optional instance to populate.
   * @return {module:model/VpcPeeringInstance} The populated <code>VpcPeeringInstance</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('vpcPeeringInstanceNo')) {
        obj['vpcPeeringInstanceNo'] = ApiClient.convertToType(data['vpcPeeringInstanceNo'], 'String');
      }
      if (data.hasOwnProperty('vpcPeeringName')) {
        obj['vpcPeeringName'] = ApiClient.convertToType(data['vpcPeeringName'], 'String');
      }
      if (data.hasOwnProperty('regionCode')) {
        obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
      }
      if (data.hasOwnProperty('createDate')) {
        obj['createDate'] = ApiClient.convertToType(data['createDate'], 'String');
      }
      if (data.hasOwnProperty('lastModifiyDate')) {
        obj['lastModifiyDate'] = ApiClient.convertToType(data['lastModifiyDate'], 'String');
      }
      if (data.hasOwnProperty('vpcPeeringInstanceStatus')) {
        obj['vpcPeeringInstanceStatus'] = CommonCode.constructFromObject(data['vpcPeeringInstanceStatus']);
      }
      if (data.hasOwnProperty('vpcPeeringInstanceStatusName')) {
        obj['vpcPeeringInstanceStatusName'] = ApiClient.convertToType(data['vpcPeeringInstanceStatusName'], 'String');
      }
      if (data.hasOwnProperty('vpcPeeringInstanceOperation')) {
        obj['vpcPeeringInstanceOperation'] = CommonCode.constructFromObject(data['vpcPeeringInstanceOperation']);
      }
      if (data.hasOwnProperty('sourceVpcNo')) {
        obj['sourceVpcNo'] = ApiClient.convertToType(data['sourceVpcNo'], 'String');
      }
      if (data.hasOwnProperty('sourceVpcName')) {
        obj['sourceVpcName'] = ApiClient.convertToType(data['sourceVpcName'], 'String');
      }
      if (data.hasOwnProperty('sourceVpcIpv4CidrBlock')) {
        obj['sourceVpcIpv4CidrBlock'] = ApiClient.convertToType(data['sourceVpcIpv4CidrBlock'], 'String');
      }
      if (data.hasOwnProperty('sourceVpcLoginId')) {
        obj['sourceVpcLoginId'] = ApiClient.convertToType(data['sourceVpcLoginId'], 'String');
      }
      if (data.hasOwnProperty('targetVpcNo')) {
        obj['targetVpcNo'] = ApiClient.convertToType(data['targetVpcNo'], 'String');
      }
      if (data.hasOwnProperty('targetVpcName')) {
        obj['targetVpcName'] = ApiClient.convertToType(data['targetVpcName'], 'String');
      }
      if (data.hasOwnProperty('targetVpcIpv4CidrBlock')) {
        obj['targetVpcIpv4CidrBlock'] = ApiClient.convertToType(data['targetVpcIpv4CidrBlock'], 'String');
      }
      if (data.hasOwnProperty('targetVpcLoginId')) {
        obj['targetVpcLoginId'] = ApiClient.convertToType(data['targetVpcLoginId'], 'String');
      }
      if (data.hasOwnProperty('vpcPeeringDescription')) {
        obj['vpcPeeringDescription'] = ApiClient.convertToType(data['vpcPeeringDescription'], 'String');
      }
      if (data.hasOwnProperty('hasReverseVpcPeering')) {
        obj['hasReverseVpcPeering'] = ApiClient.convertToType(data['hasReverseVpcPeering'], 'Boolean');
      }
      if (data.hasOwnProperty('isBetweenAccounts')) {
        obj['isBetweenAccounts'] = ApiClient.convertToType(data['isBetweenAccounts'], 'Boolean');
      }
      if (data.hasOwnProperty('reverseVpcPeeringInstanceNo')) {
        obj['reverseVpcPeeringInstanceNo'] = ApiClient.convertToType(data['reverseVpcPeeringInstanceNo'], 'String');
      }
    }
    return obj;
  }

  /**
   * VPCPeering인스턴스번호
   * @member {String} vpcPeeringInstanceNo
   */
  exports.prototype['vpcPeeringInstanceNo'] = undefined;
  /**
   * VPCPeering이름
   * @member {String} vpcPeeringName
   */
  exports.prototype['vpcPeeringName'] = undefined;
  /**
   * REGION코드
   * @member {String} regionCode
   */
  exports.prototype['regionCode'] = undefined;
  /**
   * 생성일시
   * @member {String} createDate
   */
  exports.prototype['createDate'] = undefined;
  /**
   * 마지막수정일시
   * @member {String} lastModifiyDate
   */
  exports.prototype['lastModifiyDate'] = undefined;
  /**
   * VPCPeering인스턴스상태
   * @member {module:model/CommonCode} vpcPeeringInstanceStatus
   */
  exports.prototype['vpcPeeringInstanceStatus'] = undefined;
  /**
   * VPCPeering인스턴스상태이름
   * @member {String} vpcPeeringInstanceStatusName
   */
  exports.prototype['vpcPeeringInstanceStatusName'] = undefined;
  /**
   * VPCPeering인스턴스OP
   * @member {module:model/CommonCode} vpcPeeringInstanceOperation
   */
  exports.prototype['vpcPeeringInstanceOperation'] = undefined;
  /**
   * 요청VPC번호
   * @member {String} sourceVpcNo
   */
  exports.prototype['sourceVpcNo'] = undefined;
  /**
   * 요청VPC이름
   * @member {String} sourceVpcName
   */
  exports.prototype['sourceVpcName'] = undefined;
  /**
   * 요청VPC IPv4 CIDR블록
   * @member {String} sourceVpcIpv4CidrBlock
   */
  exports.prototype['sourceVpcIpv4CidrBlock'] = undefined;
  /**
   * 요청VPC소유자ID
   * @member {String} sourceVpcLoginId
   */
  exports.prototype['sourceVpcLoginId'] = undefined;
  /**
   * 수락VPC번호
   * @member {String} targetVpcNo
   */
  exports.prototype['targetVpcNo'] = undefined;
  /**
   * 수락VPC이름
   * @member {String} targetVpcName
   */
  exports.prototype['targetVpcName'] = undefined;
  /**
   * 수락VPC IPv4 CIDR블록
   * @member {String} targetVpcIpv4CidrBlock
   */
  exports.prototype['targetVpcIpv4CidrBlock'] = undefined;
  /**
   * 수락VPC소유자ID
   * @member {String} targetVpcLoginId
   */
  exports.prototype['targetVpcLoginId'] = undefined;
  /**
   * VPCPeering설명
   * @member {String} vpcPeeringDescription
   */
  exports.prototype['vpcPeeringDescription'] = undefined;
  /**
   * 역방향VPCPeering존재여부
   * @member {Boolean} hasReverseVpcPeering
   */
  exports.prototype['hasReverseVpcPeering'] = undefined;
  /**
   * 계정간의VPCPeering여부
   * @member {Boolean} isBetweenAccounts
   */
  exports.prototype['isBetweenAccounts'] = undefined;
  /**
   * 역방향VPCPeering인스턴스번호
   * @member {String} reverseVpcPeeringInstanceNo
   */
  exports.prototype['reverseVpcPeeringInstanceNo'] = undefined;



  return exports;
}));


